
ElectronicLoad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ed6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00002ed6  00002f6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  0080008c  0080008c  00002f96  2**0
                  ALLOC
  3 .stab         000026d0  00000000  00000000  00002f98  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008a5  00000000  00000000  00005668  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000208  00000000  00000000  00005f10  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000206e  00000000  00000000  00006118  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a39  00000000  00000000  00008186  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001277  00000000  00000000  00008bbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000514  00000000  00000000  00009e38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000787  00000000  00000000  0000a34c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000220a  00000000  00000000  0000aad3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000ccdd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ed       	ldi	r30, 0xD6	; 214
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3b       	cpi	r26, 0xB1	; 177
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b7 05 	call	0xb6e	; 0xb6e <main>
      8a:	0c 94 69 17 	jmp	0x2ed2	; 0x2ed2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <spi_data_send>:
	SPCR |= (1<<SPE);                // Enable SPI
}

static inline uint8_t spi_data_send(uint8_t data)
{
	SPDR = data;                 // send the data
      92:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
      94:	77 9b       	sbis	0x0e, 7	; 14
      96:	fe cf       	rjmp	.-4      	; 0x94 <spi_data_send+0x2>
	SPSR |= _BV(SPIF);
      98:	77 9a       	sbi	0x0e, 7	; 14
	return SPDR;
      9a:	8f b1       	in	r24, 0x0f	; 15
}
      9c:	08 95       	ret

0000009e <writeDataTo74HC595>:
#include <stdio.h>

uint8_t relayOn=0;		//0 -> 100		1-> 0.01		2-> 1

//--------------------------LCD-------------------------
void writeDataTo74HC595(uint8_t E,uint8_t RS, uint8_t D4, uint8_t D5, uint8_t D6, uint8_t D7){
      9e:	ef 92       	push	r14
      a0:	0f 93       	push	r16
	for (int i=7;i>=0;i--){
      a2:	e7 e0       	ldi	r30, 0x07	; 7
      a4:	f0 e0       	ldi	r31, 0x00	; 0
		PORTA &= ~0x02;	//Shift clock down
      a6:	d9 98       	cbi	0x1b, 1	; 27
		
		uint8_t bitData=0;
		switch (i){
      a8:	e4 30       	cpi	r30, 0x04	; 4
      aa:	f1 05       	cpc	r31, r1
      ac:	c1 f0       	breq	.+48     	; 0xde <writeDataTo74HC595+0x40>
      ae:	e5 30       	cpi	r30, 0x05	; 5
      b0:	f1 05       	cpc	r31, r1
      b2:	3c f4       	brge	.+14     	; 0xc2 <writeDataTo74HC595+0x24>
      b4:	e1 30       	cpi	r30, 0x01	; 1
      b6:	f1 05       	cpc	r31, r1
      b8:	b1 f0       	breq	.+44     	; 0xe6 <writeDataTo74HC595+0x48>
      ba:	e2 30       	cpi	r30, 0x02	; 2
      bc:	f1 05       	cpc	r31, r1
      be:	d1 f4       	brne	.+52     	; 0xf4 <writeDataTo74HC595+0x56>
      c0:	10 c0       	rjmp	.+32     	; 0xe2 <writeDataTo74HC595+0x44>
      c2:	e6 30       	cpi	r30, 0x06	; 6
      c4:	f1 05       	cpc	r31, r1
      c6:	39 f0       	breq	.+14     	; 0xd6 <writeDataTo74HC595+0x38>
      c8:	e6 30       	cpi	r30, 0x06	; 6
      ca:	f1 05       	cpc	r31, r1
      cc:	34 f0       	brlt	.+12     	; 0xda <writeDataTo74HC595+0x3c>
      ce:	e7 30       	cpi	r30, 0x07	; 7
      d0:	f1 05       	cpc	r31, r1
      d2:	81 f4       	brne	.+32     	; 0xf4 <writeDataTo74HC595+0x56>
      d4:	0a c0       	rjmp	.+20     	; 0xea <writeDataTo74HC595+0x4c>
			case 7:
				bitData=D7; break;
			case 6:
				bitData=D6; break;
      d6:	90 2f       	mov	r25, r16
      d8:	09 c0       	rjmp	.+18     	; 0xec <writeDataTo74HC595+0x4e>
			case 5:
				bitData=D5;	break;
      da:	92 2f       	mov	r25, r18
      dc:	07 c0       	rjmp	.+14     	; 0xec <writeDataTo74HC595+0x4e>
			case 4:
				bitData=D4; break;
      de:	94 2f       	mov	r25, r20
      e0:	05 c0       	rjmp	.+10     	; 0xec <writeDataTo74HC595+0x4e>
			case 2:
				bitData=RS; break;
      e2:	96 2f       	mov	r25, r22
      e4:	03 c0       	rjmp	.+6      	; 0xec <writeDataTo74HC595+0x4e>
			case 1:
				bitData=E; break;
      e6:	98 2f       	mov	r25, r24
      e8:	01 c0       	rjmp	.+2      	; 0xec <writeDataTo74HC595+0x4e>
		PORTA &= ~0x02;	//Shift clock down
		
		uint8_t bitData=0;
		switch (i){
			case 7:
				bitData=D7; break;
      ea:	9e 2d       	mov	r25, r14
			case 2:
				bitData=RS; break;
			case 1:
				bitData=E; break;
		}
		if(bitData)	//set DATA pin
      ec:	99 23       	and	r25, r25
      ee:	11 f0       	breq	.+4      	; 0xf4 <writeDataTo74HC595+0x56>
			PORTA |= 0x08;
      f0:	db 9a       	sbi	0x1b, 3	; 27
      f2:	01 c0       	rjmp	.+2      	; 0xf6 <writeDataTo74HC595+0x58>
		else
			PORTA &= ~0x08;
      f4:	db 98       	cbi	0x1b, 3	; 27
		
		PORTA |= 0x02;	//shift clock up => Shift the register
      f6:	d9 9a       	sbi	0x1b, 1	; 27

uint8_t relayOn=0;		//0 -> 100		1-> 0.01		2-> 1

//--------------------------LCD-------------------------
void writeDataTo74HC595(uint8_t E,uint8_t RS, uint8_t D4, uint8_t D5, uint8_t D6, uint8_t D7){
	for (int i=7;i>=0;i--){
      f8:	31 97       	sbiw	r30, 0x01	; 1
      fa:	9f ef       	ldi	r25, 0xFF	; 255
      fc:	ef 3f       	cpi	r30, 0xFF	; 255
      fe:	f9 07       	cpc	r31, r25
     100:	91 f6       	brne	.-92     	; 0xa6 <writeDataTo74HC595+0x8>
		else
			PORTA &= ~0x08;
		
		PORTA |= 0x02;	//shift clock up => Shift the register
	}
	PORTA &= ~0x02;	//shift clock down
     102:	d9 98       	cbi	0x1b, 1	; 27
	
	PORTA &= ~0x04;	//strobe clock down;
     104:	da 98       	cbi	0x1b, 2	; 27
	PORTA |= 0x04;	//strobe clock up    =>  output data from register on the pins outputs
     106:	da 9a       	sbi	0x1b, 2	; 27
}
     108:	0f 91       	pop	r16
     10a:	ef 90       	pop	r14
     10c:	08 95       	ret

0000010e <writeToLCD_Data>:

void writeToLCD_Data(uint8_t RS, uint8_t D4, uint8_t D5, uint8_t D6, uint8_t D7){
     10e:	df 92       	push	r13
     110:	ef 92       	push	r14
     112:	ff 92       	push	r15
     114:	0f 93       	push	r16
     116:	1f 93       	push	r17
     118:	cf 93       	push	r28
     11a:	df 93       	push	r29
     11c:	d8 2e       	mov	r13, r24
     11e:	f6 2e       	mov	r15, r22
     120:	14 2f       	mov	r17, r20
     122:	d2 2f       	mov	r29, r18
     124:	c0 2f       	mov	r28, r16
	writeDataTo74HC595(1,RS,D4,D5,D6,D7);
     126:	81 e0       	ldi	r24, 0x01	; 1
     128:	6d 2d       	mov	r22, r13
     12a:	4f 2d       	mov	r20, r15
     12c:	21 2f       	mov	r18, r17
     12e:	0d 2f       	mov	r16, r29
     130:	ec 2e       	mov	r14, r28
     132:	0e 94 4f 00 	call	0x9e	; 0x9e <writeDataTo74HC595>
	writeDataTo74HC595(0,RS,D4,D5,D6,D7);
     136:	80 e0       	ldi	r24, 0x00	; 0
     138:	6d 2d       	mov	r22, r13
     13a:	4f 2d       	mov	r20, r15
     13c:	21 2f       	mov	r18, r17
     13e:	0e 94 4f 00 	call	0x9e	; 0x9e <writeDataTo74HC595>
}
     142:	df 91       	pop	r29
     144:	cf 91       	pop	r28
     146:	1f 91       	pop	r17
     148:	0f 91       	pop	r16
     14a:	ff 90       	pop	r15
     14c:	ef 90       	pop	r14
     14e:	df 90       	pop	r13
     150:	08 95       	ret

00000152 <writeToLCD_Letter>:

void writeToLCD_Letter(uint8_t ascii){
     152:	0f 93       	push	r16
     154:	cf 93       	push	r28
     156:	c8 2f       	mov	r28, r24
	writeToLCD_Data(1,ascii&0x10,ascii&0x20,ascii&0x40,ascii&0x80);
     158:	68 2f       	mov	r22, r24
     15a:	60 71       	andi	r22, 0x10	; 16
     15c:	48 2f       	mov	r20, r24
     15e:	40 72       	andi	r20, 0x20	; 32
     160:	28 2f       	mov	r18, r24
     162:	20 74       	andi	r18, 0x40	; 64
     164:	08 2f       	mov	r16, r24
     166:	00 78       	andi	r16, 0x80	; 128
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	0e 94 87 00 	call	0x10e	; 0x10e <writeToLCD_Data>
	writeToLCD_Data(1,ascii&0x01,ascii&0x02,ascii&0x04,ascii&0x08);
     16e:	6c 2f       	mov	r22, r28
     170:	61 70       	andi	r22, 0x01	; 1
     172:	4c 2f       	mov	r20, r28
     174:	42 70       	andi	r20, 0x02	; 2
     176:	2c 2f       	mov	r18, r28
     178:	24 70       	andi	r18, 0x04	; 4
     17a:	0c 2f       	mov	r16, r28
     17c:	08 70       	andi	r16, 0x08	; 8
     17e:	81 e0       	ldi	r24, 0x01	; 1
     180:	0e 94 87 00 	call	0x10e	; 0x10e <writeToLCD_Data>
}
     184:	cf 91       	pop	r28
     186:	0f 91       	pop	r16
     188:	08 95       	ret

0000018a <clearLCD>:

void clearLCD(){
     18a:	0f 93       	push	r16
	writeToLCD_Data(0,0,0,0,0);
     18c:	80 e0       	ldi	r24, 0x00	; 0
     18e:	60 e0       	ldi	r22, 0x00	; 0
     190:	40 e0       	ldi	r20, 0x00	; 0
     192:	20 e0       	ldi	r18, 0x00	; 0
     194:	00 e0       	ldi	r16, 0x00	; 0
     196:	0e 94 87 00 	call	0x10e	; 0x10e <writeToLCD_Data>
	writeToLCD_Data(0,1,0,0,0);
     19a:	80 e0       	ldi	r24, 0x00	; 0
     19c:	61 e0       	ldi	r22, 0x01	; 1
     19e:	40 e0       	ldi	r20, 0x00	; 0
     1a0:	20 e0       	ldi	r18, 0x00	; 0
     1a2:	0e 94 87 00 	call	0x10e	; 0x10e <writeToLCD_Data>
}
     1a6:	0f 91       	pop	r16
     1a8:	08 95       	ret

000001aa <secondLineLCD>:

void secondLineLCD(){
     1aa:	0f 93       	push	r16
	writeToLCD_Data(0,0,0,1,1);
     1ac:	80 e0       	ldi	r24, 0x00	; 0
     1ae:	60 e0       	ldi	r22, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	21 e0       	ldi	r18, 0x01	; 1
     1b4:	01 e0       	ldi	r16, 0x01	; 1
     1b6:	0e 94 87 00 	call	0x10e	; 0x10e <writeToLCD_Data>
	writeToLCD_Data(0,0,0,0,0);
     1ba:	80 e0       	ldi	r24, 0x00	; 0
     1bc:	60 e0       	ldi	r22, 0x00	; 0
     1be:	40 e0       	ldi	r20, 0x00	; 0
     1c0:	20 e0       	ldi	r18, 0x00	; 0
     1c2:	00 e0       	ldi	r16, 0x00	; 0
     1c4:	0e 94 87 00 	call	0x10e	; 0x10e <writeToLCD_Data>
}
     1c8:	0f 91       	pop	r16
     1ca:	08 95       	ret

000001cc <initLCD>:

void initLCD(){
     1cc:	0f 93       	push	r16
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ce:	8f ef       	ldi	r24, 0xFF	; 255
     1d0:	91 ee       	ldi	r25, 0xE1	; 225
     1d2:	a4 e0       	ldi	r26, 0x04	; 4
     1d4:	81 50       	subi	r24, 0x01	; 1
     1d6:	90 40       	sbci	r25, 0x00	; 0
     1d8:	a0 40       	sbci	r26, 0x00	; 0
     1da:	e1 f7       	brne	.-8      	; 0x1d4 <initLCD+0x8>
     1dc:	00 c0       	rjmp	.+0      	; 0x1de <initLCD+0x12>
     1de:	00 00       	nop
	_delay_ms(100);
	
	writeToLCD_Data(0,0,1,0,0);		//set 4-bit mode
     1e0:	80 e0       	ldi	r24, 0x00	; 0
     1e2:	60 e0       	ldi	r22, 0x00	; 0
     1e4:	41 e0       	ldi	r20, 0x01	; 1
     1e6:	20 e0       	ldi	r18, 0x00	; 0
     1e8:	00 e0       	ldi	r16, 0x00	; 0
     1ea:	0e 94 87 00 	call	0x10e	; 0x10e <writeToLCD_Data>
     1ee:	af e1       	ldi	r26, 0x1F	; 31
     1f0:	be e4       	ldi	r27, 0x4E	; 78
     1f2:	11 97       	sbiw	r26, 0x01	; 1
     1f4:	f1 f7       	brne	.-4      	; 0x1f2 <initLCD+0x26>
     1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <initLCD+0x2c>
     1f8:	00 00       	nop
	_delay_ms(5); // czekaj 5ms
	
	writeToLCD_Data(0,0,1,0,0);		//set 4-bit mode
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	60 e0       	ldi	r22, 0x00	; 0
     1fe:	41 e0       	ldi	r20, 0x01	; 1
     200:	20 e0       	ldi	r18, 0x00	; 0
     202:	0e 94 87 00 	call	0x10e	; 0x10e <writeToLCD_Data>
     206:	8f e1       	ldi	r24, 0x1F	; 31
     208:	9e e4       	ldi	r25, 0x4E	; 78
     20a:	01 97       	sbiw	r24, 0x01	; 1
     20c:	f1 f7       	brne	.-4      	; 0x20a <initLCD+0x3e>
     20e:	00 c0       	rjmp	.+0      	; 0x210 <initLCD+0x44>
     210:	00 00       	nop
	_delay_ms(5); // czekaj 5ms
	
	writeToLCD_Data(0,0,0,0,1);		//set number of lines and font character
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	60 e0       	ldi	r22, 0x00	; 0
     216:	40 e0       	ldi	r20, 0x00	; 0
     218:	20 e0       	ldi	r18, 0x00	; 0
     21a:	01 e0       	ldi	r16, 0x01	; 1
     21c:	0e 94 87 00 	call	0x10e	; 0x10e <writeToLCD_Data>
     220:	af e1       	ldi	r26, 0x1F	; 31
     222:	be e4       	ldi	r27, 0x4E	; 78
     224:	11 97       	sbiw	r26, 0x01	; 1
     226:	f1 f7       	brne	.-4      	; 0x224 <initLCD+0x58>
     228:	00 c0       	rjmp	.+0      	; 0x22a <initLCD+0x5e>
     22a:	00 00       	nop
	_delay_ms(5); // czekaj 5ms
	
	writeToLCD_Data(0,0,0,0,0);	//Display on/off control
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	60 e0       	ldi	r22, 0x00	; 0
     230:	40 e0       	ldi	r20, 0x00	; 0
     232:	20 e0       	ldi	r18, 0x00	; 0
     234:	00 e0       	ldi	r16, 0x00	; 0
     236:	0e 94 87 00 	call	0x10e	; 0x10e <writeToLCD_Data>
	writeToLCD_Data(0,0,0,1,1);
     23a:	80 e0       	ldi	r24, 0x00	; 0
     23c:	60 e0       	ldi	r22, 0x00	; 0
     23e:	40 e0       	ldi	r20, 0x00	; 0
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	01 e0       	ldi	r16, 0x01	; 1
     244:	0e 94 87 00 	call	0x10e	; 0x10e <writeToLCD_Data>
	
	clearLCD();
     248:	0e 94 c5 00 	call	0x18a	; 0x18a <clearLCD>
}
     24c:	0f 91       	pop	r16
     24e:	08 95       	ret

00000250 <writeToDAC>:

//-----------------------DAC----------------------------

uint16_t DAC_code = 0;

void writeToDAC(uint8_t DAC, uint16_t value){
     250:	1f 93       	push	r17
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
     256:	eb 01       	movw	r28, r22

	SPI_PORT &= ~(_BV(SPI_CS));
     258:	c4 98       	cbi	0x18, 4	; 24
     25a:	1d 2f       	mov	r17, r29
     25c:	12 95       	swap	r17
     25e:	1f 70       	andi	r17, 0x0F	; 15
	
	uint8_t data1 = 0x00;	//C3=0 C2=0 C1=0 C0=0 Write to Input Register
	uint8_t data2 = (value>>12);
	if (DAC == 0)
     260:	81 11       	cpse	r24, r1
		data2 = data2&0x0F;
	else
		data2 = (data2&0x0F) + 0x30;
     262:	10 5d       	subi	r17, 0xD0	; 208
	uint8_t data3 = value>>4;
	uint8_t data4 = (value&0x0F)<<4;
	
	spi_data_send(data1);
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	0e 94 49 00 	call	0x92	; 0x92 <spi_data_send>
	spi_data_send(data2);
     26a:	81 2f       	mov	r24, r17
     26c:	0e 94 49 00 	call	0x92	; 0x92 <spi_data_send>
	uint8_t data2 = (value>>12);
	if (DAC == 0)
		data2 = data2&0x0F;
	else
		data2 = (data2&0x0F) + 0x30;
	uint8_t data3 = value>>4;
     270:	ce 01       	movw	r24, r28
     272:	24 e0       	ldi	r18, 0x04	; 4
     274:	96 95       	lsr	r25
     276:	87 95       	ror	r24
     278:	2a 95       	dec	r18
     27a:	e1 f7       	brne	.-8      	; 0x274 <writeToDAC+0x24>
	uint8_t data4 = (value&0x0F)<<4;
	
	spi_data_send(data1);
	spi_data_send(data2);
	spi_data_send(data3);
     27c:	0e 94 49 00 	call	0x92	; 0x92 <spi_data_send>
	spi_data_send(data4);
     280:	8c 2f       	mov	r24, r28
     282:	82 95       	swap	r24
     284:	80 7f       	andi	r24, 0xF0	; 240
     286:	0e 94 49 00 	call	0x92	; 0x92 <spi_data_send>
	
	DAC_code=value;
     28a:	d0 93 8e 00 	sts	0x008E, r29
     28e:	c0 93 8d 00 	sts	0x008D, r28
	
	SPI_PORT |= (_BV(SPI_CS));
     292:	c4 9a       	sbi	0x18, 4	; 24
}
     294:	df 91       	pop	r29
     296:	cf 91       	pop	r28
     298:	1f 91       	pop	r17
     29a:	08 95       	ret

0000029c <powerDownDAC>:

void powerDownDAC(uint8_t DAC, uint8_t downUp){
     29c:	0f 93       	push	r16
     29e:	1f 93       	push	r17
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	0f 92       	push	r0
     2a6:	cd b7       	in	r28, 0x3d	; 61
     2a8:	de b7       	in	r29, 0x3e	; 62
	SPI_PORT &= ~(_BV(SPI_CS));
     2aa:	c4 98       	cbi	0x18, 4	; 24
	
	uint8_t data1 = 0x04;	//C3=0 C2=1 C1=0 C0=0 Power-Up/Power-Down Function
	uint8_t data2 = 0x00;
	uint8_t data3 = 0x00;
	if(downUp==0)
     2ac:	66 23       	and	r22, r22
     2ae:	11 f0       	breq	.+4      	; 0x2b4 <powerDownDAC+0x18>
void powerDownDAC(uint8_t DAC, uint8_t downUp){
	SPI_PORT &= ~(_BV(SPI_CS));
	
	uint8_t data1 = 0x04;	//C3=0 C2=1 C1=0 C0=0 Power-Up/Power-Down Function
	uint8_t data2 = 0x00;
	uint8_t data3 = 0x00;
     2b0:	00 e0       	ldi	r16, 0x00	; 0
     2b2:	01 c0       	rjmp	.+2      	; 0x2b6 <powerDownDAC+0x1a>
	if(downUp==0)
		data3 = 0x02;		//100k do GND
     2b4:	02 e0       	ldi	r16, 0x02	; 2
	uint8_t data4 = 0x00;
	if (DAC == 0)
     2b6:	88 23       	and	r24, r24
     2b8:	11 f4       	brne	.+4      	; 0x2be <powerDownDAC+0x22>
	data4 = 0x03;
     2ba:	13 e0       	ldi	r17, 0x03	; 3
     2bc:	01 c0       	rjmp	.+2      	; 0x2c0 <powerDownDAC+0x24>
	else
	data4 = 0x0C;
     2be:	1c e0       	ldi	r17, 0x0C	; 12
	
	spi_data_send(data1);
     2c0:	84 e0       	ldi	r24, 0x04	; 4
     2c2:	69 83       	std	Y+1, r22	; 0x01
     2c4:	0e 94 49 00 	call	0x92	; 0x92 <spi_data_send>
	spi_data_send(data2);
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	0e 94 49 00 	call	0x92	; 0x92 <spi_data_send>
	spi_data_send(data3);
     2ce:	80 2f       	mov	r24, r16
     2d0:	0e 94 49 00 	call	0x92	; 0x92 <spi_data_send>
	spi_data_send(data4);
     2d4:	81 2f       	mov	r24, r17
     2d6:	0e 94 49 00 	call	0x92	; 0x92 <spi_data_send>
	
	if(downUp==0)
     2da:	69 81       	ldd	r22, Y+1	; 0x01
     2dc:	66 23       	and	r22, r22
     2de:	21 f4       	brne	.+8      	; 0x2e8 <powerDownDAC+0x4c>
		DAC_code=0;
     2e0:	10 92 8e 00 	sts	0x008E, r1
     2e4:	10 92 8d 00 	sts	0x008D, r1
	
	SPI_PORT |= (_BV(SPI_CS));
     2e8:	c4 9a       	sbi	0x18, 4	; 24
}
     2ea:	0f 90       	pop	r0
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	1f 91       	pop	r17
     2f2:	0f 91       	pop	r16
     2f4:	08 95       	ret

000002f6 <writeToDAC_withPowerDown>:

void writeToDAC_withPowerDown(uint8_t DAC, uint16_t value){
     2f6:	ff 92       	push	r15
     2f8:	0f 93       	push	r16
     2fa:	1f 93       	push	r17
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	f8 2e       	mov	r15, r24
     302:	8b 01       	movw	r16, r22
     304:	c8 2f       	mov	r28, r24
     306:	d0 e0       	ldi	r29, 0x00	; 0
	static uint8_t prevDAC[2]={0,0};
	if(value==0){
     308:	61 15       	cp	r22, r1
     30a:	71 05       	cpc	r23, r1
     30c:	39 f4       	brne	.+14     	; 0x31c <writeToDAC_withPowerDown+0x26>
		powerDownDAC(DAC,0);		//power off
     30e:	60 e0       	ldi	r22, 0x00	; 0
     310:	0e 94 4e 01 	call	0x29c	; 0x29c <powerDownDAC>
		prevDAC[DAC]=0;
     314:	c0 57       	subi	r28, 0x70	; 112
     316:	df 4f       	sbci	r29, 0xFF	; 255
     318:	18 82       	st	Y, r1
     31a:	0f c0       	rjmp	.+30     	; 0x33a <writeToDAC_withPowerDown+0x44>
	}		
	else{
		if(prevDAC[DAC]==0){
     31c:	c0 57       	subi	r28, 0x70	; 112
     31e:	df 4f       	sbci	r29, 0xFF	; 255
     320:	88 81       	ld	r24, Y
     322:	88 23       	and	r24, r24
     324:	31 f4       	brne	.+12     	; 0x332 <writeToDAC_withPowerDown+0x3c>
			powerDownDAC(DAC,1);	//power on
     326:	8f 2d       	mov	r24, r15
     328:	61 e0       	ldi	r22, 0x01	; 1
     32a:	0e 94 4e 01 	call	0x29c	; 0x29c <powerDownDAC>
			prevDAC[DAC]=1;	
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	88 83       	st	Y, r24
		}
		writeToDAC(DAC,value);
     332:	8f 2d       	mov	r24, r15
     334:	b8 01       	movw	r22, r16
     336:	0e 94 28 01 	call	0x250	; 0x250 <writeToDAC>
	}
}
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	1f 91       	pop	r17
     340:	0f 91       	pop	r16
     342:	ff 90       	pop	r15
     344:	08 95       	ret

00000346 <getDACcode>:

long int getDACcode(double voltage){
     346:	cf 92       	push	r12
     348:	df 92       	push	r13
     34a:	ef 92       	push	r14
     34c:	ff 92       	push	r15
	double multCoefficient=20;
	if(relayOn==1)
     34e:	20 91 8f 00 	lds	r18, 0x008F
     352:	21 30       	cpi	r18, 0x01	; 1
     354:	69 f0       	breq	.+26     	; 0x370 <getDACcode+0x2a>
		multCoefficient=21.5;
	else if(relayOn==2)
     356:	22 30       	cpi	r18, 0x02	; 2
     358:	b1 f0       	breq	.+44     	; 0x386 <getDACcode+0x40>
		writeToDAC(DAC,value);
	}
}

long int getDACcode(double voltage){
	double multCoefficient=20;
     35a:	0f 2e       	mov	r0, r31
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	cf 2e       	mov	r12, r31
     360:	f0 e0       	ldi	r31, 0x00	; 0
     362:	df 2e       	mov	r13, r31
     364:	f0 ea       	ldi	r31, 0xA0	; 160
     366:	ef 2e       	mov	r14, r31
     368:	f1 e4       	ldi	r31, 0x41	; 65
     36a:	ff 2e       	mov	r15, r31
     36c:	f0 2d       	mov	r31, r0
     36e:	15 c0       	rjmp	.+42     	; 0x39a <getDACcode+0x54>
	if(relayOn==1)
		multCoefficient=21.5;
     370:	0f 2e       	mov	r0, r31
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	cf 2e       	mov	r12, r31
     376:	f0 e0       	ldi	r31, 0x00	; 0
     378:	df 2e       	mov	r13, r31
     37a:	fc ea       	ldi	r31, 0xAC	; 172
     37c:	ef 2e       	mov	r14, r31
     37e:	f1 e4       	ldi	r31, 0x41	; 65
     380:	ff 2e       	mov	r15, r31
     382:	f0 2d       	mov	r31, r0
     384:	0a c0       	rjmp	.+20     	; 0x39a <getDACcode+0x54>
	else if(relayOn==2)
		multCoefficient=21.1;
     386:	0f 2e       	mov	r0, r31
     388:	fd ec       	ldi	r31, 0xCD	; 205
     38a:	cf 2e       	mov	r12, r31
     38c:	fc ec       	ldi	r31, 0xCC	; 204
     38e:	df 2e       	mov	r13, r31
     390:	f8 ea       	ldi	r31, 0xA8	; 168
     392:	ef 2e       	mov	r14, r31
     394:	f1 e4       	ldi	r31, 0x41	; 65
     396:	ff 2e       	mov	r15, r31
     398:	f0 2d       	mov	r31, r0
	long int DACvalue = (long int)((double)(multCoefficient*(voltage*65536))/2.5);
     39a:	20 e0       	ldi	r18, 0x00	; 0
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	40 e8       	ldi	r20, 0x80	; 128
     3a0:	57 e4       	ldi	r21, 0x47	; 71
     3a2:	0e 94 b8 13 	call	0x2770	; 0x2770 <__mulsf3>
     3a6:	9b 01       	movw	r18, r22
     3a8:	ac 01       	movw	r20, r24
     3aa:	c7 01       	movw	r24, r14
     3ac:	b6 01       	movw	r22, r12
     3ae:	0e 94 b8 13 	call	0x2770	; 0x2770 <__mulsf3>
     3b2:	20 e0       	ldi	r18, 0x00	; 0
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	40 e2       	ldi	r20, 0x20	; 32
     3b8:	50 e4       	ldi	r21, 0x40	; 64
     3ba:	0e 94 3f 12 	call	0x247e	; 0x247e <__divsf3>
     3be:	0e 94 a7 12 	call	0x254e	; 0x254e <__fixsfsi>
	return DACvalue;
}
     3c2:	ff 90       	pop	r15
     3c4:	ef 90       	pop	r14
     3c6:	df 90       	pop	r13
     3c8:	cf 90       	pop	r12
     3ca:	08 95       	ret

000003cc <readDataFrom74HC165>:
}*/

//----------------------INPUTS--------------------------
uint16_t readDataFrom74HC165(){
	uint16_t data=0;
	PORTD |= 0x20;	//LOAD=1
     3cc:	95 9a       	sbi	0x12, 5	; 18
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	90 e0       	ldi	r25, 0x00	; 0
	}
}*/

//----------------------INPUTS--------------------------
uint16_t readDataFrom74HC165(){
	uint16_t data=0;
     3d2:	40 e0       	ldi	r20, 0x00	; 0
     3d4:	50 e0       	ldi	r21, 0x00	; 0
	PORTD |= 0x20;	//LOAD=1
	
	for(uint8_t i=0;i<16;i++){
		PORTD &= ~0x10;		//CLK low
		if (!(PIND&0x08))	//DATA = 0 button is pressed
			data+=(1<<i);
     3d6:	61 e0       	ldi	r22, 0x01	; 1
     3d8:	70 e0       	ldi	r23, 0x00	; 0
uint16_t readDataFrom74HC165(){
	uint16_t data=0;
	PORTD |= 0x20;	//LOAD=1
	
	for(uint8_t i=0;i<16;i++){
		PORTD &= ~0x10;		//CLK low
     3da:	94 98       	cbi	0x12, 4	; 18
		if (!(PIND&0x08))	//DATA = 0 button is pressed
     3dc:	83 99       	sbic	0x10, 3	; 16
     3de:	09 c0       	rjmp	.+18     	; 0x3f2 <readDataFrom74HC165+0x26>
			data+=(1<<i);
     3e0:	9b 01       	movw	r18, r22
     3e2:	08 2e       	mov	r0, r24
     3e4:	02 c0       	rjmp	.+4      	; 0x3ea <readDataFrom74HC165+0x1e>
     3e6:	22 0f       	add	r18, r18
     3e8:	33 1f       	adc	r19, r19
     3ea:	0a 94       	dec	r0
     3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <readDataFrom74HC165+0x1a>
     3ee:	42 0f       	add	r20, r18
     3f0:	53 1f       	adc	r21, r19
		
		PORTD |= 0x10;		//CLK high
     3f2:	94 9a       	sbi	0x12, 4	; 18
     3f4:	01 96       	adiw	r24, 0x01	; 1
//----------------------INPUTS--------------------------
uint16_t readDataFrom74HC165(){
	uint16_t data=0;
	PORTD |= 0x20;	//LOAD=1
	
	for(uint8_t i=0;i<16;i++){
     3f6:	80 31       	cpi	r24, 0x10	; 16
     3f8:	91 05       	cpc	r25, r1
     3fa:	79 f7       	brne	.-34     	; 0x3da <readDataFrom74HC165+0xe>
		if (!(PIND&0x08))	//DATA = 0 button is pressed
			data+=(1<<i);
		
		PORTD |= 0x10;		//CLK high
	}
	PORTD &= ~0x20;	//LOAD=0
     3fc:	95 98       	cbi	0x12, 5	; 18
	return data;
}
     3fe:	ca 01       	movw	r24, r20
     400:	08 95       	ret

00000402 <writeDataTo74HC4094>:

void writeDataTo74HC4094(uint8_t data){
	for (int i=7;i>=0;i--){
     402:	27 e0       	ldi	r18, 0x07	; 7
     404:	30 e0       	ldi	r19, 0x00	; 0
		PORTD |= 0x40;	//CLK up
		
		if(data & (1<<i))	//set DATA pin
     406:	90 e0       	ldi	r25, 0x00	; 0
	return data;
}

void writeDataTo74HC4094(uint8_t data){
	for (int i=7;i>=0;i--){
		PORTD |= 0x40;	//CLK up
     408:	96 9a       	sbi	0x12, 6	; 18
		
		if(data & (1<<i))	//set DATA pin
     40a:	ac 01       	movw	r20, r24
     40c:	02 2e       	mov	r0, r18
     40e:	02 c0       	rjmp	.+4      	; 0x414 <writeDataTo74HC4094+0x12>
     410:	55 95       	asr	r21
     412:	47 95       	ror	r20
     414:	0a 94       	dec	r0
     416:	e2 f7       	brpl	.-8      	; 0x410 <writeDataTo74HC4094+0xe>
     418:	40 ff       	sbrs	r20, 0
     41a:	02 c0       	rjmp	.+4      	; 0x420 <writeDataTo74HC4094+0x1e>
			PORTD |= 0x80;
     41c:	97 9a       	sbi	0x12, 7	; 18
     41e:	01 c0       	rjmp	.+2      	; 0x422 <writeDataTo74HC4094+0x20>
		else
			PORTD &= ~0x80;
     420:	97 98       	cbi	0x12, 7	; 18
		
		PORTD &= ~0x40;	//CLK down
     422:	96 98       	cbi	0x12, 6	; 18
	PORTD &= ~0x20;	//LOAD=0
	return data;
}

void writeDataTo74HC4094(uint8_t data){
	for (int i=7;i>=0;i--){
     424:	21 50       	subi	r18, 0x01	; 1
     426:	30 40       	sbci	r19, 0x00	; 0
     428:	4f ef       	ldi	r20, 0xFF	; 255
     42a:	2f 3f       	cpi	r18, 0xFF	; 255
     42c:	34 07       	cpc	r19, r20
     42e:	61 f7       	brne	.-40     	; 0x408 <writeDataTo74HC4094+0x6>
		else
			PORTD &= ~0x80;
		
		PORTD &= ~0x40;	//CLK down
	}
	PORTD |= 0x40;	//CLK up
     430:	96 9a       	sbi	0x12, 6	; 18
}
     432:	08 95       	ret

00000434 <delay>:
void delay(){
	uint8_t y=2;
	for (uint8_t i=0; i<1;i++){
		y++;
	}
}
     434:	08 95       	ret

00000436 <writeToADC>:

void writeToADC(unsigned long int data){
     436:	0f 93       	push	r16
     438:	1f 93       	push	r17
     43a:	ab 01       	movw	r20, r22
     43c:	bc 01       	movw	r22, r24

	DDR_ADC |= SDA_ADC;			//data output
     43e:	a1 9a       	sbi	0x14, 1	; 20
	PORT_ADC|= SDA_ADC;
     440:	a9 9a       	sbi	0x15, 1	; 21
	delay();
	PORT_ADC &= ~SCL_ADC;		//clock up
     442:	a8 98       	cbi	0x15, 0	; 21
	delay();
	PORT_ADC &= ~A0_ADC;
     444:	ad 98       	cbi	0x15, 5	; 21
	delay();
	PORT_ADC &= ~TFS_ADC;
     446:	ac 98       	cbi	0x15, 4	; 21
     448:	87 e1       	ldi	r24, 0x17	; 23
     44a:	90 e0       	ldi	r25, 0x00	; 0
	delay();
	
	for (uint8_t i=24;i>0;i--){
		PORT_ADC &= ~SCL_ADC;		//clock down
     44c:	a8 98       	cbi	0x15, 0	; 21
		delay();
		
		if(((data>>(i-1)))&0x00001){
     44e:	8a 01       	movw	r16, r20
     450:	9b 01       	movw	r18, r22
     452:	08 2e       	mov	r0, r24
     454:	04 c0       	rjmp	.+8      	; 0x45e <writeToADC+0x28>
     456:	36 95       	lsr	r19
     458:	27 95       	ror	r18
     45a:	17 95       	ror	r17
     45c:	07 95       	ror	r16
     45e:	0a 94       	dec	r0
     460:	d2 f7       	brpl	.-12     	; 0x456 <writeToADC+0x20>
     462:	98 01       	movw	r18, r16
     464:	21 70       	andi	r18, 0x01	; 1
     466:	30 70       	andi	r19, 0x00	; 0
     468:	21 15       	cp	r18, r1
     46a:	31 05       	cpc	r19, r1
     46c:	11 f0       	breq	.+4      	; 0x472 <writeToADC+0x3c>
			PORT_ADC |= SDA_ADC;	
     46e:	a9 9a       	sbi	0x15, 1	; 21
     470:	01 c0       	rjmp	.+2      	; 0x474 <writeToADC+0x3e>
			//uart_putc('1');
		}			
		else {
			PORT_ADC &= ~SDA_ADC;	
     472:	a9 98       	cbi	0x15, 1	; 21
			//uart_putc('0');
		}			
		
		PORT_ADC |= SCL_ADC;		//clock up
     474:	a8 9a       	sbi	0x15, 0	; 21
     476:	01 97       	sbiw	r24, 0x01	; 1
	PORT_ADC &= ~A0_ADC;
	delay();
	PORT_ADC &= ~TFS_ADC;
	delay();
	
	for (uint8_t i=24;i>0;i--){
     478:	2f ef       	ldi	r18, 0xFF	; 255
     47a:	8f 3f       	cpi	r24, 0xFF	; 255
     47c:	92 07       	cpc	r25, r18
     47e:	31 f7       	brne	.-52     	; 0x44c <writeToADC+0x16>
		
		PORT_ADC |= SCL_ADC;		//clock up
		delay();
	}
	
	PORT_ADC &= ~SCL_ADC;
     480:	a8 98       	cbi	0x15, 0	; 21
	
	delay();
	PORT_ADC |= TFS_ADC;
     482:	ac 9a       	sbi	0x15, 4	; 21
	
	delay();
	PORT_ADC |= A0_ADC;
     484:	ad 9a       	sbi	0x15, 5	; 21
	
	delay();
	DDR_ADC &= ~SDA_ADC;			//data input
     486:	a1 98       	cbi	0x14, 1	; 20
}
     488:	1f 91       	pop	r17
     48a:	0f 91       	pop	r16
     48c:	08 95       	ret

0000048e <readFromADC>:

uint32_t readFromADC(uint8_t reg){
     48e:	0f 93       	push	r16
     490:	1f 93       	push	r17
	uint32_t result=0;
	
	PORT_ADC |= SCL_ADC;		//clock up
     492:	a8 9a       	sbi	0x15, 0	; 21
	
	if((!(PIN_ADC&DRDY_ADC)) || reg==CONT_REG)	{	//DRDY pull low
     494:	9a 9b       	sbis	0x13, 2	; 19
     496:	06 c0       	rjmp	.+12     	; 0x4a4 <readFromADC+0x16>
     498:	81 30       	cpi	r24, 0x01	; 1
     49a:	31 f0       	breq	.+12     	; 0x4a8 <readFromADC+0x1a>
		
		delay();
		PORT_ADC |= A0_ADC;
	}
	else
		result=0xFFFFFFFF;
     49c:	0f ef       	ldi	r16, 0xFF	; 255
     49e:	1f ef       	ldi	r17, 0xFF	; 255
     4a0:	98 01       	movw	r18, r16
     4a2:	25 c0       	rjmp	.+74     	; 0x4ee <readFromADC+0x60>
	
	PORT_ADC |= SCL_ADC;		//clock up
	
	if((!(PIN_ADC&DRDY_ADC)) || reg==CONT_REG)	{	//DRDY pull low
		delay();
		if(reg==CONT_REG){
     4a4:	81 30       	cpi	r24, 0x01	; 1
     4a6:	09 f4       	brne	.+2      	; 0x4aa <readFromADC+0x1c>
			PORT_ADC &= ~A0_ADC;
     4a8:	ad 98       	cbi	0x15, 5	; 21
			delay();
		}			
		PORT_ADC &= ~RFS_ADC;
     4aa:	ab 98       	cbi	0x15, 3	; 21
     4ac:	40 e0       	ldi	r20, 0x00	; 0
     4ae:	50 e0       	ldi	r21, 0x00	; 0
	delay();
	DDR_ADC &= ~SDA_ADC;			//data input
}

uint32_t readFromADC(uint8_t reg){
	uint32_t result=0;
     4b0:	00 e0       	ldi	r16, 0x00	; 0
     4b2:	10 e0       	ldi	r17, 0x00	; 0
     4b4:	98 01       	movw	r18, r16
		
		for (uint8_t i=0;i<24;i++){
			PORT_ADC &= ~SCL_ADC;		//clock down
			delay();
			if (PIN_ADC&SDA_ADC)		//read data
				result += (1<<i);
     4b6:	61 e0       	ldi	r22, 0x01	; 1
     4b8:	70 e0       	ldi	r23, 0x00	; 0
		}			
		PORT_ADC &= ~RFS_ADC;
		delay();
		
		for (uint8_t i=0;i<24;i++){
			PORT_ADC &= ~SCL_ADC;		//clock down
     4ba:	a8 98       	cbi	0x15, 0	; 21
			delay();
			if (PIN_ADC&SDA_ADC)		//read data
     4bc:	99 9b       	sbis	0x13, 1	; 19
     4be:	0f c0       	rjmp	.+30     	; 0x4de <readFromADC+0x50>
				result += (1<<i);
     4c0:	cb 01       	movw	r24, r22
     4c2:	04 2e       	mov	r0, r20
     4c4:	02 c0       	rjmp	.+4      	; 0x4ca <readFromADC+0x3c>
     4c6:	88 0f       	add	r24, r24
     4c8:	99 1f       	adc	r25, r25
     4ca:	0a 94       	dec	r0
     4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <readFromADC+0x38>
     4ce:	aa 27       	eor	r26, r26
     4d0:	97 fd       	sbrc	r25, 7
     4d2:	a0 95       	com	r26
     4d4:	ba 2f       	mov	r27, r26
     4d6:	08 0f       	add	r16, r24
     4d8:	19 1f       	adc	r17, r25
     4da:	2a 1f       	adc	r18, r26
     4dc:	3b 1f       	adc	r19, r27
			PORT_ADC |= SCL_ADC;		//clock up
     4de:	a8 9a       	sbi	0x15, 0	; 21
     4e0:	4f 5f       	subi	r20, 0xFF	; 255
     4e2:	5f 4f       	sbci	r21, 0xFF	; 255
			delay();
		}			
		PORT_ADC &= ~RFS_ADC;
		delay();
		
		for (uint8_t i=0;i<24;i++){
     4e4:	48 31       	cpi	r20, 0x18	; 24
     4e6:	51 05       	cpc	r21, r1
     4e8:	41 f7       	brne	.-48     	; 0x4ba <readFromADC+0x2c>
			PORT_ADC |= SCL_ADC;		//clock up
			delay();
		}
		
		delay();
		PORT_ADC |= RFS_ADC;
     4ea:	ab 9a       	sbi	0x15, 3	; 21
		
		delay();
		PORT_ADC |= A0_ADC;
     4ec:	ad 9a       	sbi	0x15, 5	; 21
	}
	else
		result=0xFFFFFFFF;
	
	return result;
}
     4ee:	b8 01       	movw	r22, r16
     4f0:	c9 01       	movw	r24, r18
     4f2:	1f 91       	pop	r17
     4f4:	0f 91       	pop	r16
     4f6:	08 95       	ret

000004f8 <init>:

void init(){
	//------------------------LCD----------------------
	DDRA |= 0x0E;			//PA7 - PA5 as outputs
     4f8:	8a b3       	in	r24, 0x1a	; 26
     4fa:	8e 60       	ori	r24, 0x0E	; 14
     4fc:	8a bb       	out	0x1a, r24	; 26
	PORTA &= ~0x0E;			//PA7 - PA5 set to low
     4fe:	8b b3       	in	r24, 0x1b	; 27
     500:	81 7f       	andi	r24, 0xF1	; 241
     502:	8b bb       	out	0x1b, r24	; 27
#define SPI_MOSI	PB5
#define SPI_CS		PB4

static inline void spi_init()
{
	SPI_DIR |= (_BV(SPI_CS) | _BV(SPI_SCK) | _BV(SPI_MOSI));
     504:	87 b3       	in	r24, 0x17	; 23
     506:	80 6b       	ori	r24, 0xB0	; 176
     508:	87 bb       	out	0x17, r24	; 23
	SPI_DIR &= ~_BV(SPI_MISO);
     50a:	be 98       	cbi	0x17, 6	; 23
	SPCR |= (1<<MSTR);               // Set as Master
     50c:	6c 9a       	sbi	0x0d, 4	; 13
	SPCR |= (1<<SPR0);//|(1<<SPR1);  // divided clock by 128
     50e:	68 9a       	sbi	0x0d, 0	; 13
	SPCR |= (1<<SPE);                // Enable SPI
     510:	6e 9a       	sbi	0x0d, 6	; 13
	
	//------------------------SPI----------------------
	spi_init();
	
	//----------------------74HC165--------------------
	DDRD &= ~0x08;	//Data out from inputs
     512:	8b 98       	cbi	0x11, 3	; 17
	DDRD |=  0x30;	//CLK & Load outputs
     514:	81 b3       	in	r24, 0x11	; 17
     516:	80 63       	ori	r24, 0x30	; 48
     518:	81 bb       	out	0x11, r24	; 17
	PORTD |= 0x10;  //CLK high
     51a:	94 9a       	sbi	0x12, 4	; 18
	
	//---------------------74HC4094---------------------
	DDRD |= 0xC0;	//DATA & CLK as output
     51c:	81 b3       	in	r24, 0x11	; 17
     51e:	80 6c       	ori	r24, 0xC0	; 192
     520:	81 bb       	out	0x11, r24	; 17
	PORTD|= 0xC0;	//DATA & CLK high
     522:	82 b3       	in	r24, 0x12	; 18
     524:	80 6c       	ori	r24, 0xC0	; 192
     526:	82 bb       	out	0x12, r24	; 18
	
	//------------------------ADC-----------------------
	DDR_ADC  |= (SCL_ADC+RFS_ADC+TFS_ADC+A0_ADC);			//output
     528:	84 b3       	in	r24, 0x14	; 20
     52a:	89 63       	ori	r24, 0x39	; 57
     52c:	84 bb       	out	0x14, r24	; 20
	PORT_ADC |= (SCL_ADC+RFS_ADC+TFS_ADC+A0_ADC);			//RFS & TFS & A0 high
     52e:	85 b3       	in	r24, 0x15	; 21
     530:	89 63       	ori	r24, 0x39	; 57
     532:	85 bb       	out	0x15, r24	; 21
	//PORT_ADC |= DRDY_ADC;									//DRDY pull up
	
	//-----------------------Relays---------------------
	DDRB |= 0x03;	//output PB0 & PB1
     534:	87 b3       	in	r24, 0x17	; 23
     536:	83 60       	ori	r24, 0x03	; 3
     538:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~0x03;	//PB0 & PB1 = 0
     53a:	88 b3       	in	r24, 0x18	; 24
     53c:	8c 7f       	andi	r24, 0xFC	; 252
     53e:	88 bb       	out	0x18, r24	; 24
	
	//-----------------------RS-232---------------------
	//uart_init(UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));
	sei();
     540:	78 94       	sei
	
	initLCD();
     542:	0e 94 e6 00 	call	0x1cc	; 0x1cc <initLCD>
	
}
     546:	08 95       	ret

00000548 <reverse>:

unsigned char reverse(unsigned char b) {
	b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
     548:	82 95       	swap	r24
	b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	9c 01       	movw	r18, r24
     54e:	23 73       	andi	r18, 0x33	; 51
     550:	30 70       	andi	r19, 0x00	; 0
     552:	22 0f       	add	r18, r18
     554:	33 1f       	adc	r19, r19
     556:	22 0f       	add	r18, r18
     558:	33 1f       	adc	r19, r19
     55a:	8c 7c       	andi	r24, 0xCC	; 204
     55c:	90 70       	andi	r25, 0x00	; 0
     55e:	95 95       	asr	r25
     560:	87 95       	ror	r24
     562:	95 95       	asr	r25
     564:	87 95       	ror	r24
     566:	28 2b       	or	r18, r24
	b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	c9 01       	movw	r24, r18
     56c:	85 75       	andi	r24, 0x55	; 85
     56e:	90 70       	andi	r25, 0x00	; 0
     570:	88 0f       	add	r24, r24
     572:	99 1f       	adc	r25, r25
     574:	2a 7a       	andi	r18, 0xAA	; 170
     576:	30 70       	andi	r19, 0x00	; 0
     578:	35 95       	asr	r19
     57a:	27 95       	ror	r18
	return b;
}
     57c:	82 2b       	or	r24, r18
     57e:	08 95       	ret

00000580 <device_current>:

long int device_current(long int ADC1){
     580:	0f 93       	push	r16
     582:	1f 93       	push	r17
	switch (relayOn){
     584:	20 91 8f 00 	lds	r18, 0x008F
     588:	21 30       	cpi	r18, 0x01	; 1
     58a:	51 f0       	breq	.+20     	; 0x5a0 <device_current+0x20>
     58c:	21 30       	cpi	r18, 0x01	; 1
     58e:	18 f0       	brcs	.+6      	; 0x596 <device_current+0x16>
     590:	22 30       	cpi	r18, 0x02	; 2
     592:	d1 f4       	brne	.+52     	; 0x5c8 <device_current+0x48>
     594:	0c c0       	rjmp	.+24     	; 0x5ae <device_current+0x2e>
		case 0:
			return (ADC1/5050);
     596:	2a eb       	ldi	r18, 0xBA	; 186
     598:	33 e1       	ldi	r19, 0x13	; 19
     59a:	40 e0       	ldi	r20, 0x00	; 0
     59c:	50 e0       	ldi	r21, 0x00	; 0
     59e:	0f c0       	rjmp	.+30     	; 0x5be <device_current+0x3e>
			break;
		case 1:
			return (ADC1*200/101);
     5a0:	28 ec       	ldi	r18, 0xC8	; 200
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	40 e0       	ldi	r20, 0x00	; 0
     5a6:	50 e0       	ldi	r21, 0x00	; 0
     5a8:	0e 94 1b 14 	call	0x2836	; 0x2836 <__mulsi3>
     5ac:	04 c0       	rjmp	.+8      	; 0x5b6 <device_current+0x36>
			break;
		case 2:
			return (ADC1*2/101);
     5ae:	66 0f       	add	r22, r22
     5b0:	77 1f       	adc	r23, r23
     5b2:	88 1f       	adc	r24, r24
     5b4:	99 1f       	adc	r25, r25
     5b6:	25 e6       	ldi	r18, 0x65	; 101
     5b8:	30 e0       	ldi	r19, 0x00	; 0
     5ba:	40 e0       	ldi	r20, 0x00	; 0
     5bc:	50 e0       	ldi	r21, 0x00	; 0
     5be:	0e 94 4e 14 	call	0x289c	; 0x289c <__divmodsi4>
     5c2:	89 01       	movw	r16, r18
     5c4:	9a 01       	movw	r18, r20
     5c6:	03 c0       	rjmp	.+6      	; 0x5ce <device_current+0x4e>
		break;
	}
	return 0;
     5c8:	00 e0       	ldi	r16, 0x00	; 0
     5ca:	10 e0       	ldi	r17, 0x00	; 0
     5cc:	98 01       	movw	r18, r16
}
     5ce:	b8 01       	movw	r22, r16
     5d0:	c9 01       	movw	r24, r18
     5d2:	1f 91       	pop	r17
     5d4:	0f 91       	pop	r16
     5d6:	08 95       	ret

000005d8 <constantCurrentMode>:

uint8_t newADC1=0;

void constantCurrentMode(long int setCurrent_uA,long int ADC1_Voltage){
     5d8:	cf 92       	push	r12
     5da:	df 92       	push	r13
     5dc:	ef 92       	push	r14
     5de:	ff 92       	push	r15
     5e0:	6b 01       	movw	r12, r22
     5e2:	7c 01       	movw	r14, r24
     5e4:	80 91 92 00 	lds	r24, 0x0092
     5e8:	90 91 93 00 	lds	r25, 0x0093
     5ec:	a0 91 94 00 	lds	r26, 0x0094
     5f0:	b0 91 95 00 	lds	r27, 0x0095
	static long int prevCurrent_uA=0;
	static long int DACvalue=0;
	long int DACvalue_buff = 0;
	if(setCurrent_uA>=30000){
     5f4:	20 e3       	ldi	r18, 0x30	; 48
     5f6:	c2 16       	cp	r12, r18
     5f8:	25 e7       	ldi	r18, 0x75	; 117
     5fa:	d2 06       	cpc	r13, r18
     5fc:	20 e0       	ldi	r18, 0x00	; 0
     5fe:	e2 06       	cpc	r14, r18
     600:	20 e0       	ldi	r18, 0x00	; 0
     602:	f2 06       	cpc	r15, r18
     604:	04 f1       	brlt	.+64     	; 0x646 <constantCurrentMode+0x6e>
		if(prevCurrent_uA<30000 || relayOn!=1){
     606:	80 33       	cpi	r24, 0x30	; 48
     608:	25 e7       	ldi	r18, 0x75	; 117
     60a:	92 07       	cpc	r25, r18
     60c:	20 e0       	ldi	r18, 0x00	; 0
     60e:	a2 07       	cpc	r26, r18
     610:	20 e0       	ldi	r18, 0x00	; 0
     612:	b2 07       	cpc	r27, r18
     614:	24 f0       	brlt	.+8      	; 0x61e <constantCurrentMode+0x46>
     616:	80 91 8f 00 	lds	r24, 0x008F
     61a:	81 30       	cpi	r24, 0x01	; 1
     61c:	29 f0       	breq	.+10     	; 0x628 <constantCurrentMode+0x50>
			PORTB |=  0x01;
     61e:	c0 9a       	sbi	0x18, 0	; 24
			PORTB &= ~0x02;
     620:	c1 98       	cbi	0x18, 1	; 24
			relayOn=1;
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	80 93 8f 00 	sts	0x008F, r24
		}			
		DACvalue_buff = getDACcode((double)(((double)setCurrent_uA/1e6)/100));	//U=I*R R=0.01 => U=I/100		*20
     628:	c7 01       	movw	r24, r14
     62a:	b6 01       	movw	r22, r12
     62c:	0e 94 de 12 	call	0x25bc	; 0x25bc <__floatsisf>
     630:	20 e0       	ldi	r18, 0x00	; 0
     632:	34 e2       	ldi	r19, 0x24	; 36
     634:	44 e7       	ldi	r20, 0x74	; 116
     636:	59 e4       	ldi	r21, 0x49	; 73
     638:	0e 94 3f 12 	call	0x247e	; 0x247e <__divsf3>
     63c:	20 e0       	ldi	r18, 0x00	; 0
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	48 ec       	ldi	r20, 0xC8	; 200
     642:	52 e4       	ldi	r21, 0x42	; 66
     644:	19 c0       	rjmp	.+50     	; 0x678 <constantCurrentMode+0xa0>
	}
	else if(setCurrent_uA<30000){
		if(prevCurrent_uA>=30000 || relayOn!=2){
     646:	80 33       	cpi	r24, 0x30	; 48
     648:	25 e7       	ldi	r18, 0x75	; 117
     64a:	92 07       	cpc	r25, r18
     64c:	20 e0       	ldi	r18, 0x00	; 0
     64e:	a2 07       	cpc	r26, r18
     650:	20 e0       	ldi	r18, 0x00	; 0
     652:	b2 07       	cpc	r27, r18
     654:	24 f4       	brge	.+8      	; 0x65e <constantCurrentMode+0x86>
     656:	80 91 8f 00 	lds	r24, 0x008F
     65a:	82 30       	cpi	r24, 0x02	; 2
     65c:	29 f0       	breq	.+10     	; 0x668 <constantCurrentMode+0x90>
			PORTB &= ~0x01;
     65e:	c0 98       	cbi	0x18, 0	; 24
			PORTB |=  0x02;
     660:	c1 9a       	sbi	0x18, 1	; 24
			relayOn=2;
     662:	82 e0       	ldi	r24, 0x02	; 2
     664:	80 93 8f 00 	sts	0x008F, r24
		}
		DACvalue_buff = getDACcode((double)(((double)setCurrent_uA/1e6)));
     668:	c7 01       	movw	r24, r14
     66a:	b6 01       	movw	r22, r12
     66c:	0e 94 de 12 	call	0x25bc	; 0x25bc <__floatsisf>
     670:	20 e0       	ldi	r18, 0x00	; 0
     672:	34 e2       	ldi	r19, 0x24	; 36
     674:	44 e7       	ldi	r20, 0x74	; 116
     676:	59 e4       	ldi	r21, 0x49	; 73
     678:	0e 94 3f 12 	call	0x247e	; 0x247e <__divsf3>
     67c:	0e 94 a3 01 	call	0x346	; 0x346 <getDACcode>
     680:	ab 01       	movw	r20, r22
     682:	bc 01       	movw	r22, r24
	}
	if(DACvalue_buff!=DACvalue){
     684:	80 91 96 00 	lds	r24, 0x0096
     688:	90 91 97 00 	lds	r25, 0x0097
     68c:	a0 91 98 00 	lds	r26, 0x0098
     690:	b0 91 99 00 	lds	r27, 0x0099
     694:	48 17       	cp	r20, r24
     696:	59 07       	cpc	r21, r25
     698:	6a 07       	cpc	r22, r26
     69a:	7b 07       	cpc	r23, r27
     69c:	a1 f0       	breq	.+40     	; 0x6c6 <constantCurrentMode+0xee>
		prevCurrent_uA=setCurrent_uA;
     69e:	c0 92 92 00 	sts	0x0092, r12
     6a2:	d0 92 93 00 	sts	0x0093, r13
     6a6:	e0 92 94 00 	sts	0x0094, r14
     6aa:	f0 92 95 00 	sts	0x0095, r15
		DACvalue=DACvalue_buff;
     6ae:	40 93 96 00 	sts	0x0096, r20
     6b2:	50 93 97 00 	sts	0x0097, r21
     6b6:	60 93 98 00 	sts	0x0098, r22
     6ba:	70 93 99 00 	sts	0x0099, r23
		writeToDAC_withPowerDown(1,DACvalue);
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	ba 01       	movw	r22, r20
     6c2:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <writeToDAC_withPowerDown>
				newADC1=0;
				writeToDAC_withPowerDown(1,DAC_code);
			}				
		}
	}*/
}
     6c6:	ff 90       	pop	r15
     6c8:	ef 90       	pop	r14
     6ca:	df 90       	pop	r13
     6cc:	cf 90       	pop	r12
     6ce:	08 95       	ret

000006d0 <constantPowerMode>:

void constantPowerMode(long int setPower_uW, long int ADC1_Voltage, long int ADC2_Voltage){
     6d0:	4f 92       	push	r4
     6d2:	5f 92       	push	r5
     6d4:	6f 92       	push	r6
     6d6:	7f 92       	push	r7
     6d8:	8f 92       	push	r8
     6da:	9f 92       	push	r9
     6dc:	af 92       	push	r10
     6de:	bf 92       	push	r11
     6e0:	ef 92       	push	r14
     6e2:	ff 92       	push	r15
     6e4:	0f 93       	push	r16
     6e6:	1f 93       	push	r17
     6e8:	29 01       	movw	r4, r18
     6ea:	3a 01       	movw	r6, r20
	constantCurrentMode((long int)(((double)setPower_uW/(double)ADC2_Voltage)*1000000),ADC1_Voltage);
     6ec:	0e 94 de 12 	call	0x25bc	; 0x25bc <__floatsisf>
     6f0:	4b 01       	movw	r8, r22
     6f2:	5c 01       	movw	r10, r24
     6f4:	c8 01       	movw	r24, r16
     6f6:	b7 01       	movw	r22, r14
     6f8:	0e 94 de 12 	call	0x25bc	; 0x25bc <__floatsisf>
     6fc:	9b 01       	movw	r18, r22
     6fe:	ac 01       	movw	r20, r24
     700:	c5 01       	movw	r24, r10
     702:	b4 01       	movw	r22, r8
     704:	0e 94 3f 12 	call	0x247e	; 0x247e <__divsf3>
     708:	20 e0       	ldi	r18, 0x00	; 0
     70a:	34 e2       	ldi	r19, 0x24	; 36
     70c:	44 e7       	ldi	r20, 0x74	; 116
     70e:	59 e4       	ldi	r21, 0x49	; 73
     710:	0e 94 b8 13 	call	0x2770	; 0x2770 <__mulsf3>
     714:	0e 94 a7 12 	call	0x254e	; 0x254e <__fixsfsi>
     718:	a3 01       	movw	r20, r6
     71a:	92 01       	movw	r18, r4
     71c:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <constantCurrentMode>
}
     720:	1f 91       	pop	r17
     722:	0f 91       	pop	r16
     724:	ff 90       	pop	r15
     726:	ef 90       	pop	r14
     728:	bf 90       	pop	r11
     72a:	af 90       	pop	r10
     72c:	9f 90       	pop	r9
     72e:	8f 90       	pop	r8
     730:	7f 90       	pop	r7
     732:	6f 90       	pop	r6
     734:	5f 90       	pop	r5
     736:	4f 90       	pop	r4
     738:	08 95       	ret

0000073a <constantResistanceMode>:

void constantResistanceMode(long int setResistance_mOhm, long int ADC1_Voltage, long int ADC2_Voltage){
     73a:	4f 92       	push	r4
     73c:	5f 92       	push	r5
     73e:	6f 92       	push	r6
     740:	7f 92       	push	r7
     742:	8f 92       	push	r8
     744:	9f 92       	push	r9
     746:	af 92       	push	r10
     748:	bf 92       	push	r11
     74a:	cf 92       	push	r12
     74c:	df 92       	push	r13
     74e:	ef 92       	push	r14
     750:	ff 92       	push	r15
     752:	0f 93       	push	r16
     754:	1f 93       	push	r17
     756:	4b 01       	movw	r8, r22
     758:	5c 01       	movw	r10, r24
     75a:	29 01       	movw	r4, r18
     75c:	3a 01       	movw	r6, r20
     75e:	c8 01       	movw	r24, r16
     760:	b7 01       	movw	r22, r14
	constantCurrentMode((long int)((double)ADC2_Voltage/((double)setResistance_mOhm*1000)*1000000),ADC1_Voltage);
     762:	0e 94 de 12 	call	0x25bc	; 0x25bc <__floatsisf>
     766:	6b 01       	movw	r12, r22
     768:	7c 01       	movw	r14, r24
     76a:	c5 01       	movw	r24, r10
     76c:	b4 01       	movw	r22, r8
     76e:	0e 94 de 12 	call	0x25bc	; 0x25bc <__floatsisf>
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	4a e7       	ldi	r20, 0x7A	; 122
     778:	54 e4       	ldi	r21, 0x44	; 68
     77a:	0e 94 b8 13 	call	0x2770	; 0x2770 <__mulsf3>
     77e:	9b 01       	movw	r18, r22
     780:	ac 01       	movw	r20, r24
     782:	c7 01       	movw	r24, r14
     784:	b6 01       	movw	r22, r12
     786:	0e 94 3f 12 	call	0x247e	; 0x247e <__divsf3>
     78a:	20 e0       	ldi	r18, 0x00	; 0
     78c:	34 e2       	ldi	r19, 0x24	; 36
     78e:	44 e7       	ldi	r20, 0x74	; 116
     790:	59 e4       	ldi	r21, 0x49	; 73
     792:	0e 94 b8 13 	call	0x2770	; 0x2770 <__mulsf3>
     796:	0e 94 a7 12 	call	0x254e	; 0x254e <__fixsfsi>
     79a:	a3 01       	movw	r20, r6
     79c:	92 01       	movw	r18, r4
     79e:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <constantCurrentMode>
}
     7a2:	1f 91       	pop	r17
     7a4:	0f 91       	pop	r16
     7a6:	ff 90       	pop	r15
     7a8:	ef 90       	pop	r14
     7aa:	df 90       	pop	r13
     7ac:	cf 90       	pop	r12
     7ae:	bf 90       	pop	r11
     7b0:	af 90       	pop	r10
     7b2:	9f 90       	pop	r9
     7b4:	8f 90       	pop	r8
     7b6:	7f 90       	pop	r7
     7b8:	6f 90       	pop	r6
     7ba:	5f 90       	pop	r5
     7bc:	4f 90       	pop	r4
     7be:	08 95       	ret

000007c0 <constantVoltageMode>:

void constantVoltageMode(long int setVoltage_uV){
     7c0:	cf 92       	push	r12
     7c2:	df 92       	push	r13
     7c4:	ef 92       	push	r14
     7c6:	ff 92       	push	r15
     7c8:	6b 01       	movw	r12, r22
     7ca:	7c 01       	movw	r14, r24
	static long int prevVoltage_uV = 0;
	if(prevVoltage_uV!=setVoltage_uV){
     7cc:	80 91 9a 00 	lds	r24, 0x009A
     7d0:	90 91 9b 00 	lds	r25, 0x009B
     7d4:	a0 91 9c 00 	lds	r26, 0x009C
     7d8:	b0 91 9d 00 	lds	r27, 0x009D
     7dc:	8c 15       	cp	r24, r12
     7de:	9d 05       	cpc	r25, r13
     7e0:	ae 05       	cpc	r26, r14
     7e2:	bf 05       	cpc	r27, r15
     7e4:	d1 f0       	breq	.+52     	; 0x81a <constantVoltageMode+0x5a>
		long int DACvalue_buff = getDACcode((double) (setVoltage_uV/1000000.0));
     7e6:	c7 01       	movw	r24, r14
     7e8:	b6 01       	movw	r22, r12
     7ea:	0e 94 de 12 	call	0x25bc	; 0x25bc <__floatsisf>
     7ee:	20 e0       	ldi	r18, 0x00	; 0
     7f0:	34 e2       	ldi	r19, 0x24	; 36
     7f2:	44 e7       	ldi	r20, 0x74	; 116
     7f4:	59 e4       	ldi	r21, 0x49	; 73
     7f6:	0e 94 3f 12 	call	0x247e	; 0x247e <__divsf3>
     7fa:	0e 94 a3 01 	call	0x346	; 0x346 <getDACcode>
     7fe:	ab 01       	movw	r20, r22
     800:	bc 01       	movw	r22, r24
		writeToDAC_withPowerDown(1,DACvalue_buff);
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	ba 01       	movw	r22, r20
     806:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <writeToDAC_withPowerDown>
		prevVoltage_uV=setVoltage_uV;
     80a:	c0 92 9a 00 	sts	0x009A, r12
     80e:	d0 92 9b 00 	sts	0x009B, r13
     812:	e0 92 9c 00 	sts	0x009C, r14
     816:	f0 92 9d 00 	sts	0x009D, r15
	}	
}
     81a:	ff 90       	pop	r15
     81c:	ef 90       	pop	r14
     81e:	df 90       	pop	r13
     820:	cf 90       	pop	r12
     822:	08 95       	ret

00000824 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
     824:	11 b8       	out	0x01, r1	; 1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
     826:	8c e0       	ldi	r24, 0x0C	; 12
     828:	80 b9       	out	0x00, r24	; 0

}/* i2c_init */
     82a:	08 95       	ret

0000082c <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     82c:	94 ea       	ldi	r25, 0xA4	; 164
     82e:	96 bf       	out	0x36, r25	; 54

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     830:	06 b6       	in	r0, 0x36	; 54
     832:	07 fe       	sbrs	r0, 7
     834:	fd cf       	rjmp	.-6      	; 0x830 <i2c_start+0x4>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     836:	91 b1       	in	r25, 0x01	; 1
     838:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     83a:	98 30       	cpi	r25, 0x08	; 8
     83c:	11 f0       	breq	.+4      	; 0x842 <i2c_start+0x16>
     83e:	90 31       	cpi	r25, 0x10	; 16
     840:	79 f4       	brne	.+30     	; 0x860 <__stack+0x1>

	// send device address
	TWDR = address;
     842:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
     844:	84 e8       	ldi	r24, 0x84	; 132
     846:	86 bf       	out	0x36, r24	; 54

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     848:	06 b6       	in	r0, 0x36	; 54
     84a:	07 fe       	sbrs	r0, 7
     84c:	fd cf       	rjmp	.-6      	; 0x848 <i2c_start+0x1c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     84e:	91 b1       	in	r25, 0x01	; 1
     850:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     852:	98 31       	cpi	r25, 0x18	; 24
     854:	39 f0       	breq	.+14     	; 0x864 <__stack+0x5>

/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	90 34       	cpi	r25, 0x40	; 64
     85a:	29 f4       	brne	.+10     	; 0x866 <__stack+0x7>
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
     864:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
     866:	08 95       	ret

00000868 <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     868:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
     86a:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     86c:	24 e9       	ldi	r18, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     86e:	46 bf       	out	0x36, r20	; 54
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     870:	06 b6       	in	r0, 0x36	; 54
     872:	07 fe       	sbrs	r0, 7
     874:	fd cf       	rjmp	.-6      	; 0x870 <i2c_start_wait+0x8>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     876:	91 b1       	in	r25, 0x01	; 1
     878:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
     87a:	98 30       	cpi	r25, 0x08	; 8
     87c:	11 f0       	breq	.+4      	; 0x882 <i2c_start_wait+0x1a>
     87e:	90 31       	cpi	r25, 0x10	; 16
     880:	b1 f7       	brne	.-20     	; 0x86e <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
     882:	83 b9       	out	0x03, r24	; 3
    	TWCR = (1<<TWINT) | (1<<TWEN);
     884:	36 bf       	out	0x36, r19	; 54
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     886:	06 b6       	in	r0, 0x36	; 54
     888:	07 fe       	sbrs	r0, 7
     88a:	fd cf       	rjmp	.-6      	; 0x886 <i2c_start_wait+0x1e>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     88c:	91 b1       	in	r25, 0x01	; 1
     88e:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
     890:	90 32       	cpi	r25, 0x20	; 32
     892:	11 f0       	breq	.+4      	; 0x898 <i2c_start_wait+0x30>
     894:	98 35       	cpi	r25, 0x58	; 88
     896:	29 f4       	brne	.+10     	; 0x8a2 <i2c_start_wait+0x3a>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     898:	26 bf       	out	0x36, r18	; 54
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
     89a:	06 b6       	in	r0, 0x36	; 54
     89c:	04 fc       	sbrc	r0, 4
     89e:	fd cf       	rjmp	.-6      	; 0x89a <i2c_start_wait+0x32>
     8a0:	e6 cf       	rjmp	.-52     	; 0x86e <i2c_start_wait+0x6>
     8a2:	08 95       	ret

000008a4 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
     8a4:	0e 94 16 04 	call	0x82c	; 0x82c <i2c_start>

}/* i2c_rep_start */
     8a8:	08 95       	ret

000008aa <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     8aa:	84 e9       	ldi	r24, 0x94	; 148
     8ac:	86 bf       	out	0x36, r24	; 54
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     8ae:	06 b6       	in	r0, 0x36	; 54
     8b0:	04 fc       	sbrc	r0, 4
     8b2:	fd cf       	rjmp	.-6      	; 0x8ae <i2c_stop+0x4>

}/* i2c_stop */
     8b4:	08 95       	ret

000008b6 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     8b6:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
     8b8:	84 e8       	ldi	r24, 0x84	; 132
     8ba:	86 bf       	out	0x36, r24	; 54

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     8bc:	06 b6       	in	r0, 0x36	; 54
     8be:	07 fe       	sbrs	r0, 7
     8c0:	fd cf       	rjmp	.-6      	; 0x8bc <i2c_write+0x6>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     8c2:	91 b1       	in	r25, 0x01	; 1
     8c4:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	98 32       	cpi	r25, 0x28	; 40
     8ca:	09 f4       	brne	.+2      	; 0x8ce <i2c_write+0x18>
     8cc:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
     8ce:	08 95       	ret

000008d0 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     8d0:	84 ec       	ldi	r24, 0xC4	; 196
     8d2:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));    
     8d4:	06 b6       	in	r0, 0x36	; 54
     8d6:	07 fe       	sbrs	r0, 7
     8d8:	fd cf       	rjmp	.-6      	; 0x8d4 <i2c_readAck+0x4>

    return TWDR;
     8da:	83 b1       	in	r24, 0x03	; 3

}/* i2c_readAck */
     8dc:	08 95       	ret

000008de <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     8de:	84 e8       	ldi	r24, 0x84	; 132
     8e0:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
     8e2:	06 b6       	in	r0, 0x36	; 54
     8e4:	07 fe       	sbrs	r0, 7
     8e6:	fd cf       	rjmp	.-6      	; 0x8e2 <i2c_readNak+0x4>
	
    return TWDR;
     8e8:	83 b1       	in	r24, 0x03	; 3

}/* i2c_readNak */
     8ea:	08 95       	ret

000008ec <__muldi3>:
     8ec:	a0 e3       	ldi	r26, 0x30	; 48
     8ee:	b0 e0       	ldi	r27, 0x00	; 0
     8f0:	ec e7       	ldi	r30, 0x7C	; 124
     8f2:	f4 e0       	ldi	r31, 0x04	; 4
     8f4:	0c 94 8d 14 	jmp	0x291a	; 0x291a <__prologue_saves__+0x4>
     8f8:	29 8f       	std	Y+25, r18	; 0x19
     8fa:	3a 8f       	std	Y+26, r19	; 0x1a
     8fc:	4b 8f       	std	Y+27, r20	; 0x1b
     8fe:	5c 8f       	std	Y+28, r21	; 0x1c
     900:	6d 8f       	std	Y+29, r22	; 0x1d
     902:	7e 8f       	std	Y+30, r23	; 0x1e
     904:	8f 8f       	std	Y+31, r24	; 0x1f
     906:	98 a3       	lds	r25, 0x58
     908:	a9 8a       	std	Y+17, r10	; 0x11
     90a:	ba 8a       	std	Y+18, r11	; 0x12
     90c:	cb 8a       	std	Y+19, r12	; 0x13
     90e:	dc 8a       	std	Y+20, r13	; 0x14
     910:	ed 8a       	std	Y+21, r14	; 0x15
     912:	fe 8a       	std	Y+22, r15	; 0x16
     914:	0f 8b       	std	Y+23, r16	; 0x17
     916:	18 8f       	std	Y+24, r17	; 0x18
     918:	09 8d       	ldd	r16, Y+25	; 0x19
     91a:	1a 8d       	ldd	r17, Y+26	; 0x1a
     91c:	2b 8d       	ldd	r18, Y+27	; 0x1b
     91e:	3c 8d       	ldd	r19, Y+28	; 0x1c
     920:	09 a3       	lds	r16, 0x59
     922:	1a a3       	lds	r17, 0x5a
     924:	2b a3       	lds	r18, 0x5b
     926:	3c a3       	lds	r19, 0x5c
     928:	68 01       	movw	r12, r16
     92a:	79 01       	movw	r14, r18
     92c:	8f ef       	ldi	r24, 0xFF	; 255
     92e:	9f ef       	ldi	r25, 0xFF	; 255
     930:	a0 e0       	ldi	r26, 0x00	; 0
     932:	b0 e0       	ldi	r27, 0x00	; 0
     934:	c8 22       	and	r12, r24
     936:	d9 22       	and	r13, r25
     938:	ea 22       	and	r14, r26
     93a:	fb 22       	and	r15, r27
     93c:	89 01       	movw	r16, r18
     93e:	22 27       	eor	r18, r18
     940:	33 27       	eor	r19, r19
     942:	09 a7       	lds	r16, 0x79
     944:	1a a7       	lds	r17, 0x7a
     946:	2b a7       	lds	r18, 0x7b
     948:	3c a7       	lds	r19, 0x7c
     94a:	09 89       	ldd	r16, Y+17	; 0x11
     94c:	1a 89       	ldd	r17, Y+18	; 0x12
     94e:	2b 89       	ldd	r18, Y+19	; 0x13
     950:	3c 89       	ldd	r19, Y+20	; 0x14
     952:	0d a3       	lds	r16, 0x5d
     954:	1e a3       	lds	r17, 0x5e
     956:	2f a3       	lds	r18, 0x5f
     958:	38 a7       	lds	r19, 0x78
     95a:	48 01       	movw	r8, r16
     95c:	59 01       	movw	r10, r18
     95e:	88 22       	and	r8, r24
     960:	99 22       	and	r9, r25
     962:	aa 22       	and	r10, r26
     964:	bb 22       	and	r11, r27
     966:	29 01       	movw	r4, r18
     968:	66 24       	eor	r6, r6
     96a:	77 24       	eor	r7, r7
     96c:	c5 01       	movw	r24, r10
     96e:	b4 01       	movw	r22, r8
     970:	a7 01       	movw	r20, r14
     972:	96 01       	movw	r18, r12
     974:	0e 94 1b 14 	call	0x2836	; 0x2836 <__mulsi3>
     978:	6d a7       	lds	r22, 0x7d
     97a:	7e a7       	lds	r23, 0x7e
     97c:	8f a7       	lds	r24, 0x7f
     97e:	98 ab       	sts	0x58, r25
     980:	c3 01       	movw	r24, r6
     982:	b2 01       	movw	r22, r4
     984:	0e 94 1b 14 	call	0x2836	; 0x2836 <__mulsi3>
     988:	6b 01       	movw	r12, r22
     98a:	7c 01       	movw	r14, r24
     98c:	c5 01       	movw	r24, r10
     98e:	b4 01       	movw	r22, r8
     990:	29 a5       	lds	r18, 0x69
     992:	3a a5       	lds	r19, 0x6a
     994:	4b a5       	lds	r20, 0x6b
     996:	5c a5       	lds	r21, 0x6c
     998:	0e 94 1b 14 	call	0x2836	; 0x2836 <__mulsi3>
     99c:	4b 01       	movw	r8, r22
     99e:	5c 01       	movw	r10, r24
     9a0:	c3 01       	movw	r24, r6
     9a2:	b2 01       	movw	r22, r4
     9a4:	0e 94 1b 14 	call	0x2836	; 0x2836 <__mulsi3>
     9a8:	ab 01       	movw	r20, r22
     9aa:	bc 01       	movw	r22, r24
     9ac:	c8 0c       	add	r12, r8
     9ae:	d9 1c       	adc	r13, r9
     9b0:	ea 1c       	adc	r14, r10
     9b2:	fb 1c       	adc	r15, r11
     9b4:	0d a5       	lds	r16, 0x6d
     9b6:	1e a5       	lds	r17, 0x6e
     9b8:	2f a5       	lds	r18, 0x6f
     9ba:	38 a9       	sts	0x48, r19
     9bc:	c9 01       	movw	r24, r18
     9be:	aa 27       	eor	r26, r26
     9c0:	bb 27       	eor	r27, r27
     9c2:	c8 0e       	add	r12, r24
     9c4:	d9 1e       	adc	r13, r25
     9c6:	ea 1e       	adc	r14, r26
     9c8:	fb 1e       	adc	r15, r27
     9ca:	c8 14       	cp	r12, r8
     9cc:	d9 04       	cpc	r13, r9
     9ce:	ea 04       	cpc	r14, r10
     9d0:	fb 04       	cpc	r15, r11
     9d2:	20 f4       	brcc	.+8      	; 0x9dc <__muldi3+0xf0>
     9d4:	40 50       	subi	r20, 0x00	; 0
     9d6:	50 40       	sbci	r21, 0x00	; 0
     9d8:	6f 4f       	sbci	r22, 0xFF	; 255
     9da:	7f 4f       	sbci	r23, 0xFF	; 255
     9dc:	c7 01       	movw	r24, r14
     9de:	aa 27       	eor	r26, r26
     9e0:	bb 27       	eor	r27, r27
     9e2:	84 0f       	add	r24, r20
     9e4:	95 1f       	adc	r25, r21
     9e6:	a6 1f       	adc	r26, r22
     9e8:	b7 1f       	adc	r27, r23
     9ea:	8d 83       	std	Y+5, r24	; 0x05
     9ec:	9e 83       	std	Y+6, r25	; 0x06
     9ee:	af 83       	std	Y+7, r26	; 0x07
     9f0:	b8 87       	std	Y+8, r27	; 0x08
     9f2:	76 01       	movw	r14, r12
     9f4:	dd 24       	eor	r13, r13
     9f6:	cc 24       	eor	r12, r12
     9f8:	4d a5       	lds	r20, 0x6d
     9fa:	5e a5       	lds	r21, 0x6e
     9fc:	6f a5       	lds	r22, 0x6f
     9fe:	78 a9       	sts	0x48, r23
     a00:	60 70       	andi	r22, 0x00	; 0
     a02:	70 70       	andi	r23, 0x00	; 0
     a04:	c4 0e       	add	r12, r20
     a06:	d5 1e       	adc	r13, r21
     a08:	e6 1e       	adc	r14, r22
     a0a:	f7 1e       	adc	r15, r23
     a0c:	c9 82       	std	Y+1, r12	; 0x01
     a0e:	da 82       	std	Y+2, r13	; 0x02
     a10:	eb 82       	std	Y+3, r14	; 0x03
     a12:	fc 82       	std	Y+4, r15	; 0x04
     a14:	1c 2d       	mov	r17, r12
     a16:	0a 81       	ldd	r16, Y+2	; 0x02
     a18:	8b 80       	ldd	r8, Y+3	; 0x03
     a1a:	4c 80       	ldd	r4, Y+4	; 0x04
     a1c:	8d 87       	std	Y+13, r24	; 0x0d
     a1e:	8e 81       	ldd	r24, Y+6	; 0x06
     a20:	8e 87       	std	Y+14, r24	; 0x0e
     a22:	8f 81       	ldd	r24, Y+7	; 0x07
     a24:	8f 87       	std	Y+15, r24	; 0x0f
     a26:	88 85       	ldd	r24, Y+8	; 0x08
     a28:	88 8b       	std	Y+16, r24	; 0x10
     a2a:	2d 89       	ldd	r18, Y+21	; 0x15
     a2c:	3e 89       	ldd	r19, Y+22	; 0x16
     a2e:	4f 89       	ldd	r20, Y+23	; 0x17
     a30:	58 8d       	ldd	r21, Y+24	; 0x18
     a32:	69 a1       	lds	r22, 0x49
     a34:	7a a1       	lds	r23, 0x4a
     a36:	8b a1       	lds	r24, 0x4b
     a38:	9c a1       	lds	r25, 0x4c
     a3a:	0e 94 1b 14 	call	0x2836	; 0x2836 <__mulsi3>
     a3e:	6b 01       	movw	r12, r22
     a40:	7c 01       	movw	r14, r24
     a42:	2d 8d       	ldd	r18, Y+29	; 0x1d
     a44:	3e 8d       	ldd	r19, Y+30	; 0x1e
     a46:	4f 8d       	ldd	r20, Y+31	; 0x1f
     a48:	58 a1       	lds	r21, 0x48
     a4a:	6d a1       	lds	r22, 0x4d
     a4c:	7e a1       	lds	r23, 0x4e
     a4e:	8f a1       	lds	r24, 0x4f
     a50:	98 a5       	lds	r25, 0x68
     a52:	0e 94 1b 14 	call	0x2836	; 0x2836 <__mulsi3>
     a56:	dc 01       	movw	r26, r24
     a58:	cb 01       	movw	r24, r22
     a5a:	c8 0e       	add	r12, r24
     a5c:	d9 1e       	adc	r13, r25
     a5e:	ea 1e       	adc	r14, r26
     a60:	fb 1e       	adc	r15, r27
     a62:	8d 85       	ldd	r24, Y+13	; 0x0d
     a64:	9e 85       	ldd	r25, Y+14	; 0x0e
     a66:	af 85       	ldd	r26, Y+15	; 0x0f
     a68:	b8 89       	ldd	r27, Y+16	; 0x10
     a6a:	8c 0d       	add	r24, r12
     a6c:	9d 1d       	adc	r25, r13
     a6e:	ae 1d       	adc	r26, r14
     a70:	bf 1d       	adc	r27, r15
     a72:	8d 87       	std	Y+13, r24	; 0x0d
     a74:	9e 87       	std	Y+14, r25	; 0x0e
     a76:	af 87       	std	Y+15, r26	; 0x0f
     a78:	b8 8b       	std	Y+16, r27	; 0x10
     a7a:	68 2f       	mov	r22, r24
     a7c:	7e 85       	ldd	r23, Y+14	; 0x0e
     a7e:	21 2f       	mov	r18, r17
     a80:	30 2f       	mov	r19, r16
     a82:	48 2d       	mov	r20, r8
     a84:	54 2d       	mov	r21, r4
     a86:	8f 85       	ldd	r24, Y+15	; 0x0f
     a88:	98 89       	ldd	r25, Y+16	; 0x10
     a8a:	e0 96       	adiw	r28, 0x30	; 48
     a8c:	e0 e1       	ldi	r30, 0x10	; 16
     a8e:	0c 94 a9 14 	jmp	0x2952	; 0x2952 <__epilogue_restores__+0x4>

00000a92 <__ashrdi3>:
     a92:	0f 93       	push	r16
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	cd b7       	in	r28, 0x3d	; 61
     a9a:	de b7       	in	r29, 0x3e	; 62
     a9c:	60 97       	sbiw	r28, 0x10	; 16
     a9e:	0f b6       	in	r0, 0x3f	; 63
     aa0:	f8 94       	cli
     aa2:	de bf       	out	0x3e, r29	; 62
     aa4:	0f be       	out	0x3f, r0	; 63
     aa6:	cd bf       	out	0x3d, r28	; 61
     aa8:	00 23       	and	r16, r16
     aaa:	09 f4       	brne	.+2      	; 0xaae <__ashrdi3+0x1c>
     aac:	56 c0       	rjmp	.+172    	; 0xb5a <__ashrdi3+0xc8>
     aae:	29 87       	std	Y+9, r18	; 0x09
     ab0:	3a 87       	std	Y+10, r19	; 0x0a
     ab2:	4b 87       	std	Y+11, r20	; 0x0b
     ab4:	5c 87       	std	Y+12, r21	; 0x0c
     ab6:	6d 87       	std	Y+13, r22	; 0x0d
     ab8:	7e 87       	std	Y+14, r23	; 0x0e
     aba:	8f 87       	std	Y+15, r24	; 0x0f
     abc:	98 8b       	std	Y+16, r25	; 0x10
     abe:	20 e2       	ldi	r18, 0x20	; 32
     ac0:	20 1b       	sub	r18, r16
     ac2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ac4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ac6:	af 85       	ldd	r26, Y+15	; 0x0f
     ac8:	b8 89       	ldd	r27, Y+16	; 0x10
     aca:	ac 01       	movw	r20, r24
     acc:	bd 01       	movw	r22, r26
     ace:	12 16       	cp	r1, r18
     ad0:	b4 f0       	brlt	.+44     	; 0xafe <__ashrdi3+0x6c>
     ad2:	77 0f       	add	r23, r23
     ad4:	44 0b       	sbc	r20, r20
     ad6:	54 2f       	mov	r21, r20
     ad8:	ba 01       	movw	r22, r20
     ada:	4d 83       	std	Y+5, r20	; 0x05
     adc:	5e 83       	std	Y+6, r21	; 0x06
     ade:	6f 83       	std	Y+7, r22	; 0x07
     ae0:	78 87       	std	Y+8, r23	; 0x08
     ae2:	33 27       	eor	r19, r19
     ae4:	27 fd       	sbrc	r18, 7
     ae6:	30 95       	com	r19
     ae8:	30 95       	com	r19
     aea:	21 95       	neg	r18
     aec:	3f 4f       	sbci	r19, 0xFF	; 255
     aee:	04 c0       	rjmp	.+8      	; 0xaf8 <__ashrdi3+0x66>
     af0:	b5 95       	asr	r27
     af2:	a7 95       	ror	r26
     af4:	97 95       	ror	r25
     af6:	87 95       	ror	r24
     af8:	2a 95       	dec	r18
     afa:	d2 f7       	brpl	.-12     	; 0xaf0 <__ashrdi3+0x5e>
     afc:	22 c0       	rjmp	.+68     	; 0xb42 <__ashrdi3+0xb0>
     afe:	00 2e       	mov	r0, r16
     b00:	04 c0       	rjmp	.+8      	; 0xb0a <__ashrdi3+0x78>
     b02:	75 95       	asr	r23
     b04:	67 95       	ror	r22
     b06:	57 95       	ror	r21
     b08:	47 95       	ror	r20
     b0a:	0a 94       	dec	r0
     b0c:	d2 f7       	brpl	.-12     	; 0xb02 <__ashrdi3+0x70>
     b0e:	4d 83       	std	Y+5, r20	; 0x05
     b10:	5e 83       	std	Y+6, r21	; 0x06
     b12:	6f 83       	std	Y+7, r22	; 0x07
     b14:	78 87       	std	Y+8, r23	; 0x08
     b16:	04 c0       	rjmp	.+8      	; 0xb20 <__ashrdi3+0x8e>
     b18:	88 0f       	add	r24, r24
     b1a:	99 1f       	adc	r25, r25
     b1c:	aa 1f       	adc	r26, r26
     b1e:	bb 1f       	adc	r27, r27
     b20:	2a 95       	dec	r18
     b22:	d2 f7       	brpl	.-12     	; 0xb18 <__ashrdi3+0x86>
     b24:	49 85       	ldd	r20, Y+9	; 0x09
     b26:	5a 85       	ldd	r21, Y+10	; 0x0a
     b28:	6b 85       	ldd	r22, Y+11	; 0x0b
     b2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     b2c:	04 c0       	rjmp	.+8      	; 0xb36 <__ashrdi3+0xa4>
     b2e:	76 95       	lsr	r23
     b30:	67 95       	ror	r22
     b32:	57 95       	ror	r21
     b34:	47 95       	ror	r20
     b36:	0a 95       	dec	r16
     b38:	d2 f7       	brpl	.-12     	; 0xb2e <__ashrdi3+0x9c>
     b3a:	84 2b       	or	r24, r20
     b3c:	95 2b       	or	r25, r21
     b3e:	a6 2b       	or	r26, r22
     b40:	b7 2b       	or	r27, r23
     b42:	89 83       	std	Y+1, r24	; 0x01
     b44:	9a 83       	std	Y+2, r25	; 0x02
     b46:	ab 83       	std	Y+3, r26	; 0x03
     b48:	bc 83       	std	Y+4, r27	; 0x04
     b4a:	29 81       	ldd	r18, Y+1	; 0x01
     b4c:	3a 81       	ldd	r19, Y+2	; 0x02
     b4e:	4b 81       	ldd	r20, Y+3	; 0x03
     b50:	5c 81       	ldd	r21, Y+4	; 0x04
     b52:	6d 81       	ldd	r22, Y+5	; 0x05
     b54:	7e 81       	ldd	r23, Y+6	; 0x06
     b56:	8f 81       	ldd	r24, Y+7	; 0x07
     b58:	98 85       	ldd	r25, Y+8	; 0x08
     b5a:	60 96       	adiw	r28, 0x10	; 16
     b5c:	0f b6       	in	r0, 0x3f	; 63
     b5e:	f8 94       	cli
     b60:	de bf       	out	0x3e, r29	; 62
     b62:	0f be       	out	0x3f, r0	; 63
     b64:	cd bf       	out	0x3d, r28	; 61
     b66:	df 91       	pop	r29
     b68:	cf 91       	pop	r28
     b6a:	0f 91       	pop	r16
     b6c:	08 95       	ret

00000b6e <main>:

#define KEYPRESS_TIME	2000
#define BLINKING_TIME	5000
#define SCREEN_TIME		500

int main(void) {
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
     b72:	cd b7       	in	r28, 0x3d	; 61
     b74:	de b7       	in	r29, 0x3e	; 62
     b76:	c4 56       	subi	r28, 0x64	; 100
     b78:	d0 40       	sbci	r29, 0x00	; 0
     b7a:	0f b6       	in	r0, 0x3f	; 63
     b7c:	f8 94       	cli
     b7e:	de bf       	out	0x3e, r29	; 62
     b80:	0f be       	out	0x3f, r0	; 63
     b82:	cd bf       	out	0x3d, r28	; 61
	
	init();
     b84:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <init>
	
	unsigned long int control_register=0xA081FF;//0xA083FFC;//0xA081FF;
	
	writeToADC(control_register);
     b88:	6f ef       	ldi	r22, 0xFF	; 255
     b8a:	71 e8       	ldi	r23, 0x81	; 129
     b8c:	80 ea       	ldi	r24, 0xA0	; 160
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	0e 94 1b 02 	call	0x436	; 0x436 <writeToADC>
	uint32_t ADC_control_reg = readFromADC(CONT_REG);
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	0e 94 47 02 	call	0x48e	; 0x48e <readFromADC>
     b9a:	2f ef       	ldi	r18, 0xFF	; 255
     b9c:	31 ee       	ldi	r19, 0xE1	; 225
     b9e:	44 e0       	ldi	r20, 0x04	; 4
     ba0:	21 50       	subi	r18, 0x01	; 1
     ba2:	30 40       	sbci	r19, 0x00	; 0
     ba4:	40 40       	sbci	r20, 0x00	; 0
     ba6:	e1 f7       	brne	.-8      	; 0xba0 <main+0x32>
     ba8:	00 c0       	rjmp	.+0      	; 0xbaa <main+0x3c>
     baa:	00 00       	nop
	uint16_t blinkingMode = 0;
	
	uint8_t changeMode=0;
	int selectDigit=-1;
	
	writeDataTo74HC4094(1<<mode);
     bac:	88 e0       	ldi	r24, 0x08	; 8
     bae:	0e 94 01 02 	call	0x402	; 0x402 <writeDataTo74HC4094>
	
	uint32_t currentVoltage=0;
	
	uint8_t ADC2_Gain=0;
	
	powerDownDAC(0,0);
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	60 e0       	ldi	r22, 0x00	; 0
     bb6:	0e 94 4e 01 	call	0x29c	; 0x29c <powerDownDAC>
	
	uint8_t select_ADC_Channel=1;
	
	uint32_t currentVoltage=0;
	
	uint8_t ADC2_Gain=0;
     bba:	69 96       	adiw	r28, 0x19	; 25
     bbc:	1f ae       	sts	0xbf, r17
     bbe:	69 97       	sbiw	r28, 0x19	; 25
	
	writeDataTo74HC4094(1<<mode);
	uint16_t TimeCounter=0;
	uint16_t keyPress=0;
	
	uint8_t select_ADC_Channel=1;
     bc0:	31 e0       	ldi	r19, 0x01	; 1
     bc2:	a5 96       	adiw	r28, 0x25	; 37
     bc4:	3f af       	sts	0x7f, r19
     bc6:	a5 97       	sbiw	r28, 0x25	; 37
	uint8_t changeMode=0;
	int selectDigit=-1;
	
	writeDataTo74HC4094(1<<mode);
	uint16_t TimeCounter=0;
	uint16_t keyPress=0;
     bc8:	6b 96       	adiw	r28, 0x1b	; 27
     bca:	1f ae       	sts	0xbf, r17
     bcc:	1e ae       	sts	0xbe, r17
     bce:	6b 97       	sbiw	r28, 0x1b	; 27
	
	uint8_t changeMode=0;
	int selectDigit=-1;
	
	writeDataTo74HC4094(1<<mode);
	uint16_t TimeCounter=0;
     bd0:	a4 96       	adiw	r28, 0x24	; 36
     bd2:	1f ae       	sts	0xbf, r17
     bd4:	1e ae       	sts	0xbe, r17
     bd6:	a4 97       	sbiw	r28, 0x24	; 36
	uint8_t mode = 3;
	uint8_t newMode=3;
	uint16_t blinkingMode = 0;
	
	uint8_t changeMode=0;
	int selectDigit=-1;
     bd8:	4f ef       	ldi	r20, 0xFF	; 255
     bda:	5f ef       	ldi	r21, 0xFF	; 255
     bdc:	63 96       	adiw	r28, 0x13	; 19
     bde:	5f af       	sts	0x7f, r21
     be0:	4e af       	sts	0x7e, r20
     be2:	63 97       	sbiw	r28, 0x13	; 19
	*/
	uint8_t mode = 3;
	uint8_t newMode=3;
	uint16_t blinkingMode = 0;
	
	uint8_t changeMode=0;
     be4:	66 24       	eor	r6, r6
	  mode = 10 measure voltage
	  mode = 11 measure current
	*/
	uint8_t mode = 3;
	uint8_t newMode=3;
	uint16_t blinkingMode = 0;
     be6:	6d 96       	adiw	r28, 0x1d	; 29
     be8:	1f ae       	sts	0xbf, r17
     bea:	1e ae       	sts	0xbe, r17
     bec:	6d 97       	sbiw	r28, 0x1d	; 29
	  
	  mode = 10 measure voltage
	  mode = 11 measure current
	*/
	uint8_t mode = 3;
	uint8_t newMode=3;
     bee:	a3 e0       	ldi	r26, 0x03	; 3
     bf0:	7a 2e       	mov	r7, r26
	  mode = 0 constant power
	  
	  mode = 10 measure voltage
	  mode = 11 measure current
	*/
	uint8_t mode = 3;
     bf2:	53 e0       	ldi	r21, 0x03	; 3
     bf4:	64 96       	adiw	r28, 0x14	; 20
     bf6:	5f af       	sts	0x7f, r21
     bf8:	64 97       	sbiw	r28, 0x14	; 20
	//sendToUART(buff2);
	
	_delay_ms(100);
	
	long int printValue=0;
	long int setValue=0;
     bfa:	a1 96       	adiw	r28, 0x21	; 33
     bfc:	1c ae       	sts	0xbc, r17
     bfe:	1d ae       	sts	0xbd, r17
     c00:	1e ae       	sts	0xbe, r17
     c02:	1f ae       	sts	0xbf, r17
     c04:	a1 97       	sbiw	r28, 0x21	; 33
	//sprintf(buff2,"CTR: %X %X %X\n",reverse((uint8_t)(ADC_control_reg)),reverse((uint8_t)(ADC_control_reg>>8)),reverse((uint8_t)(ADC_control_reg>>16)));
	//sendToUART(buff2);
	
	_delay_ms(100);
	
	long int printValue=0;
     c06:	22 24       	eor	r2, r2
     c08:	33 24       	eor	r3, r3
     c0a:	21 01       	movw	r4, r2
	
	powerDownDAC(0,0);
	
    while(1) {
		/*-------------------------------------------------------------Time----------------------------------------------------------------*/
		TimeCounter++;
     c0c:	a4 96       	adiw	r28, 0x24	; 36
     c0e:	8e ad       	sts	0x6e, r24
     c10:	9f ad       	sts	0x6f, r25
     c12:	a4 97       	sbiw	r28, 0x24	; 36
     c14:	01 96       	adiw	r24, 0x01	; 1
     c16:	a4 96       	adiw	r28, 0x24	; 36
     c18:	9f af       	sts	0x7f, r25
     c1a:	8e af       	sts	0x7e, r24
     c1c:	a4 97       	sbiw	r28, 0x24	; 36
		if(TimeCounter==60000)
     c1e:	aa ee       	ldi	r26, 0xEA	; 234
     c20:	80 36       	cpi	r24, 0x60	; 96
     c22:	9a 07       	cpc	r25, r26
     c24:	21 f4       	brne	.+8      	; 0xc2e <main+0xc0>
			TimeCounter=0;
     c26:	a4 96       	adiw	r28, 0x24	; 36
     c28:	1f ae       	sts	0xbf, r17
     c2a:	1e ae       	sts	0xbe, r17
     c2c:	a4 97       	sbiw	r28, 0x24	; 36
		if(blinkingMode){
     c2e:	6d 96       	adiw	r28, 0x1d	; 29
     c30:	ee ad       	sts	0x6e, r30
     c32:	ff ad       	sts	0x6f, r31
     c34:	6d 97       	sbiw	r28, 0x1d	; 29
     c36:	30 97       	sbiw	r30, 0x00	; 0
     c38:	e1 f1       	breq	.+120    	; 0xcb2 <main+0x144>
			blinkingMode++;
     c3a:	31 96       	adiw	r30, 0x01	; 1
     c3c:	6d 96       	adiw	r28, 0x1d	; 29
     c3e:	ff af       	sts	0x7f, r31
     c40:	ee af       	sts	0x7e, r30
     c42:	6d 97       	sbiw	r28, 0x1d	; 29
			if(blinkingMode==BLINKING_TIME){
     c44:	23 e1       	ldi	r18, 0x13	; 19
     c46:	e8 38       	cpi	r30, 0x88	; 136
     c48:	f2 07       	cpc	r31, r18
     c4a:	51 f4       	brne	.+20     	; 0xc60 <main+0xf2>
				blinkingMode=1;
				writeDataTo74HC4094(0x00);
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	0e 94 01 02 	call	0x402	; 0x402 <writeDataTo74HC4094>
		if(TimeCounter==60000)
			TimeCounter=0;
		if(blinkingMode){
			blinkingMode++;
			if(blinkingMode==BLINKING_TIME){
				blinkingMode=1;
     c52:	41 e0       	ldi	r20, 0x01	; 1
     c54:	50 e0       	ldi	r21, 0x00	; 0
     c56:	6d 96       	adiw	r28, 0x1d	; 29
     c58:	5f af       	sts	0x7f, r21
     c5a:	4e af       	sts	0x7e, r20
     c5c:	6d 97       	sbiw	r28, 0x1d	; 29
     c5e:	29 c0       	rjmp	.+82     	; 0xcb2 <main+0x144>
				writeDataTo74HC4094(0x00);
			}				
			if(blinkingMode==BLINKING_TIME/2){
     c60:	6d 96       	adiw	r28, 0x1d	; 29
     c62:	8e ad       	sts	0x6e, r24
     c64:	9f ad       	sts	0x6f, r25
     c66:	6d 97       	sbiw	r28, 0x1d	; 29
     c68:	a9 e0       	ldi	r26, 0x09	; 9
     c6a:	84 3c       	cpi	r24, 0xC4	; 196
     c6c:	9a 07       	cpc	r25, r26
     c6e:	09 f5       	brne	.+66     	; 0xcb2 <main+0x144>
				if(changeMode){
     c70:	66 20       	and	r6, r6
     c72:	99 f0       	breq	.+38     	; 0xc9a <main+0x12c>
					if(newMode<10)	
     c74:	b9 e0       	ldi	r27, 0x09	; 9
     c76:	b7 15       	cp	r27, r7
     c78:	48 f0       	brcs	.+18     	; 0xc8c <main+0x11e>
						writeDataTo74HC4094(1<<newMode);	//blinking diode over new mode button
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	07 2c       	mov	r0, r7
     c80:	02 c0       	rjmp	.+4      	; 0xc86 <main+0x118>
     c82:	88 0f       	add	r24, r24
     c84:	99 1f       	adc	r25, r25
     c86:	0a 94       	dec	r0
     c88:	e2 f7       	brpl	.-8      	; 0xc82 <main+0x114>
     c8a:	11 c0       	rjmp	.+34     	; 0xcae <main+0x140>
					else if(newMode==11)
     c8c:	eb e0       	ldi	r30, 0x0B	; 11
     c8e:	7e 16       	cp	r7, r30
     c90:	11 f4       	brne	.+4      	; 0xc96 <main+0x128>
						writeDataTo74HC4094(0x03);	//on read Voltage mode buttons on I&U mode blinks
     c92:	83 e0       	ldi	r24, 0x03	; 3
     c94:	0c c0       	rjmp	.+24     	; 0xcae <main+0x140>
					else
						writeDataTo74HC4094(0x0C);	//on read Current mode buttons on R&P mode blinks
     c96:	8c e0       	ldi	r24, 0x0C	; 12
     c98:	0a c0       	rjmp	.+20     	; 0xcae <main+0x140>
				}					
				else
					writeDataTo74HC4094(1<<mode);
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	64 96       	adiw	r28, 0x14	; 20
     ca0:	0f ac       	sts	0xaf, r16
     ca2:	64 97       	sbiw	r28, 0x14	; 20
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <main+0x13c>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <main+0x138>
     cae:	0e 94 01 02 	call	0x402	; 0x402 <writeDataTo74HC4094>
			}				
		}
		
		/*-------------------------------------------------------------Buttons---------------------------------------------------------------*/
		uint16_t buttons=readDataFrom74HC165();
     cb2:	0e 94 e6 01 	call	0x3cc	; 0x3cc <readDataFrom74HC165>
     cb6:	8c 01       	movw	r16, r24
		if(keyPress==0){
     cb8:	6b 96       	adiw	r28, 0x1b	; 27
     cba:	2e ad       	sts	0x6e, r18
     cbc:	3f ad       	sts	0x6f, r19
     cbe:	6b 97       	sbiw	r28, 0x1b	; 27
     cc0:	21 15       	cp	r18, r1
     cc2:	31 05       	cpc	r19, r1
     cc4:	09 f0       	breq	.+2      	; 0xcc8 <main+0x15a>
     cc6:	3b c2       	rjmp	.+1142   	; 0x113e <main+0x5d0>
     cc8:	88 70       	andi	r24, 0x08	; 8
     cca:	90 70       	andi	r25, 0x00	; 0
			if(changeMode){
     ccc:	66 20       	and	r6, r6
     cce:	09 f4       	brne	.+2      	; 0xcd2 <main+0x164>
     cd0:	29 c1       	rjmp	.+594    	; 0xf24 <main+0x3b6>
				if(buttons&0x0008){	//OK  button
     cd2:	00 97       	sbiw	r24, 0x00	; 0
     cd4:	01 f1       	breq	.+64     	; 0xd16 <main+0x1a8>
					setValue=printValue;
					mode=newMode;
					writeDataTo74HC4094(1<<mode);
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	07 2c       	mov	r0, r7
     cdc:	02 c0       	rjmp	.+4      	; 0xce2 <main+0x174>
     cde:	88 0f       	add	r24, r24
     ce0:	99 1f       	adc	r25, r25
     ce2:	0a 94       	dec	r0
     ce4:	e2 f7       	brpl	.-8      	; 0xcde <main+0x170>
     ce6:	0e 94 01 02 	call	0x402	; 0x402 <writeDataTo74HC4094>
     cea:	64 96       	adiw	r28, 0x14	; 20
     cec:	7f ae       	sts	0xbf, r23
     cee:	64 97       	sbiw	r28, 0x14	; 20
		/*-------------------------------------------------------------Buttons---------------------------------------------------------------*/
		uint16_t buttons=readDataFrom74HC165();
		if(keyPress==0){
			if(changeMode){
				if(buttons&0x0008){	//OK  button
					setValue=printValue;
     cf0:	a1 96       	adiw	r28, 0x21	; 33
     cf2:	2c ae       	sts	0xbc, r18
     cf4:	3d ae       	sts	0xbd, r19
     cf6:	4e ae       	sts	0xbe, r20
     cf8:	5f ae       	sts	0xbf, r21
     cfa:	a1 97       	sbiw	r28, 0x21	; 33
					mode=newMode;
					writeDataTo74HC4094(1<<mode);
					changeMode=0;
					blinkingMode=0;
					selectDigit=-1;
					keyPress=KEYPRESS_TIME;
     cfc:	40 ed       	ldi	r20, 0xD0	; 208
     cfe:	57 e0       	ldi	r21, 0x07	; 7
     d00:	6b 96       	adiw	r28, 0x1b	; 27
     d02:	5f af       	sts	0x7f, r21
     d04:	4e af       	sts	0x7e, r20
     d06:	6b 97       	sbiw	r28, 0x1b	; 27
					setValue=printValue;
					mode=newMode;
					writeDataTo74HC4094(1<<mode);
					changeMode=0;
					blinkingMode=0;
					selectDigit=-1;
     d08:	8f ef       	ldi	r24, 0xFF	; 255
     d0a:	9f ef       	ldi	r25, 0xFF	; 255
     d0c:	63 96       	adiw	r28, 0x13	; 19
     d0e:	9f af       	sts	0x7f, r25
     d10:	8e af       	sts	0x7e, r24
     d12:	63 97       	sbiw	r28, 0x13	; 19
     d14:	23 c0       	rjmp	.+70     	; 0xd5c <main+0x1ee>
					keyPress=KEYPRESS_TIME;
					//write to DAC and change something
				}
				else if(buttons&0x0004){//CANCEL button
     d16:	02 ff       	sbrs	r16, 2
     d18:	27 c0       	rjmp	.+78     	; 0xd68 <main+0x1fa>
					printValue=setValue;
					blinkingMode=0;
					writeDataTo74HC4094(1<<mode);
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	64 96       	adiw	r28, 0x14	; 20
     d20:	0f ac       	sts	0xaf, r16
     d22:	64 97       	sbiw	r28, 0x14	; 20
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <main+0x1bc>
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	0a 94       	dec	r0
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <main+0x1b8>
     d2e:	0e 94 01 02 	call	0x402	; 0x402 <writeDataTo74HC4094>
     d32:	64 96       	adiw	r28, 0x14	; 20
     d34:	7f ac       	sts	0xaf, r23
     d36:	64 97       	sbiw	r28, 0x14	; 20
					selectDigit=-1;
					keyPress=KEYPRESS_TIME;
					//write to DAC and change something
				}
				else if(buttons&0x0004){//CANCEL button
					printValue=setValue;
     d38:	a1 96       	adiw	r28, 0x21	; 33
     d3a:	2c ac       	sts	0xac, r18
     d3c:	3d ac       	sts	0xad, r19
     d3e:	4e ac       	sts	0xae, r20
     d40:	5f ac       	sts	0xaf, r21
     d42:	a1 97       	sbiw	r28, 0x21	; 33
					blinkingMode=0;
					writeDataTo74HC4094(1<<mode);
					changeMode=0;
					selectDigit=-1;
					newMode=mode;
					keyPress=KEYPRESS_TIME;
     d44:	a0 ed       	ldi	r26, 0xD0	; 208
     d46:	b7 e0       	ldi	r27, 0x07	; 7
     d48:	6b 96       	adiw	r28, 0x1b	; 27
     d4a:	bf af       	sts	0x7f, r27
     d4c:	ae af       	sts	0x7e, r26
     d4e:	6b 97       	sbiw	r28, 0x1b	; 27
				else if(buttons&0x0004){//CANCEL button
					printValue=setValue;
					blinkingMode=0;
					writeDataTo74HC4094(1<<mode);
					changeMode=0;
					selectDigit=-1;
     d50:	ef ef       	ldi	r30, 0xFF	; 255
     d52:	ff ef       	ldi	r31, 0xFF	; 255
     d54:	63 96       	adiw	r28, 0x13	; 19
     d56:	ff af       	sts	0x7f, r31
     d58:	ee af       	sts	0x7e, r30
     d5a:	63 97       	sbiw	r28, 0x13	; 19
				}
				else if(buttons&0x0004){//CANCEL button
					printValue=setValue;
					blinkingMode=0;
					writeDataTo74HC4094(1<<mode);
					changeMode=0;
     d5c:	66 24       	eor	r6, r6
					keyPress=KEYPRESS_TIME;
					//write to DAC and change something
				}
				else if(buttons&0x0004){//CANCEL button
					printValue=setValue;
					blinkingMode=0;
     d5e:	6d 96       	adiw	r28, 0x1d	; 29
     d60:	1f ae       	sts	0xbf, r17
     d62:	1e ae       	sts	0xbe, r17
     d64:	6d 97       	sbiw	r28, 0x1d	; 29
     d66:	39 c1       	rjmp	.+626    	; 0xfda <main+0x46c>
					selectDigit=-1;
					newMode=mode;
					keyPress=KEYPRESS_TIME;
					//do something?? probable not
				}
				else if(buttons&0x0080){	//^ button
     d68:	07 ff       	sbrs	r16, 7
     d6a:	5e c0       	rjmp	.+188    	; 0xe28 <main+0x2ba>
					switch (selectDigit){
     d6c:	63 96       	adiw	r28, 0x13	; 19
     d6e:	2e ad       	sts	0x6e, r18
     d70:	3f ad       	sts	0x6f, r19
     d72:	63 97       	sbiw	r28, 0x13	; 19
     d74:	23 30       	cpi	r18, 0x03	; 3
     d76:	31 05       	cpc	r19, r1
     d78:	59 f1       	breq	.+86     	; 0xdd0 <main+0x262>
     d7a:	24 30       	cpi	r18, 0x04	; 4
     d7c:	31 05       	cpc	r19, r1
     d7e:	54 f4       	brge	.+20     	; 0xd94 <main+0x226>
     d80:	21 30       	cpi	r18, 0x01	; 1
     d82:	31 05       	cpc	r19, r1
     d84:	d9 f0       	breq	.+54     	; 0xdbc <main+0x24e>
     d86:	22 30       	cpi	r18, 0x02	; 2
     d88:	31 05       	cpc	r19, r1
     d8a:	ec f4       	brge	.+58     	; 0xdc6 <main+0x258>
     d8c:	21 15       	cp	r18, r1
     d8e:	31 05       	cpc	r19, r1
     d90:	79 f0       	breq	.+30     	; 0xdb0 <main+0x242>
     d92:	39 c0       	rjmp	.+114    	; 0xe06 <main+0x298>
     d94:	63 96       	adiw	r28, 0x13	; 19
     d96:	4e ad       	sts	0x6e, r20
     d98:	5f ad       	sts	0x6f, r21
     d9a:	63 97       	sbiw	r28, 0x13	; 19
     d9c:	45 30       	cpi	r20, 0x05	; 5
     d9e:	51 05       	cpc	r21, r1
     da0:	29 f1       	breq	.+74     	; 0xdec <main+0x27e>
     da2:	45 30       	cpi	r20, 0x05	; 5
     da4:	51 05       	cpc	r21, r1
     da6:	ec f0       	brlt	.+58     	; 0xde2 <main+0x274>
     da8:	46 30       	cpi	r20, 0x06	; 6
     daa:	51 05       	cpc	r21, r1
     dac:	61 f5       	brne	.+88     	; 0xe06 <main+0x298>
     dae:	23 c0       	rjmp	.+70     	; 0xdf6 <main+0x288>
						case 0:
						printValue++; break;
     db0:	08 94       	sec
     db2:	21 1c       	adc	r2, r1
     db4:	31 1c       	adc	r3, r1
     db6:	41 1c       	adc	r4, r1
     db8:	51 1c       	adc	r5, r1
     dba:	25 c0       	rjmp	.+74     	; 0xe06 <main+0x298>
						case 1:
						printValue+=10; break;
     dbc:	8a e0       	ldi	r24, 0x0A	; 10
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	a0 e0       	ldi	r26, 0x00	; 0
     dc2:	b0 e0       	ldi	r27, 0x00	; 0
     dc4:	09 c0       	rjmp	.+18     	; 0xdd8 <main+0x26a>
						case 2:
						printValue+=100; break;
     dc6:	24 e6       	ldi	r18, 0x64	; 100
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	40 e0       	ldi	r20, 0x00	; 0
     dcc:	50 e0       	ldi	r21, 0x00	; 0
     dce:	17 c0       	rjmp	.+46     	; 0xdfe <main+0x290>
						case 3:
						printValue+=1000L; break;
     dd0:	88 ee       	ldi	r24, 0xE8	; 232
     dd2:	93 e0       	ldi	r25, 0x03	; 3
     dd4:	a0 e0       	ldi	r26, 0x00	; 0
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	28 0e       	add	r2, r24
     dda:	39 1e       	adc	r3, r25
     ddc:	4a 1e       	adc	r4, r26
     dde:	5b 1e       	adc	r5, r27
     de0:	12 c0       	rjmp	.+36     	; 0xe06 <main+0x298>
						case 4:
						printValue+=10000L; break;
     de2:	20 e1       	ldi	r18, 0x10	; 16
     de4:	37 e2       	ldi	r19, 0x27	; 39
     de6:	40 e0       	ldi	r20, 0x00	; 0
     de8:	50 e0       	ldi	r21, 0x00	; 0
     dea:	09 c0       	rjmp	.+18     	; 0xdfe <main+0x290>
						case 5:
						printValue+=100000L; break;
     dec:	80 ea       	ldi	r24, 0xA0	; 160
     dee:	96 e8       	ldi	r25, 0x86	; 134
     df0:	a1 e0       	ldi	r26, 0x01	; 1
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	f1 cf       	rjmp	.-30     	; 0xdd8 <main+0x26a>
						case 6:
						printValue+=1000000L; break;
     df6:	20 e4       	ldi	r18, 0x40	; 64
     df8:	32 e4       	ldi	r19, 0x42	; 66
     dfa:	4f e0       	ldi	r20, 0x0F	; 15
     dfc:	50 e0       	ldi	r21, 0x00	; 0
     dfe:	22 0e       	add	r2, r18
     e00:	33 1e       	adc	r3, r19
     e02:	44 1e       	adc	r4, r20
     e04:	55 1e       	adc	r5, r21
					}
					if(printValue>10000000)
     e06:	31 e8       	ldi	r19, 0x81	; 129
     e08:	23 16       	cp	r2, r19
     e0a:	36 e9       	ldi	r19, 0x96	; 150
     e0c:	33 06       	cpc	r3, r19
     e0e:	38 e9       	ldi	r19, 0x98	; 152
     e10:	43 06       	cpc	r4, r19
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	53 06       	cpc	r5, r19
     e16:	0c f0       	brlt	.+2      	; 0xe1a <main+0x2ac>
     e18:	b5 c0       	rjmp	.+362    	; 0xf84 <main+0x416>
						printValue=10000000;
					keyPress=KEYPRESS_TIME;
     e1a:	40 ed       	ldi	r20, 0xD0	; 208
     e1c:	57 e0       	ldi	r21, 0x07	; 7
     e1e:	6b 96       	adiw	r28, 0x1b	; 27
     e20:	5f af       	sts	0x7f, r21
     e22:	4e af       	sts	0x7e, r20
     e24:	6b 97       	sbiw	r28, 0x1b	; 27
     e26:	d7 c0       	rjmp	.+430    	; 0xfd6 <main+0x468>
				}
				else if(buttons&0x0010){	//V button
     e28:	04 ff       	sbrs	r16, 4
     e2a:	55 c0       	rjmp	.+170    	; 0xed6 <main+0x368>
					switch (selectDigit){
     e2c:	63 96       	adiw	r28, 0x13	; 19
     e2e:	8e ad       	sts	0x6e, r24
     e30:	9f ad       	sts	0x6f, r25
     e32:	63 97       	sbiw	r28, 0x13	; 19
     e34:	83 30       	cpi	r24, 0x03	; 3
     e36:	91 05       	cpc	r25, r1
     e38:	51 f1       	breq	.+84     	; 0xe8e <main+0x320>
     e3a:	84 30       	cpi	r24, 0x04	; 4
     e3c:	91 05       	cpc	r25, r1
     e3e:	4c f4       	brge	.+18     	; 0xe52 <main+0x2e4>
     e40:	81 30       	cpi	r24, 0x01	; 1
     e42:	91 05       	cpc	r25, r1
     e44:	d1 f0       	breq	.+52     	; 0xe7a <main+0x30c>
     e46:	82 30       	cpi	r24, 0x02	; 2
     e48:	91 05       	cpc	r25, r1
     e4a:	e4 f4       	brge	.+56     	; 0xe84 <main+0x316>
     e4c:	00 97       	sbiw	r24, 0x00	; 0
     e4e:	79 f0       	breq	.+30     	; 0xe6e <main+0x300>
     e50:	3b c0       	rjmp	.+118    	; 0xec8 <main+0x35a>
     e52:	63 96       	adiw	r28, 0x13	; 19
     e54:	ae ad       	sts	0x6e, r26
     e56:	bf ad       	sts	0x6f, r27
     e58:	63 97       	sbiw	r28, 0x13	; 19
     e5a:	a5 30       	cpi	r26, 0x05	; 5
     e5c:	b1 05       	cpc	r27, r1
     e5e:	09 f1       	breq	.+66     	; 0xea2 <main+0x334>
     e60:	a5 30       	cpi	r26, 0x05	; 5
     e62:	b1 05       	cpc	r27, r1
     e64:	cc f0       	brlt	.+50     	; 0xe98 <main+0x32a>
     e66:	a6 30       	cpi	r26, 0x06	; 6
     e68:	b1 05       	cpc	r27, r1
     e6a:	71 f5       	brne	.+92     	; 0xec8 <main+0x35a>
     e6c:	23 c0       	rjmp	.+70     	; 0xeb4 <main+0x346>
						case 0:
							printValue--; break;
     e6e:	08 94       	sec
     e70:	21 08       	sbc	r2, r1
     e72:	31 08       	sbc	r3, r1
     e74:	41 08       	sbc	r4, r1
     e76:	51 08       	sbc	r5, r1
     e78:	25 c0       	rjmp	.+74     	; 0xec4 <main+0x356>
						case 1:
							printValue-=10; break;
     e7a:	26 ef       	ldi	r18, 0xF6	; 246
     e7c:	3f ef       	ldi	r19, 0xFF	; 255
     e7e:	4f ef       	ldi	r20, 0xFF	; 255
     e80:	5f ef       	ldi	r21, 0xFF	; 255
     e82:	13 c0       	rjmp	.+38     	; 0xeaa <main+0x33c>
						case 2:
							printValue-=100; break;
     e84:	8c e9       	ldi	r24, 0x9C	; 156
     e86:	9f ef       	ldi	r25, 0xFF	; 255
     e88:	af ef       	ldi	r26, 0xFF	; 255
     e8a:	bf ef       	ldi	r27, 0xFF	; 255
     e8c:	17 c0       	rjmp	.+46     	; 0xebc <main+0x34e>
						case 3:
							printValue-=1000L; break;
     e8e:	28 e1       	ldi	r18, 0x18	; 24
     e90:	3c ef       	ldi	r19, 0xFC	; 252
     e92:	4f ef       	ldi	r20, 0xFF	; 255
     e94:	5f ef       	ldi	r21, 0xFF	; 255
     e96:	09 c0       	rjmp	.+18     	; 0xeaa <main+0x33c>
						case 4:
							printValue-=10000L; break;
     e98:	80 ef       	ldi	r24, 0xF0	; 240
     e9a:	98 ed       	ldi	r25, 0xD8	; 216
     e9c:	af ef       	ldi	r26, 0xFF	; 255
     e9e:	bf ef       	ldi	r27, 0xFF	; 255
     ea0:	0d c0       	rjmp	.+26     	; 0xebc <main+0x34e>
						case 5:
							printValue-=100000L; break;
     ea2:	20 e6       	ldi	r18, 0x60	; 96
     ea4:	39 e7       	ldi	r19, 0x79	; 121
     ea6:	4e ef       	ldi	r20, 0xFE	; 254
     ea8:	5f ef       	ldi	r21, 0xFF	; 255
     eaa:	22 0e       	add	r2, r18
     eac:	33 1e       	adc	r3, r19
     eae:	44 1e       	adc	r4, r20
     eb0:	55 1e       	adc	r5, r21
     eb2:	08 c0       	rjmp	.+16     	; 0xec4 <main+0x356>
						case 6:
							printValue-=1000000L; break;
     eb4:	80 ec       	ldi	r24, 0xC0	; 192
     eb6:	9d eb       	ldi	r25, 0xBD	; 189
     eb8:	a0 ef       	ldi	r26, 0xF0	; 240
     eba:	bf ef       	ldi	r27, 0xFF	; 255
     ebc:	28 0e       	add	r2, r24
     ebe:	39 1e       	adc	r3, r25
     ec0:	4a 1e       	adc	r4, r26
     ec2:	5b 1e       	adc	r5, r27
					}
					if(printValue<0)
     ec4:	57 fc       	sbrc	r5, 7
     ec6:	6e c0       	rjmp	.+220    	; 0xfa4 <main+0x436>
						printValue=0;
					keyPress=KEYPRESS_TIME;
     ec8:	a0 ed       	ldi	r26, 0xD0	; 208
     eca:	b7 e0       	ldi	r27, 0x07	; 7
     ecc:	6b 96       	adiw	r28, 0x1b	; 27
     ece:	bf af       	sts	0x7f, r27
     ed0:	ae af       	sts	0x7e, r26
     ed2:	6b 97       	sbiw	r28, 0x1b	; 27
     ed4:	80 c0       	rjmp	.+256    	; 0xfd6 <main+0x468>
				}
				else if(buttons&0x0040){	//< button
     ed6:	06 ff       	sbrs	r16, 6
     ed8:	0e c0       	rjmp	.+28     	; 0xef6 <main+0x388>
					if(selectDigit<6)
     eda:	63 96       	adiw	r28, 0x13	; 19
     edc:	ee ad       	sts	0x6e, r30
     ede:	ff ad       	sts	0x6f, r31
     ee0:	63 97       	sbiw	r28, 0x13	; 19
     ee2:	e6 30       	cpi	r30, 0x06	; 6
     ee4:	f1 05       	cpc	r31, r1
     ee6:	0c f0       	brlt	.+2      	; 0xeea <main+0x37c>
     ee8:	69 c0       	rjmp	.+210    	; 0xfbc <main+0x44e>
						selectDigit++;
     eea:	31 96       	adiw	r30, 0x01	; 1
     eec:	63 96       	adiw	r28, 0x13	; 19
     eee:	ff af       	sts	0x7f, r31
     ef0:	ee af       	sts	0x7e, r30
     ef2:	63 97       	sbiw	r28, 0x13	; 19
     ef4:	6a c0       	rjmp	.+212    	; 0xfca <main+0x45c>
					keyPress=KEYPRESS_TIME;
				}
				else if(buttons&0x0020){	//> button
     ef6:	05 ff       	sbrs	r16, 5
     ef8:	6e c0       	rjmp	.+220    	; 0xfd6 <main+0x468>
					if(selectDigit!=0)
     efa:	63 96       	adiw	r28, 0x13	; 19
     efc:	4e ad       	sts	0x6e, r20
     efe:	5f ad       	sts	0x6f, r21
     f00:	63 97       	sbiw	r28, 0x13	; 19
     f02:	41 15       	cp	r20, r1
     f04:	51 05       	cpc	r21, r1
     f06:	09 f4       	brne	.+2      	; 0xf0a <main+0x39c>
     f08:	60 c0       	rjmp	.+192    	; 0xfca <main+0x45c>
						selectDigit--;
     f0a:	41 50       	subi	r20, 0x01	; 1
     f0c:	50 40       	sbci	r21, 0x00	; 0
     f0e:	63 96       	adiw	r28, 0x13	; 19
     f10:	5f af       	sts	0x7f, r21
     f12:	4e af       	sts	0x7e, r20
     f14:	63 97       	sbiw	r28, 0x13	; 19
					keyPress=KEYPRESS_TIME;
     f16:	80 ed       	ldi	r24, 0xD0	; 208
     f18:	97 e0       	ldi	r25, 0x07	; 7
     f1a:	6b 96       	adiw	r28, 0x1b	; 27
     f1c:	9f af       	sts	0x7f, r25
     f1e:	8e af       	sts	0x7e, r24
     f20:	6b 97       	sbiw	r28, 0x1b	; 27
     f22:	59 c0       	rjmp	.+178    	; 0xfd6 <main+0x468>
				}
			}
			else if((buttons&0x0008)){		//OK button pressed
     f24:	00 97       	sbiw	r24, 0x00	; 0
     f26:	09 f4       	brne	.+2      	; 0xf2a <main+0x3bc>
     f28:	58 c0       	rjmp	.+176    	; 0xfda <main+0x46c>
				blinkingMode=1;
				printValue=setValue;
				changeMode=1;
				if(mode==2)
					selectDigit=3;
				if(mode==3)
     f2a:	64 96       	adiw	r28, 0x14	; 20
     f2c:	9f ad       	sts	0x6f, r25
     f2e:	64 97       	sbiw	r28, 0x14	; 20
     f30:	93 30       	cpi	r25, 0x03	; 3
     f32:	39 f4       	brne	.+14     	; 0xf42 <main+0x3d4>
					selectDigit=5;
     f34:	a5 e0       	ldi	r26, 0x05	; 5
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	63 96       	adiw	r28, 0x13	; 19
     f3a:	bf af       	sts	0x7f, r27
     f3c:	ae af       	sts	0x7e, r26
     f3e:	63 97       	sbiw	r28, 0x13	; 19
     f40:	06 c0       	rjmp	.+12     	; 0xf4e <main+0x3e0>
				else 
					selectDigit=1;
     f42:	e1 e0       	ldi	r30, 0x01	; 1
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	63 96       	adiw	r28, 0x13	; 19
     f48:	ff af       	sts	0x7f, r31
     f4a:	ee af       	sts	0x7e, r30
     f4c:	63 97       	sbiw	r28, 0x13	; 19
				keyPress=KEYPRESS_TIME;
				writeDataTo74HC4094(0x00);
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	0e 94 01 02 	call	0x402	; 0x402 <writeDataTo74HC4094>
     f54:	64 96       	adiw	r28, 0x14	; 20
     f56:	7f ac       	sts	0xaf, r23
     f58:	64 97       	sbiw	r28, 0x14	; 20
				}
			}
			else if((buttons&0x0008)){		//OK button pressed
				newMode=mode;
				blinkingMode=1;
				printValue=setValue;
     f5a:	a1 96       	adiw	r28, 0x21	; 33
     f5c:	2c ac       	sts	0xac, r18
     f5e:	3d ac       	sts	0xad, r19
     f60:	4e ac       	sts	0xae, r20
     f62:	5f ac       	sts	0xaf, r21
     f64:	a1 97       	sbiw	r28, 0x21	; 33
					selectDigit=3;
				if(mode==3)
					selectDigit=5;
				else 
					selectDigit=1;
				keyPress=KEYPRESS_TIME;
     f66:	20 ed       	ldi	r18, 0xD0	; 208
     f68:	37 e0       	ldi	r19, 0x07	; 7
     f6a:	6b 96       	adiw	r28, 0x1b	; 27
     f6c:	3f af       	sts	0x7f, r19
     f6e:	2e af       	sts	0x7e, r18
     f70:	6b 97       	sbiw	r28, 0x1b	; 27
			}
			else if((buttons&0x0008)){		//OK button pressed
				newMode=mode;
				blinkingMode=1;
				printValue=setValue;
				changeMode=1;
     f72:	66 24       	eor	r6, r6
     f74:	63 94       	inc	r6
					keyPress=KEYPRESS_TIME;
				}
			}
			else if((buttons&0x0008)){		//OK button pressed
				newMode=mode;
				blinkingMode=1;
     f76:	41 e0       	ldi	r20, 0x01	; 1
     f78:	50 e0       	ldi	r21, 0x00	; 0
     f7a:	6d 96       	adiw	r28, 0x1d	; 29
     f7c:	5f af       	sts	0x7f, r21
     f7e:	4e af       	sts	0x7e, r20
     f80:	6d 97       	sbiw	r28, 0x1d	; 29
     f82:	2b c0       	rjmp	.+86     	; 0xfda <main+0x46c>
						case 6:
						printValue+=1000000L; break;
					}
					if(printValue>10000000)
						printValue=10000000;
					keyPress=KEYPRESS_TIME;
     f84:	80 ed       	ldi	r24, 0xD0	; 208
     f86:	97 e0       	ldi	r25, 0x07	; 7
     f88:	6b 96       	adiw	r28, 0x1b	; 27
     f8a:	9f af       	sts	0x7f, r25
     f8c:	8e af       	sts	0x7e, r24
     f8e:	6b 97       	sbiw	r28, 0x1b	; 27
						case 5:
						printValue+=100000L; break;
						case 6:
						printValue+=1000000L; break;
					}
					if(printValue>10000000)
     f90:	66 24       	eor	r6, r6
     f92:	63 94       	inc	r6
						printValue=10000000;
     f94:	f0 e8       	ldi	r31, 0x80	; 128
     f96:	2f 2e       	mov	r2, r31
     f98:	f6 e9       	ldi	r31, 0x96	; 150
     f9a:	3f 2e       	mov	r3, r31
     f9c:	f8 e9       	ldi	r31, 0x98	; 152
     f9e:	4f 2e       	mov	r4, r31
     fa0:	51 2c       	mov	r5, r1
     fa2:	1b c0       	rjmp	.+54     	; 0xfda <main+0x46c>
						case 6:
							printValue-=1000000L; break;
					}
					if(printValue<0)
						printValue=0;
					keyPress=KEYPRESS_TIME;
     fa4:	a0 ed       	ldi	r26, 0xD0	; 208
     fa6:	b7 e0       	ldi	r27, 0x07	; 7
     fa8:	6b 96       	adiw	r28, 0x1b	; 27
     faa:	bf af       	sts	0x7f, r27
     fac:	ae af       	sts	0x7e, r26
     fae:	6b 97       	sbiw	r28, 0x1b	; 27
						case 5:
							printValue-=100000L; break;
						case 6:
							printValue-=1000000L; break;
					}
					if(printValue<0)
     fb0:	66 24       	eor	r6, r6
     fb2:	63 94       	inc	r6
						printValue=0;
     fb4:	22 24       	eor	r2, r2
     fb6:	33 24       	eor	r3, r3
     fb8:	21 01       	movw	r4, r2
     fba:	0f c0       	rjmp	.+30     	; 0xfda <main+0x46c>
					keyPress=KEYPRESS_TIME;
				}
				else if(buttons&0x0040){	//< button
					if(selectDigit<6)
						selectDigit++;
					keyPress=KEYPRESS_TIME;
     fbc:	e0 ed       	ldi	r30, 0xD0	; 208
     fbe:	f7 e0       	ldi	r31, 0x07	; 7
     fc0:	6b 96       	adiw	r28, 0x1b	; 27
     fc2:	ff af       	sts	0x7f, r31
     fc4:	ee af       	sts	0x7e, r30
     fc6:	6b 97       	sbiw	r28, 0x1b	; 27
     fc8:	06 c0       	rjmp	.+12     	; 0xfd6 <main+0x468>
				}
				else if(buttons&0x0020){	//> button
					if(selectDigit!=0)
						selectDigit--;
					keyPress=KEYPRESS_TIME;
     fca:	20 ed       	ldi	r18, 0xD0	; 208
     fcc:	37 e0       	ldi	r19, 0x07	; 7
     fce:	6b 96       	adiw	r28, 0x1b	; 27
     fd0:	3f af       	sts	0x7f, r19
     fd2:	2e af       	sts	0x7e, r18
     fd4:	6b 97       	sbiw	r28, 0x1b	; 27
					if(selectDigit<6)
						selectDigit++;
					keyPress=KEYPRESS_TIME;
				}
				else if(buttons&0x0020){	//> button
					if(selectDigit!=0)
     fd6:	66 24       	eor	r6, r6
     fd8:	63 94       	inc	r6
				keyPress=KEYPRESS_TIME;
				writeDataTo74HC4094(0x00);
			}
		
			/*mode buttons*/
			if(buttons&0x0002){	// Voltage read mode
     fda:	01 ff       	sbrs	r16, 1
     fdc:	19 c0       	rjmp	.+50     	; 0x1010 <main+0x4a2>
				printValue=setValue;
				newMode=10;
				changeMode=1;
				blinkingMode=1;
				keyPress=KEYPRESS_TIME;
				writeDataTo74HC4094(0x00);
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	0e 94 01 02 	call	0x402	; 0x402 <writeDataTo74HC4094>
				writeDataTo74HC4094(0x00);
			}
		
			/*mode buttons*/
			if(buttons&0x0002){	// Voltage read mode
				printValue=setValue;
     fe4:	a1 96       	adiw	r28, 0x21	; 33
     fe6:	2c ac       	sts	0xac, r18
     fe8:	3d ac       	sts	0xad, r19
     fea:	4e ac       	sts	0xae, r20
     fec:	5f ac       	sts	0xaf, r21
     fee:	a1 97       	sbiw	r28, 0x21	; 33
				newMode=10;
				changeMode=1;
				blinkingMode=1;
				keyPress=KEYPRESS_TIME;
     ff0:	40 ed       	ldi	r20, 0xD0	; 208
     ff2:	57 e0       	ldi	r21, 0x07	; 7
     ff4:	6b 96       	adiw	r28, 0x1b	; 27
     ff6:	5f af       	sts	0x7f, r21
     ff8:	4e af       	sts	0x7e, r20
     ffa:	6b 97       	sbiw	r28, 0x1b	; 27
		
			/*mode buttons*/
			if(buttons&0x0002){	// Voltage read mode
				printValue=setValue;
				newMode=10;
				changeMode=1;
     ffc:	66 24       	eor	r6, r6
     ffe:	63 94       	inc	r6
				blinkingMode=1;
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	6d 96       	adiw	r28, 0x1d	; 29
    1006:	9f af       	sts	0x7f, r25
    1008:	8e af       	sts	0x7e, r24
    100a:	6d 97       	sbiw	r28, 0x1d	; 29
			}
		
			/*mode buttons*/
			if(buttons&0x0002){	// Voltage read mode
				printValue=setValue;
				newMode=10;
    100c:	ea e0       	ldi	r30, 0x0A	; 10
    100e:	7e 2e       	mov	r7, r30
				changeMode=1;
				blinkingMode=1;
				keyPress=KEYPRESS_TIME;
				writeDataTo74HC4094(0x00);
			}
			if(buttons&0x0001){	//current read mode (dangerous)
    1010:	00 ff       	sbrs	r16, 0
    1012:	19 c0       	rjmp	.+50     	; 0x1046 <main+0x4d8>
				printValue=setValue;
				newMode=11;
				changeMode=1;
				blinkingMode=1;
				keyPress=KEYPRESS_TIME;
				writeDataTo74HC4094(0x00);
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	0e 94 01 02 	call	0x402	; 0x402 <writeDataTo74HC4094>
				blinkingMode=1;
				keyPress=KEYPRESS_TIME;
				writeDataTo74HC4094(0x00);
			}
			if(buttons&0x0001){	//current read mode (dangerous)
				printValue=setValue;
    101a:	a1 96       	adiw	r28, 0x21	; 33
    101c:	2c ac       	sts	0xac, r18
    101e:	3d ac       	sts	0xad, r19
    1020:	4e ac       	sts	0xae, r20
    1022:	5f ac       	sts	0xaf, r21
    1024:	a1 97       	sbiw	r28, 0x21	; 33
				newMode=11;
				changeMode=1;
				blinkingMode=1;
				keyPress=KEYPRESS_TIME;
    1026:	a0 ed       	ldi	r26, 0xD0	; 208
    1028:	b7 e0       	ldi	r27, 0x07	; 7
    102a:	6b 96       	adiw	r28, 0x1b	; 27
    102c:	bf af       	sts	0x7f, r27
    102e:	ae af       	sts	0x7e, r26
    1030:	6b 97       	sbiw	r28, 0x1b	; 27
				writeDataTo74HC4094(0x00);
			}
			if(buttons&0x0001){	//current read mode (dangerous)
				printValue=setValue;
				newMode=11;
				changeMode=1;
    1032:	66 24       	eor	r6, r6
    1034:	63 94       	inc	r6
				blinkingMode=1;
    1036:	e1 e0       	ldi	r30, 0x01	; 1
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	6d 96       	adiw	r28, 0x1d	; 29
    103c:	ff af       	sts	0x7f, r31
    103e:	ee af       	sts	0x7e, r30
    1040:	6d 97       	sbiw	r28, 0x1d	; 29
				keyPress=KEYPRESS_TIME;
				writeDataTo74HC4094(0x00);
			}
			if(buttons&0x0001){	//current read mode (dangerous)
				printValue=setValue;
				newMode=11;
    1042:	7b e0       	ldi	r23, 0x0B	; 11
    1044:	77 2e       	mov	r7, r23
				changeMode=1;
				blinkingMode=1;
				keyPress=KEYPRESS_TIME;
				writeDataTo74HC4094(0x00);
			}
			if(buttons&0x1000){	//I
    1046:	14 ff       	sbrs	r17, 4
    1048:	1d c0       	rjmp	.+58     	; 0x1084 <main+0x516>
				newMode=3;
				blinkingMode=1;
				changeMode=1;
				selectDigit=0;
				keyPress=KEYPRESS_TIME;
				writeDataTo74HC4094(0x00);
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	0e 94 01 02 	call	0x402	; 0x402 <writeDataTo74HC4094>
				blinkingMode=1;
				keyPress=KEYPRESS_TIME;
				writeDataTo74HC4094(0x00);
			}
			if(buttons&0x1000){	//I
				printValue=setValue;
    1050:	a1 96       	adiw	r28, 0x21	; 33
    1052:	2c ac       	sts	0xac, r18
    1054:	3d ac       	sts	0xad, r19
    1056:	4e ac       	sts	0xae, r20
    1058:	5f ac       	sts	0xaf, r21
    105a:	a1 97       	sbiw	r28, 0x21	; 33
				newMode=3;
				blinkingMode=1;
				changeMode=1;
				selectDigit=0;
				keyPress=KEYPRESS_TIME;
    105c:	20 ed       	ldi	r18, 0xD0	; 208
    105e:	37 e0       	ldi	r19, 0x07	; 7
    1060:	6b 96       	adiw	r28, 0x1b	; 27
    1062:	3f af       	sts	0x7f, r19
    1064:	2e af       	sts	0x7e, r18
    1066:	6b 97       	sbiw	r28, 0x1b	; 27
			if(buttons&0x1000){	//I
				printValue=setValue;
				newMode=3;
				blinkingMode=1;
				changeMode=1;
				selectDigit=0;
    1068:	63 96       	adiw	r28, 0x13	; 19
    106a:	1f ae       	sts	0xbf, r17
    106c:	1e ae       	sts	0xbe, r17
    106e:	63 97       	sbiw	r28, 0x13	; 19
			}
			if(buttons&0x1000){	//I
				printValue=setValue;
				newMode=3;
				blinkingMode=1;
				changeMode=1;
    1070:	66 24       	eor	r6, r6
    1072:	63 94       	inc	r6
				writeDataTo74HC4094(0x00);
			}
			if(buttons&0x1000){	//I
				printValue=setValue;
				newMode=3;
				blinkingMode=1;
    1074:	41 e0       	ldi	r20, 0x01	; 1
    1076:	50 e0       	ldi	r21, 0x00	; 0
    1078:	6d 96       	adiw	r28, 0x1d	; 29
    107a:	5f af       	sts	0x7f, r21
    107c:	4e af       	sts	0x7e, r20
    107e:	6d 97       	sbiw	r28, 0x1d	; 29
				keyPress=KEYPRESS_TIME;
				writeDataTo74HC4094(0x00);
			}
			if(buttons&0x1000){	//I
				printValue=setValue;
				newMode=3;
    1080:	63 e0       	ldi	r22, 0x03	; 3
    1082:	76 2e       	mov	r7, r22
				changeMode=1;
				selectDigit=0;
				keyPress=KEYPRESS_TIME;
				writeDataTo74HC4094(0x00);
			}
			if(buttons&0x2000){	//U
    1084:	15 ff       	sbrs	r17, 5
    1086:	1d c0       	rjmp	.+58     	; 0x10c2 <main+0x554>
				newMode=2;
				blinkingMode=1;
				changeMode=1;
				selectDigit=0;
				keyPress=KEYPRESS_TIME;
				writeDataTo74HC4094(0x00);
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	0e 94 01 02 	call	0x402	; 0x402 <writeDataTo74HC4094>
				selectDigit=0;
				keyPress=KEYPRESS_TIME;
				writeDataTo74HC4094(0x00);
			}
			if(buttons&0x2000){	//U
				printValue=setValue;
    108e:	a1 96       	adiw	r28, 0x21	; 33
    1090:	2c ac       	sts	0xac, r18
    1092:	3d ac       	sts	0xad, r19
    1094:	4e ac       	sts	0xae, r20
    1096:	5f ac       	sts	0xaf, r21
    1098:	a1 97       	sbiw	r28, 0x21	; 33
				newMode=2;
				blinkingMode=1;
				changeMode=1;
				selectDigit=0;
				keyPress=KEYPRESS_TIME;
    109a:	80 ed       	ldi	r24, 0xD0	; 208
    109c:	97 e0       	ldi	r25, 0x07	; 7
    109e:	6b 96       	adiw	r28, 0x1b	; 27
    10a0:	9f af       	sts	0x7f, r25
    10a2:	8e af       	sts	0x7e, r24
    10a4:	6b 97       	sbiw	r28, 0x1b	; 27
			if(buttons&0x2000){	//U
				printValue=setValue;
				newMode=2;
				blinkingMode=1;
				changeMode=1;
				selectDigit=0;
    10a6:	63 96       	adiw	r28, 0x13	; 19
    10a8:	1f ae       	sts	0xbf, r17
    10aa:	1e ae       	sts	0xbe, r17
    10ac:	63 97       	sbiw	r28, 0x13	; 19
			}
			if(buttons&0x2000){	//U
				printValue=setValue;
				newMode=2;
				blinkingMode=1;
				changeMode=1;
    10ae:	66 24       	eor	r6, r6
    10b0:	63 94       	inc	r6
				writeDataTo74HC4094(0x00);
			}
			if(buttons&0x2000){	//U
				printValue=setValue;
				newMode=2;
				blinkingMode=1;
    10b2:	a1 e0       	ldi	r26, 0x01	; 1
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	6d 96       	adiw	r28, 0x1d	; 29
    10b8:	bf af       	sts	0x7f, r27
    10ba:	ae af       	sts	0x7e, r26
    10bc:	6d 97       	sbiw	r28, 0x1d	; 29
				keyPress=KEYPRESS_TIME;
				writeDataTo74HC4094(0x00);
			}
			if(buttons&0x2000){	//U
				printValue=setValue;
				newMode=2;
    10be:	32 e0       	ldi	r19, 0x02	; 2
    10c0:	73 2e       	mov	r7, r19
				changeMode=1;
				selectDigit=0;
				keyPress=KEYPRESS_TIME;
				writeDataTo74HC4094(0x00);
			}
			if(buttons&0x4000){	//R
    10c2:	16 ff       	sbrs	r17, 6
    10c4:	1d c0       	rjmp	.+58     	; 0x1100 <main+0x592>
				newMode=1;
				blinkingMode=1;
				changeMode=1;
				selectDigit=0;
				keyPress=KEYPRESS_TIME;
				writeDataTo74HC4094(0x00);
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	0e 94 01 02 	call	0x402	; 0x402 <writeDataTo74HC4094>
				selectDigit=0;
				keyPress=KEYPRESS_TIME;
				writeDataTo74HC4094(0x00);
			}
			if(buttons&0x4000){	//R
				printValue=setValue;
    10cc:	a1 96       	adiw	r28, 0x21	; 33
    10ce:	2c ac       	sts	0xac, r18
    10d0:	3d ac       	sts	0xad, r19
    10d2:	4e ac       	sts	0xae, r20
    10d4:	5f ac       	sts	0xaf, r21
    10d6:	a1 97       	sbiw	r28, 0x21	; 33
				newMode=1;
				blinkingMode=1;
				changeMode=1;
				selectDigit=0;
				keyPress=KEYPRESS_TIME;
    10d8:	e0 ed       	ldi	r30, 0xD0	; 208
    10da:	f7 e0       	ldi	r31, 0x07	; 7
    10dc:	6b 96       	adiw	r28, 0x1b	; 27
    10de:	ff af       	sts	0x7f, r31
    10e0:	ee af       	sts	0x7e, r30
    10e2:	6b 97       	sbiw	r28, 0x1b	; 27
			if(buttons&0x4000){	//R
				printValue=setValue;
				newMode=1;
				blinkingMode=1;
				changeMode=1;
				selectDigit=0;
    10e4:	63 96       	adiw	r28, 0x13	; 19
    10e6:	1f ae       	sts	0xbf, r17
    10e8:	1e ae       	sts	0xbe, r17
    10ea:	63 97       	sbiw	r28, 0x13	; 19
			}
			if(buttons&0x4000){	//R
				printValue=setValue;
				newMode=1;
				blinkingMode=1;
				changeMode=1;
    10ec:	66 24       	eor	r6, r6
    10ee:	63 94       	inc	r6
				writeDataTo74HC4094(0x00);
			}
			if(buttons&0x4000){	//R
				printValue=setValue;
				newMode=1;
				blinkingMode=1;
    10f0:	21 e0       	ldi	r18, 0x01	; 1
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	6d 96       	adiw	r28, 0x1d	; 29
    10f6:	3f af       	sts	0x7f, r19
    10f8:	2e af       	sts	0x7e, r18
    10fa:	6d 97       	sbiw	r28, 0x1d	; 29
				keyPress=KEYPRESS_TIME;
				writeDataTo74HC4094(0x00);
			}
			if(buttons&0x4000){	//R
				printValue=setValue;
				newMode=1;
    10fc:	77 24       	eor	r7, r7
    10fe:	73 94       	inc	r7
				changeMode=1;
				selectDigit=0;
				keyPress=KEYPRESS_TIME;
				writeDataTo74HC4094(0x00);
			}
			if(buttons&0x8000){	//P
    1100:	17 ff       	sbrs	r17, 7
    1102:	26 c0       	rjmp	.+76     	; 0x1150 <main+0x5e2>
				newMode=0;
				blinkingMode=1;
				changeMode=1;
				selectDigit=0;
				keyPress=KEYPRESS_TIME;
				writeDataTo74HC4094(0x00);
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	0e 94 01 02 	call	0x402	; 0x402 <writeDataTo74HC4094>
				selectDigit=0;
				keyPress=KEYPRESS_TIME;
				writeDataTo74HC4094(0x00);
			}
			if(buttons&0x8000){	//P
				printValue=setValue;
    110a:	a1 96       	adiw	r28, 0x21	; 33
    110c:	2c ac       	sts	0xac, r18
    110e:	3d ac       	sts	0xad, r19
    1110:	4e ac       	sts	0xae, r20
    1112:	5f ac       	sts	0xaf, r21
    1114:	a1 97       	sbiw	r28, 0x21	; 33
				newMode=0;
				blinkingMode=1;
				changeMode=1;
				selectDigit=0;
				keyPress=KEYPRESS_TIME;
    1116:	40 ed       	ldi	r20, 0xD0	; 208
    1118:	57 e0       	ldi	r21, 0x07	; 7
    111a:	6b 96       	adiw	r28, 0x1b	; 27
    111c:	5f af       	sts	0x7f, r21
    111e:	4e af       	sts	0x7e, r20
    1120:	6b 97       	sbiw	r28, 0x1b	; 27
			if(buttons&0x8000){	//P
				printValue=setValue;
				newMode=0;
				blinkingMode=1;
				changeMode=1;
				selectDigit=0;
    1122:	63 96       	adiw	r28, 0x13	; 19
    1124:	1f ae       	sts	0xbf, r17
    1126:	1e ae       	sts	0xbe, r17
    1128:	63 97       	sbiw	r28, 0x13	; 19
			}
			if(buttons&0x8000){	//P
				printValue=setValue;
				newMode=0;
				blinkingMode=1;
				changeMode=1;
    112a:	66 24       	eor	r6, r6
    112c:	63 94       	inc	r6
				writeDataTo74HC4094(0x00);
			}
			if(buttons&0x8000){	//P
				printValue=setValue;
				newMode=0;
				blinkingMode=1;
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	6d 96       	adiw	r28, 0x1d	; 29
    1134:	9f af       	sts	0x7f, r25
    1136:	8e af       	sts	0x7e, r24
    1138:	6d 97       	sbiw	r28, 0x1d	; 29
				keyPress=KEYPRESS_TIME;
				writeDataTo74HC4094(0x00);
			}
			if(buttons&0x8000){	//P
				printValue=setValue;
				newMode=0;
    113a:	77 24       	eor	r7, r7
    113c:	09 c0       	rjmp	.+18     	; 0x1150 <main+0x5e2>
				keyPress=KEYPRESS_TIME;
				writeDataTo74HC4094(0x00);
			}
		}
		else
			keyPress--;	
    113e:	6b 96       	adiw	r28, 0x1b	; 27
    1140:	ae ad       	sts	0x6e, r26
    1142:	bf ad       	sts	0x6f, r27
    1144:	6b 97       	sbiw	r28, 0x1b	; 27
    1146:	11 97       	sbiw	r26, 0x01	; 1
    1148:	6b 96       	adiw	r28, 0x1b	; 27
    114a:	bf af       	sts	0x7f, r27
    114c:	ae af       	sts	0x7e, r26
    114e:	6b 97       	sbiw	r28, 0x1b	; 27
		//_delay_ms(1);
			
		/*---------------------------------------------------------------ADC---------------------------------------------------------------*/
		uint32_t dataFromADC=readFromADC(DATA_REG);
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	0e 94 47 02 	call	0x48e	; 0x48e <readFromADC>
    1156:	6b 01       	movw	r12, r22
    1158:	7c 01       	movw	r14, r24
		static long long ADC1_Voltage=0;
		static long long ADC2_Voltage=0;
		static uint8_t channelCounter=0;
		static uint16_t FFcounter=0;
		if(dataFromADC!=0xFFFFFFFF){
    115a:	6f 3f       	cpi	r22, 0xFF	; 255
    115c:	bf ef       	ldi	r27, 0xFF	; 255
    115e:	7b 07       	cpc	r23, r27
    1160:	bf ef       	ldi	r27, 0xFF	; 255
    1162:	8b 07       	cpc	r24, r27
    1164:	bf ef       	ldi	r27, 0xFF	; 255
    1166:	9b 07       	cpc	r25, r27
    1168:	09 f4       	brne	.+2      	; 0x116c <main+0x5fe>
    116a:	f2 c2       	rjmp	.+1508   	; 0x1750 <main+0xbe2>
			currentVoltage = (uint32_t)reverse((uint8_t)dataFromADC)*256*256+(uint32_t)reverse((uint8_t)(dataFromADC>>8))*256+(uint32_t)reverse((uint8_t)(dataFromADC>>16));
    116c:	86 2f       	mov	r24, r22
    116e:	0e 94 a4 02 	call	0x548	; 0x548 <reverse>
    1172:	18 2f       	mov	r17, r24
    1174:	8d 2d       	mov	r24, r13
    1176:	0e 94 a4 02 	call	0x548	; 0x548 <reverse>
    117a:	08 2f       	mov	r16, r24
    117c:	8e 2d       	mov	r24, r14
    117e:	0e 94 a4 02 	call	0x548	; 0x548 <reverse>
    1182:	41 2f       	mov	r20, r17
    1184:	50 e0       	ldi	r21, 0x00	; 0
    1186:	60 e0       	ldi	r22, 0x00	; 0
    1188:	70 e0       	ldi	r23, 0x00	; 0
    118a:	76 2f       	mov	r23, r22
    118c:	65 2f       	mov	r22, r21
    118e:	54 2f       	mov	r21, r20
    1190:	44 27       	eor	r20, r20
    1192:	40 0f       	add	r20, r16
    1194:	51 1d       	adc	r21, r1
    1196:	61 1d       	adc	r22, r1
    1198:	71 1d       	adc	r23, r1
    119a:	cc 24       	eor	r12, r12
    119c:	d4 2e       	mov	r13, r20
    119e:	e5 2e       	mov	r14, r21
    11a0:	f6 2e       	mov	r15, r22
    11a2:	c8 0e       	add	r12, r24
    11a4:	d1 1c       	adc	r13, r1
    11a6:	e1 1c       	adc	r14, r1
    11a8:	f1 1c       	adc	r15, r1
			//if(control_register==0xA281FF){	//ADC2 choosed
			
			if(mode==10){	//read V mode
    11aa:	64 96       	adiw	r28, 0x14	; 20
    11ac:	ef ad       	sts	0x6f, r30
    11ae:	64 97       	sbiw	r28, 0x14	; 20
    11b0:	ea 30       	cpi	r30, 0x0A	; 10
    11b2:	89 f4       	brne	.+34     	; 0x11d6 <main+0x668>
				if(select_ADC_Channel==1){	//change to channel ADC2
    11b4:	a5 96       	adiw	r28, 0x25	; 37
    11b6:	ff ad       	sts	0x6f, r31
    11b8:	a5 97       	sbiw	r28, 0x25	; 37
    11ba:	f1 30       	cpi	r31, 0x01	; 1
    11bc:	51 f4       	brne	.+20     	; 0x11d2 <main+0x664>
					control_register=0xA281FF;
					select_ADC_Channel=2;
					writeToADC(control_register);
    11be:	6f ef       	ldi	r22, 0xFF	; 255
    11c0:	71 e8       	ldi	r23, 0x81	; 129
    11c2:	82 ea       	ldi	r24, 0xA2	; 162
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	0e 94 1b 02 	call	0x436	; 0x436 <writeToADC>
			//if(control_register==0xA281FF){	//ADC2 choosed
			
			if(mode==10){	//read V mode
				if(select_ADC_Channel==1){	//change to channel ADC2
					control_register=0xA281FF;
					select_ADC_Channel=2;
    11ca:	22 e0       	ldi	r18, 0x02	; 2
    11cc:	a5 96       	adiw	r28, 0x25	; 37
    11ce:	2f af       	sts	0x7f, r18
    11d0:	a5 97       	sbiw	r28, 0x25	; 37
					writeToADC(control_register);
				}
				channelCounter=0;	//it prevent switching channels
    11d2:	10 92 9e 00 	sts	0x009E, r1
    11d6:	97 01       	movw	r18, r14
    11d8:	86 01       	movw	r16, r12
					control_register=0xA281FF;
					writeToADC(control_register);
				}					*/
			}				
				
			if(select_ADC_Channel==2){
    11da:	a5 96       	adiw	r28, 0x25	; 37
    11dc:	8f ad       	sts	0x6f, r24
    11de:	a5 97       	sbiw	r28, 0x25	; 37
    11e0:	82 30       	cpi	r24, 0x02	; 2
    11e2:	09 f0       	breq	.+2      	; 0x11e6 <main+0x678>
    11e4:	00 c2       	rjmp	.+1024   	; 0x15e6 <main+0xa78>
				if(mode!=10)
    11e6:	64 96       	adiw	r28, 0x14	; 20
    11e8:	9f ad       	sts	0x6f, r25
    11ea:	64 97       	sbiw	r28, 0x14	; 20
					ADC2_Voltage=((long long)currentVoltage-(long long)8388608)*(long long)2500000*16/(long long)8388608;
    11ec:	e1 2f       	mov	r30, r17
					writeToADC(control_register);
				}					*/
			}				
				
			if(select_ADC_Channel==2){
				if(mode!=10)
    11ee:	9a 30       	cpi	r25, 0x0A	; 10
    11f0:	09 f4       	brne	.+2      	; 0x11f4 <main+0x686>
    11f2:	8c c0       	rjmp	.+280    	; 0x130c <main+0x79e>
					ADC2_Voltage=((long long)currentVoltage-(long long)8388608)*(long long)2500000*16/(long long)8388608;
    11f4:	92 2f       	mov	r25, r18
    11f6:	83 2f       	mov	r24, r19
    11f8:	2c 2d       	mov	r18, r12
    11fa:	3e 2f       	mov	r19, r30
    11fc:	49 2f       	mov	r20, r25
    11fe:	58 2f       	mov	r21, r24
    1200:	60 e0       	ldi	r22, 0x00	; 0
    1202:	70 e0       	ldi	r23, 0x00	; 0
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	aa 24       	eor	r10, r10
    120a:	ba e5       	ldi	r27, 0x5A	; 90
    120c:	bb 2e       	mov	r11, r27
    120e:	12 e6       	ldi	r17, 0x62	; 98
    1210:	c1 2e       	mov	r12, r17
    1212:	02 e0       	ldi	r16, 0x02	; 2
    1214:	d0 2e       	mov	r13, r16
    1216:	ee 24       	eor	r14, r14
    1218:	ff 24       	eor	r15, r15
    121a:	00 e0       	ldi	r16, 0x00	; 0
    121c:	10 e0       	ldi	r17, 0x00	; 0
    121e:	0e 94 76 04 	call	0x8ec	; 0x8ec <__muldi3>
    1222:	f9 01       	movw	r30, r18
    1224:	7a 01       	movw	r14, r20
    1226:	26 2f       	mov	r18, r22
    1228:	2d 52       	subi	r18, 0x2D	; 45
    122a:	11 e0       	ldi	r17, 0x01	; 1
    122c:	26 17       	cp	r18, r22
    122e:	08 f0       	brcs	.+2      	; 0x1232 <main+0x6c4>
    1230:	10 e0       	ldi	r17, 0x00	; 0
    1232:	02 0f       	add	r16, r18
    1234:	31 e0       	ldi	r19, 0x01	; 1
    1236:	02 17       	cp	r16, r18
    1238:	08 f0       	brcs	.+2      	; 0x123c <main+0x6ce>
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	13 2b       	or	r17, r19
    123e:	27 2f       	mov	r18, r23
    1240:	22 53       	subi	r18, 0x32	; 50
    1242:	b1 e0       	ldi	r27, 0x01	; 1
    1244:	27 17       	cp	r18, r23
    1246:	08 f0       	brcs	.+2      	; 0x124a <main+0x6dc>
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	12 0f       	add	r17, r18
    124c:	31 e0       	ldi	r19, 0x01	; 1
    124e:	12 17       	cp	r17, r18
    1250:	08 f0       	brcs	.+2      	; 0x1254 <main+0x6e6>
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	b3 2b       	or	r27, r19
    1256:	28 2f       	mov	r18, r24
    1258:	22 50       	subi	r18, 0x02	; 2
    125a:	31 e0       	ldi	r19, 0x01	; 1
    125c:	28 17       	cp	r18, r24
    125e:	08 f0       	brcs	.+2      	; 0x1262 <main+0x6f4>
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	b2 0f       	add	r27, r18
    1264:	a1 e0       	ldi	r26, 0x01	; 1
    1266:	b2 17       	cp	r27, r18
    1268:	08 f0       	brcs	.+2      	; 0x126c <main+0x6fe>
    126a:	a0 e0       	ldi	r26, 0x00	; 0
    126c:	a3 2b       	or	r26, r19
    126e:	91 50       	subi	r25, 0x01	; 1
    1270:	a9 0f       	add	r26, r25
    1272:	9f 01       	movw	r18, r30
    1274:	a7 01       	movw	r20, r14
    1276:	b8 01       	movw	r22, r16
    1278:	8b 2f       	mov	r24, r27
    127a:	9a 2f       	mov	r25, r26
    127c:	a7 ff       	sbrs	r26, 7
    127e:	32 c0       	rjmp	.+100    	; 0x12e4 <main+0x776>
    1280:	21 50       	subi	r18, 0x01	; 1
    1282:	31 e0       	ldi	r19, 0x01	; 1
    1284:	2e 17       	cp	r18, r30
    1286:	08 f0       	brcs	.+2      	; 0x128a <main+0x71c>
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	8f 2f       	mov	r24, r31
    128c:	81 50       	subi	r24, 0x01	; 1
    128e:	41 e0       	ldi	r20, 0x01	; 1
    1290:	8f 17       	cp	r24, r31
    1292:	08 f0       	brcs	.+2      	; 0x1296 <main+0x728>
    1294:	40 e0       	ldi	r20, 0x00	; 0
    1296:	38 0f       	add	r19, r24
    1298:	91 e0       	ldi	r25, 0x01	; 1
    129a:	38 17       	cp	r19, r24
    129c:	08 f0       	brcs	.+2      	; 0x12a0 <main+0x732>
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	49 2b       	or	r20, r25
    12a2:	8e 2d       	mov	r24, r14
    12a4:	81 58       	subi	r24, 0x81	; 129
    12a6:	91 e0       	ldi	r25, 0x01	; 1
    12a8:	8e 15       	cp	r24, r14
    12aa:	08 f0       	brcs	.+2      	; 0x12ae <main+0x740>
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	48 0f       	add	r20, r24
    12b0:	51 e0       	ldi	r21, 0x01	; 1
    12b2:	48 17       	cp	r20, r24
    12b4:	08 f0       	brcs	.+2      	; 0x12b8 <main+0x74a>
    12b6:	50 e0       	ldi	r21, 0x00	; 0
    12b8:	59 2b       	or	r21, r25
    12ba:	5f 0d       	add	r21, r15
    12bc:	61 e0       	ldi	r22, 0x01	; 1
    12be:	5f 15       	cp	r21, r15
    12c0:	08 f0       	brcs	.+2      	; 0x12c4 <main+0x756>
    12c2:	60 e0       	ldi	r22, 0x00	; 0
    12c4:	60 0f       	add	r22, r16
    12c6:	71 e0       	ldi	r23, 0x01	; 1
    12c8:	60 17       	cp	r22, r16
    12ca:	08 f0       	brcs	.+2      	; 0x12ce <main+0x760>
    12cc:	70 e0       	ldi	r23, 0x00	; 0
    12ce:	71 0f       	add	r23, r17
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	71 17       	cp	r23, r17
    12d4:	08 f0       	brcs	.+2      	; 0x12d8 <main+0x76a>
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	8b 0f       	add	r24, r27
    12da:	91 e0       	ldi	r25, 0x01	; 1
    12dc:	8b 17       	cp	r24, r27
    12de:	08 f0       	brcs	.+2      	; 0x12e2 <main+0x774>
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	9a 0f       	add	r25, r26
    12e4:	07 e1       	ldi	r16, 0x17	; 23
    12e6:	0e 94 49 05 	call	0xa92	; 0xa92 <__ashrdi3>
    12ea:	20 93 9f 00 	sts	0x009F, r18
    12ee:	30 93 a0 00 	sts	0x00A0, r19
    12f2:	40 93 a1 00 	sts	0x00A1, r20
    12f6:	50 93 a2 00 	sts	0x00A2, r21
    12fa:	60 93 a3 00 	sts	0x00A3, r22
    12fe:	70 93 a4 00 	sts	0x00A4, r23
    1302:	80 93 a5 00 	sts	0x00A5, r24
    1306:	90 93 a6 00 	sts	0x00A6, r25
    130a:	58 c1       	rjmp	.+688    	; 0x15bc <main+0xa4e>
				else{			//read voltage mode
					//if we try to read precisely the input voltage than dont multiply the result by 16 yet
					ADC2_Voltage=((long long)currentVoltage-(long long)8388608)*(long long)2500000/(long long)8388608;
    130c:	92 2f       	mov	r25, r18
    130e:	83 2f       	mov	r24, r19
    1310:	2c 2d       	mov	r18, r12
    1312:	3e 2f       	mov	r19, r30
    1314:	49 2f       	mov	r20, r25
    1316:	58 2f       	mov	r21, r24
    1318:	60 e0       	ldi	r22, 0x00	; 0
    131a:	70 e0       	ldi	r23, 0x00	; 0
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	e0 ea       	ldi	r30, 0xA0	; 160
    1322:	ae 2e       	mov	r10, r30
    1324:	f5 e2       	ldi	r31, 0x25	; 37
    1326:	bf 2e       	mov	r11, r31
    1328:	a6 e2       	ldi	r26, 0x26	; 38
    132a:	ca 2e       	mov	r12, r26
    132c:	dd 24       	eor	r13, r13
    132e:	ee 24       	eor	r14, r14
    1330:	ff 24       	eor	r15, r15
    1332:	00 e0       	ldi	r16, 0x00	; 0
    1334:	10 e0       	ldi	r17, 0x00	; 0
    1336:	0e 94 76 04 	call	0x8ec	; 0x8ec <__muldi3>
    133a:	f9 01       	movw	r30, r18
    133c:	e4 2e       	mov	r14, r20
    133e:	25 2f       	mov	r18, r21
    1340:	20 5d       	subi	r18, 0xD0	; 208
    1342:	01 e0       	ldi	r16, 0x01	; 1
    1344:	25 17       	cp	r18, r21
    1346:	08 f0       	brcs	.+2      	; 0x134a <main+0x7dc>
    1348:	00 e0       	ldi	r16, 0x00	; 0
    134a:	f2 2e       	mov	r15, r18
    134c:	31 e0       	ldi	r19, 0x01	; 1
    134e:	22 17       	cp	r18, r18
    1350:	08 f0       	brcs	.+2      	; 0x1354 <main+0x7e6>
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	03 2b       	or	r16, r19
    1356:	26 2f       	mov	r18, r22
    1358:	23 51       	subi	r18, 0x13	; 19
    135a:	11 e0       	ldi	r17, 0x01	; 1
    135c:	26 17       	cp	r18, r22
    135e:	08 f0       	brcs	.+2      	; 0x1362 <main+0x7f4>
    1360:	10 e0       	ldi	r17, 0x00	; 0
    1362:	02 0f       	add	r16, r18
    1364:	31 e0       	ldi	r19, 0x01	; 1
    1366:	02 17       	cp	r16, r18
    1368:	08 f0       	brcs	.+2      	; 0x136c <main+0x7fe>
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	13 2b       	or	r17, r19
    136e:	27 2f       	mov	r18, r23
    1370:	24 51       	subi	r18, 0x14	; 20
    1372:	b1 e0       	ldi	r27, 0x01	; 1
    1374:	27 17       	cp	r18, r23
    1376:	08 f0       	brcs	.+2      	; 0x137a <main+0x80c>
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	12 0f       	add	r17, r18
    137c:	31 e0       	ldi	r19, 0x01	; 1
    137e:	12 17       	cp	r17, r18
    1380:	08 f0       	brcs	.+2      	; 0x1384 <main+0x816>
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	b3 2b       	or	r27, r19
    1386:	28 2f       	mov	r18, r24
    1388:	21 50       	subi	r18, 0x01	; 1
    138a:	31 e0       	ldi	r19, 0x01	; 1
    138c:	28 17       	cp	r18, r24
    138e:	08 f0       	brcs	.+2      	; 0x1392 <main+0x824>
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	b2 0f       	add	r27, r18
    1394:	a1 e0       	ldi	r26, 0x01	; 1
    1396:	b2 17       	cp	r27, r18
    1398:	08 f0       	brcs	.+2      	; 0x139c <main+0x82e>
    139a:	a0 e0       	ldi	r26, 0x00	; 0
    139c:	a3 2b       	or	r26, r19
    139e:	91 50       	subi	r25, 0x01	; 1
    13a0:	a9 0f       	add	r26, r25
    13a2:	9f 01       	movw	r18, r30
    13a4:	a7 01       	movw	r20, r14
    13a6:	b8 01       	movw	r22, r16
    13a8:	8b 2f       	mov	r24, r27
    13aa:	9a 2f       	mov	r25, r26
    13ac:	a7 ff       	sbrs	r26, 7
    13ae:	32 c0       	rjmp	.+100    	; 0x1414 <main+0x8a6>
    13b0:	21 50       	subi	r18, 0x01	; 1
    13b2:	31 e0       	ldi	r19, 0x01	; 1
    13b4:	2e 17       	cp	r18, r30
    13b6:	08 f0       	brcs	.+2      	; 0x13ba <main+0x84c>
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	8f 2f       	mov	r24, r31
    13bc:	81 50       	subi	r24, 0x01	; 1
    13be:	41 e0       	ldi	r20, 0x01	; 1
    13c0:	8f 17       	cp	r24, r31
    13c2:	08 f0       	brcs	.+2      	; 0x13c6 <main+0x858>
    13c4:	40 e0       	ldi	r20, 0x00	; 0
    13c6:	38 0f       	add	r19, r24
    13c8:	91 e0       	ldi	r25, 0x01	; 1
    13ca:	38 17       	cp	r19, r24
    13cc:	08 f0       	brcs	.+2      	; 0x13d0 <main+0x862>
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	49 2b       	or	r20, r25
    13d2:	8e 2d       	mov	r24, r14
    13d4:	81 58       	subi	r24, 0x81	; 129
    13d6:	91 e0       	ldi	r25, 0x01	; 1
    13d8:	8e 15       	cp	r24, r14
    13da:	08 f0       	brcs	.+2      	; 0x13de <main+0x870>
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	48 0f       	add	r20, r24
    13e0:	51 e0       	ldi	r21, 0x01	; 1
    13e2:	48 17       	cp	r20, r24
    13e4:	08 f0       	brcs	.+2      	; 0x13e8 <main+0x87a>
    13e6:	50 e0       	ldi	r21, 0x00	; 0
    13e8:	59 2b       	or	r21, r25
    13ea:	5f 0d       	add	r21, r15
    13ec:	61 e0       	ldi	r22, 0x01	; 1
    13ee:	5f 15       	cp	r21, r15
    13f0:	08 f0       	brcs	.+2      	; 0x13f4 <main+0x886>
    13f2:	60 e0       	ldi	r22, 0x00	; 0
    13f4:	60 0f       	add	r22, r16
    13f6:	71 e0       	ldi	r23, 0x01	; 1
    13f8:	60 17       	cp	r22, r16
    13fa:	08 f0       	brcs	.+2      	; 0x13fe <main+0x890>
    13fc:	70 e0       	ldi	r23, 0x00	; 0
    13fe:	71 0f       	add	r23, r17
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	71 17       	cp	r23, r17
    1404:	08 f0       	brcs	.+2      	; 0x1408 <main+0x89a>
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	8b 0f       	add	r24, r27
    140a:	91 e0       	ldi	r25, 0x01	; 1
    140c:	8b 17       	cp	r24, r27
    140e:	08 f0       	brcs	.+2      	; 0x1412 <main+0x8a4>
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	9a 0f       	add	r25, r26
    1414:	07 e1       	ldi	r16, 0x17	; 23
    1416:	0e 94 49 05 	call	0xa92	; 0xa92 <__ashrdi3>
    141a:	20 93 9f 00 	sts	0x009F, r18
    141e:	30 93 a0 00 	sts	0x00A0, r19
    1422:	40 93 a1 00 	sts	0x00A1, r20
    1426:	50 93 a2 00 	sts	0x00A2, r21
    142a:	60 93 a3 00 	sts	0x00A3, r22
    142e:	70 93 a4 00 	sts	0x00A4, r23
    1432:	80 93 a5 00 	sts	0x00A5, r24
    1436:	90 93 a6 00 	sts	0x00A6, r25
					//ADC2_Voltage=(long long)((double)currentVoltage-(double)8388608.0)*(double)2500000.0/(double)8388608.0;
					
					if(ADC2_Voltage<900000 && ADC2_Voltage>0){	//read voltage < 0.9V => that meanse we can increase ADC gain
    143a:	a2 2e       	mov	r10, r18
    143c:	aa 94       	dec	r10
    143e:	e1 e0       	ldi	r30, 0x01	; 1
    1440:	a2 16       	cp	r10, r18
    1442:	08 f0       	brcs	.+2      	; 0x1446 <main+0x8d8>
    1444:	e0 e0       	ldi	r30, 0x00	; 0
    1446:	a3 2f       	mov	r26, r19
    1448:	a1 50       	subi	r26, 0x01	; 1
    144a:	f1 e0       	ldi	r31, 0x01	; 1
    144c:	a3 17       	cp	r26, r19
    144e:	08 f0       	brcs	.+2      	; 0x1452 <main+0x8e4>
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	ea 0f       	add	r30, r26
    1454:	b1 e0       	ldi	r27, 0x01	; 1
    1456:	ea 17       	cp	r30, r26
    1458:	08 f0       	brcs	.+2      	; 0x145c <main+0x8ee>
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	fb 2b       	or	r31, r27
    145e:	a4 2f       	mov	r26, r20
    1460:	a1 50       	subi	r26, 0x01	; 1
    1462:	11 e0       	ldi	r17, 0x01	; 1
    1464:	a4 17       	cp	r26, r20
    1466:	08 f0       	brcs	.+2      	; 0x146a <main+0x8fc>
    1468:	10 e0       	ldi	r17, 0x00	; 0
    146a:	fa 0f       	add	r31, r26
    146c:	b1 e0       	ldi	r27, 0x01	; 1
    146e:	fa 17       	cp	r31, r26
    1470:	08 f0       	brcs	.+2      	; 0x1474 <main+0x906>
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	1b 2b       	or	r17, r27
    1476:	a5 2f       	mov	r26, r21
    1478:	a1 50       	subi	r26, 0x01	; 1
    147a:	b1 e0       	ldi	r27, 0x01	; 1
    147c:	a5 17       	cp	r26, r21
    147e:	08 f0       	brcs	.+2      	; 0x1482 <main+0x914>
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	c1 2e       	mov	r12, r17
    1484:	ca 0e       	add	r12, r26
    1486:	11 e0       	ldi	r17, 0x01	; 1
    1488:	ca 16       	cp	r12, r26
    148a:	08 f0       	brcs	.+2      	; 0x148e <main+0x920>
    148c:	10 e0       	ldi	r17, 0x00	; 0
    148e:	b1 2b       	or	r27, r17
    1490:	a6 2f       	mov	r26, r22
    1492:	a1 50       	subi	r26, 0x01	; 1
    1494:	11 e0       	ldi	r17, 0x01	; 1
    1496:	a6 17       	cp	r26, r22
    1498:	08 f0       	brcs	.+2      	; 0x149c <main+0x92e>
    149a:	10 e0       	ldi	r17, 0x00	; 0
    149c:	ba 0f       	add	r27, r26
    149e:	01 e0       	ldi	r16, 0x01	; 1
    14a0:	ba 17       	cp	r27, r26
    14a2:	08 f0       	brcs	.+2      	; 0x14a6 <main+0x938>
    14a4:	00 e0       	ldi	r16, 0x00	; 0
    14a6:	10 2b       	or	r17, r16
    14a8:	a7 2f       	mov	r26, r23
    14aa:	a1 50       	subi	r26, 0x01	; 1
    14ac:	01 e0       	ldi	r16, 0x01	; 1
    14ae:	a7 17       	cp	r26, r23
    14b0:	08 f0       	brcs	.+2      	; 0x14b4 <main+0x946>
    14b2:	00 e0       	ldi	r16, 0x00	; 0
    14b4:	1a 0f       	add	r17, r26
    14b6:	ff 24       	eor	r15, r15
    14b8:	f3 94       	inc	r15
    14ba:	1a 17       	cp	r17, r26
    14bc:	08 f0       	brcs	.+2      	; 0x14c0 <main+0x952>
    14be:	ff 24       	eor	r15, r15
    14c0:	0f 29       	or	r16, r15
    14c2:	a8 2f       	mov	r26, r24
    14c4:	a1 50       	subi	r26, 0x01	; 1
    14c6:	ee 24       	eor	r14, r14
    14c8:	e3 94       	inc	r14
    14ca:	a8 17       	cp	r26, r24
    14cc:	08 f0       	brcs	.+2      	; 0x14d0 <main+0x962>
    14ce:	ee 24       	eor	r14, r14
    14d0:	0a 0f       	add	r16, r26
    14d2:	ff 24       	eor	r15, r15
    14d4:	f3 94       	inc	r15
    14d6:	0a 17       	cp	r16, r26
    14d8:	08 f0       	brcs	.+2      	; 0x14dc <main+0x96e>
    14da:	ff 24       	eor	r15, r15
    14dc:	fe 28       	or	r15, r14
    14de:	a9 2f       	mov	r26, r25
    14e0:	a1 50       	subi	r26, 0x01	; 1
    14e2:	fa 0e       	add	r15, r26
    14e4:	a9 f5       	brne	.+106    	; 0x1550 <main+0x9e2>
    14e6:	00 23       	and	r16, r16
    14e8:	99 f5       	brne	.+102    	; 0x1550 <main+0x9e2>
    14ea:	11 23       	and	r17, r17
    14ec:	89 f5       	brne	.+98     	; 0x1550 <main+0x9e2>
    14ee:	bb 23       	and	r27, r27
    14f0:	79 f5       	brne	.+94     	; 0x1550 <main+0x9e2>
    14f2:	cc 20       	and	r12, r12
    14f4:	69 f5       	brne	.+90     	; 0x1550 <main+0x9e2>
    14f6:	fe 30       	cpi	r31, 0x0E	; 14
    14f8:	58 f5       	brcc	.+86     	; 0x1550 <main+0x9e2>
    14fa:	fd 30       	cpi	r31, 0x0D	; 13
    14fc:	39 f4       	brne	.+14     	; 0x150c <main+0x99e>
    14fe:	ec 3b       	cpi	r30, 0xBC	; 188
    1500:	38 f5       	brcc	.+78     	; 0x1550 <main+0x9e2>
    1502:	eb 3b       	cpi	r30, 0xBB	; 187
    1504:	19 f4       	brne	.+6      	; 0x150c <main+0x99e>
    1506:	ae e9       	ldi	r26, 0x9E	; 158
    1508:	aa 15       	cp	r26, r10
    150a:	10 f1       	brcs	.+68     	; 0x1550 <main+0x9e2>
						if(ADC2_Gain<7){
    150c:	69 96       	adiw	r28, 0x19	; 25
    150e:	bf ad       	sts	0x6f, r27
    1510:	69 97       	sbiw	r28, 0x19	; 25
    1512:	b7 30       	cpi	r27, 0x07	; 7
    1514:	08 f0       	brcs	.+2      	; 0x1518 <main+0x9aa>
    1516:	52 c0       	rjmp	.+164    	; 0x15bc <main+0xa4e>
							ADC2_Gain++;
    1518:	bf 5f       	subi	r27, 0xFF	; 255
    151a:	69 96       	adiw	r28, 0x19	; 25
    151c:	bf af       	sts	0x7f, r27
    151e:	69 97       	sbiw	r28, 0x19	; 25
							control_register=0xA283EF+(uint32_t)ADC2_Gain*(uint32_t)0x40000;
    1520:	8b 2f       	mov	r24, r27
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	a0 e0       	ldi	r26, 0x00	; 0
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	02 e1       	ldi	r16, 0x12	; 18
    152a:	88 0f       	add	r24, r24
    152c:	99 1f       	adc	r25, r25
    152e:	aa 1f       	adc	r26, r26
    1530:	bb 1f       	adc	r27, r27
    1532:	0a 95       	dec	r16
    1534:	d1 f7       	brne	.-12     	; 0x152a <main+0x9bc>
    1536:	81 51       	subi	r24, 0x11	; 17
    1538:	9c 47       	sbci	r25, 0x7C	; 124
    153a:	ad 45       	sbci	r26, 0x5D	; 93
    153c:	bf 4f       	sbci	r27, 0xFF	; 255
							writeToADC(control_register);
    153e:	bc 01       	movw	r22, r24
    1540:	cd 01       	movw	r24, r26
    1542:	0e 94 1b 02 	call	0x436	; 0x436 <writeToADC>
    1546:	ef e3       	ldi	r30, 0x3F	; 63
    1548:	fc e9       	ldi	r31, 0x9C	; 156
    154a:	31 97       	sbiw	r30, 0x01	; 1
    154c:	f1 f7       	brne	.-4      	; 0x154a <main+0x9dc>
    154e:	34 c0       	rjmp	.+104    	; 0x15b8 <main+0xa4a>
							_delay_ms(10);
						}						
					}
					else if(ADC2_Voltage>2400000 || ADC2_Voltage<0){	//voltage > 2.4 that means we should decrease the gain
    1550:	99 23       	and	r25, r25
    1552:	91 f4       	brne	.+36     	; 0x1578 <main+0xa0a>
    1554:	88 23       	and	r24, r24
    1556:	81 f4       	brne	.+32     	; 0x1578 <main+0xa0a>
    1558:	77 23       	and	r23, r23
    155a:	71 f4       	brne	.+28     	; 0x1578 <main+0xa0a>
    155c:	66 23       	and	r22, r22
    155e:	61 f4       	brne	.+24     	; 0x1578 <main+0xa0a>
    1560:	55 23       	and	r21, r21
    1562:	51 f4       	brne	.+20     	; 0x1578 <main+0xa0a>
    1564:	45 32       	cpi	r20, 0x25	; 37
    1566:	40 f4       	brcc	.+16     	; 0x1578 <main+0xa0a>
    1568:	44 32       	cpi	r20, 0x24	; 36
    156a:	41 f5       	brne	.+80     	; 0x15bc <main+0xa4e>
    156c:	30 3a       	cpi	r19, 0xA0	; 160
    156e:	20 f4       	brcc	.+8      	; 0x1578 <main+0xa0a>
    1570:	3f 39       	cpi	r19, 0x9F	; 159
    1572:	21 f5       	brne	.+72     	; 0x15bc <main+0xa4e>
    1574:	22 23       	and	r18, r18
    1576:	11 f1       	breq	.+68     	; 0x15bc <main+0xa4e>
						if(ADC2_Gain!=0){
    1578:	69 96       	adiw	r28, 0x19	; 25
    157a:	ff ad       	sts	0x6f, r31
    157c:	69 97       	sbiw	r28, 0x19	; 25
    157e:	ff 23       	and	r31, r31
    1580:	e9 f0       	breq	.+58     	; 0x15bc <main+0xa4e>
							ADC2_Gain--;
    1582:	f1 50       	subi	r31, 0x01	; 1
    1584:	69 96       	adiw	r28, 0x19	; 25
    1586:	ff af       	sts	0x7f, r31
    1588:	69 97       	sbiw	r28, 0x19	; 25
							control_register=0xA283EF+(uint32_t)ADC2_Gain*(uint32_t)0x40000;
    158a:	8f 2f       	mov	r24, r31
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	a0 e0       	ldi	r26, 0x00	; 0
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	12 e1       	ldi	r17, 0x12	; 18
    1594:	88 0f       	add	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	aa 1f       	adc	r26, r26
    159a:	bb 1f       	adc	r27, r27
    159c:	1a 95       	dec	r17
    159e:	d1 f7       	brne	.-12     	; 0x1594 <main+0xa26>
    15a0:	81 51       	subi	r24, 0x11	; 17
    15a2:	9c 47       	sbci	r25, 0x7C	; 124
    15a4:	ad 45       	sbci	r26, 0x5D	; 93
    15a6:	bf 4f       	sbci	r27, 0xFF	; 255
							writeToADC(control_register);
    15a8:	bc 01       	movw	r22, r24
    15aa:	cd 01       	movw	r24, r26
    15ac:	0e 94 1b 02 	call	0x436	; 0x436 <writeToADC>
    15b0:	8f e3       	ldi	r24, 0x3F	; 63
    15b2:	9c e9       	ldi	r25, 0x9C	; 156
    15b4:	01 97       	sbiw	r24, 0x01	; 1
    15b6:	f1 f7       	brne	.-4      	; 0x15b4 <main+0xa46>
    15b8:	00 c0       	rjmp	.+0      	; 0x15ba <main+0xa4c>
    15ba:	00 00       	nop
							_delay_ms(10);
						}						
					}
				}		//end mode==10		
				if(channelCounter==10){			//mode < 10
    15bc:	80 91 9e 00 	lds	r24, 0x009E
    15c0:	8a 30       	cpi	r24, 0x0A	; 10
    15c2:	09 f0       	breq	.+2      	; 0x15c6 <main+0xa58>
    15c4:	bb c0       	rjmp	.+374    	; 0x173c <main+0xbce>
					control_register=0xA081FF;
					select_ADC_Channel=1;
					writeToADC(control_register);
    15c6:	6f ef       	ldi	r22, 0xFF	; 255
    15c8:	71 e8       	ldi	r23, 0x81	; 129
    15ca:	80 ea       	ldi	r24, 0xA0	; 160
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	0e 94 1b 02 	call	0x436	; 0x436 <writeToADC>
					channelCounter=0;
    15d2:	10 92 9e 00 	sts	0x009E, r1
					ADC2_Gain=0;
    15d6:	69 96       	adiw	r28, 0x19	; 25
    15d8:	1f ae       	sts	0xbf, r17
    15da:	69 97       	sbiw	r28, 0x19	; 25
						}						
					}
				}		//end mode==10		
				if(channelCounter==10){			//mode < 10
					control_register=0xA081FF;
					select_ADC_Channel=1;
    15dc:	91 e0       	ldi	r25, 0x01	; 1
    15de:	a5 96       	adiw	r28, 0x25	; 37
    15e0:	9f af       	sts	0x7f, r25
    15e2:	a5 97       	sbiw	r28, 0x25	; 37
    15e4:	ab c0       	rjmp	.+342    	; 0x173c <main+0xbce>
					channelCounter=0;
					ADC2_Gain=0;
				}				
			}
			else{							//ADC1 choosed
				ADC1_Voltage=((long long)currentVoltage-(long long)8388608)*(long long)2500000/(long long)8388608;
    15e6:	e1 2f       	mov	r30, r17
    15e8:	92 2f       	mov	r25, r18
    15ea:	83 2f       	mov	r24, r19
    15ec:	2c 2d       	mov	r18, r12
    15ee:	3e 2f       	mov	r19, r30
    15f0:	49 2f       	mov	r20, r25
    15f2:	58 2f       	mov	r21, r24
    15f4:	60 e0       	ldi	r22, 0x00	; 0
    15f6:	70 e0       	ldi	r23, 0x00	; 0
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	00 ea       	ldi	r16, 0xA0	; 160
    15fe:	a0 2e       	mov	r10, r16
    1600:	e5 e2       	ldi	r30, 0x25	; 37
    1602:	be 2e       	mov	r11, r30
    1604:	f6 e2       	ldi	r31, 0x26	; 38
    1606:	cf 2e       	mov	r12, r31
    1608:	dd 24       	eor	r13, r13
    160a:	ee 24       	eor	r14, r14
    160c:	ff 24       	eor	r15, r15
    160e:	00 e0       	ldi	r16, 0x00	; 0
    1610:	10 e0       	ldi	r17, 0x00	; 0
    1612:	0e 94 76 04 	call	0x8ec	; 0x8ec <__muldi3>
    1616:	f9 01       	movw	r30, r18
    1618:	e4 2e       	mov	r14, r20
    161a:	25 2f       	mov	r18, r21
    161c:	20 5d       	subi	r18, 0xD0	; 208
    161e:	01 e0       	ldi	r16, 0x01	; 1
    1620:	25 17       	cp	r18, r21
    1622:	08 f0       	brcs	.+2      	; 0x1626 <main+0xab8>
    1624:	00 e0       	ldi	r16, 0x00	; 0
    1626:	f2 2e       	mov	r15, r18
    1628:	31 e0       	ldi	r19, 0x01	; 1
    162a:	22 17       	cp	r18, r18
    162c:	08 f0       	brcs	.+2      	; 0x1630 <main+0xac2>
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	03 2b       	or	r16, r19
    1632:	26 2f       	mov	r18, r22
    1634:	23 51       	subi	r18, 0x13	; 19
    1636:	11 e0       	ldi	r17, 0x01	; 1
    1638:	26 17       	cp	r18, r22
    163a:	08 f0       	brcs	.+2      	; 0x163e <main+0xad0>
    163c:	10 e0       	ldi	r17, 0x00	; 0
    163e:	02 0f       	add	r16, r18
    1640:	31 e0       	ldi	r19, 0x01	; 1
    1642:	02 17       	cp	r16, r18
    1644:	08 f0       	brcs	.+2      	; 0x1648 <main+0xada>
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	13 2b       	or	r17, r19
    164a:	27 2f       	mov	r18, r23
    164c:	24 51       	subi	r18, 0x14	; 20
    164e:	b1 e0       	ldi	r27, 0x01	; 1
    1650:	27 17       	cp	r18, r23
    1652:	08 f0       	brcs	.+2      	; 0x1656 <main+0xae8>
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	12 0f       	add	r17, r18
    1658:	31 e0       	ldi	r19, 0x01	; 1
    165a:	12 17       	cp	r17, r18
    165c:	08 f0       	brcs	.+2      	; 0x1660 <main+0xaf2>
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	b3 2b       	or	r27, r19
    1662:	28 2f       	mov	r18, r24
    1664:	21 50       	subi	r18, 0x01	; 1
    1666:	31 e0       	ldi	r19, 0x01	; 1
    1668:	28 17       	cp	r18, r24
    166a:	08 f0       	brcs	.+2      	; 0x166e <main+0xb00>
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	b2 0f       	add	r27, r18
    1670:	a1 e0       	ldi	r26, 0x01	; 1
    1672:	b2 17       	cp	r27, r18
    1674:	08 f0       	brcs	.+2      	; 0x1678 <main+0xb0a>
    1676:	a0 e0       	ldi	r26, 0x00	; 0
    1678:	a3 2b       	or	r26, r19
    167a:	91 50       	subi	r25, 0x01	; 1
    167c:	a9 0f       	add	r26, r25
    167e:	9f 01       	movw	r18, r30
    1680:	a7 01       	movw	r20, r14
    1682:	b8 01       	movw	r22, r16
    1684:	8b 2f       	mov	r24, r27
    1686:	9a 2f       	mov	r25, r26
    1688:	a7 ff       	sbrs	r26, 7
    168a:	32 c0       	rjmp	.+100    	; 0x16f0 <main+0xb82>
    168c:	21 50       	subi	r18, 0x01	; 1
    168e:	31 e0       	ldi	r19, 0x01	; 1
    1690:	2e 17       	cp	r18, r30
    1692:	08 f0       	brcs	.+2      	; 0x1696 <main+0xb28>
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	8f 2f       	mov	r24, r31
    1698:	81 50       	subi	r24, 0x01	; 1
    169a:	41 e0       	ldi	r20, 0x01	; 1
    169c:	8f 17       	cp	r24, r31
    169e:	08 f0       	brcs	.+2      	; 0x16a2 <main+0xb34>
    16a0:	40 e0       	ldi	r20, 0x00	; 0
    16a2:	38 0f       	add	r19, r24
    16a4:	91 e0       	ldi	r25, 0x01	; 1
    16a6:	38 17       	cp	r19, r24
    16a8:	08 f0       	brcs	.+2      	; 0x16ac <main+0xb3e>
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	49 2b       	or	r20, r25
    16ae:	8e 2d       	mov	r24, r14
    16b0:	81 58       	subi	r24, 0x81	; 129
    16b2:	91 e0       	ldi	r25, 0x01	; 1
    16b4:	8e 15       	cp	r24, r14
    16b6:	08 f0       	brcs	.+2      	; 0x16ba <main+0xb4c>
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	48 0f       	add	r20, r24
    16bc:	51 e0       	ldi	r21, 0x01	; 1
    16be:	48 17       	cp	r20, r24
    16c0:	08 f0       	brcs	.+2      	; 0x16c4 <main+0xb56>
    16c2:	50 e0       	ldi	r21, 0x00	; 0
    16c4:	59 2b       	or	r21, r25
    16c6:	5f 0d       	add	r21, r15
    16c8:	61 e0       	ldi	r22, 0x01	; 1
    16ca:	5f 15       	cp	r21, r15
    16cc:	08 f0       	brcs	.+2      	; 0x16d0 <main+0xb62>
    16ce:	60 e0       	ldi	r22, 0x00	; 0
    16d0:	60 0f       	add	r22, r16
    16d2:	71 e0       	ldi	r23, 0x01	; 1
    16d4:	60 17       	cp	r22, r16
    16d6:	08 f0       	brcs	.+2      	; 0x16da <main+0xb6c>
    16d8:	70 e0       	ldi	r23, 0x00	; 0
    16da:	71 0f       	add	r23, r17
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	71 17       	cp	r23, r17
    16e0:	08 f0       	brcs	.+2      	; 0x16e4 <main+0xb76>
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	8b 0f       	add	r24, r27
    16e6:	91 e0       	ldi	r25, 0x01	; 1
    16e8:	8b 17       	cp	r24, r27
    16ea:	08 f0       	brcs	.+2      	; 0x16ee <main+0xb80>
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	9a 0f       	add	r25, r26
    16f0:	07 e1       	ldi	r16, 0x17	; 23
    16f2:	0e 94 49 05 	call	0xa92	; 0xa92 <__ashrdi3>
    16f6:	20 93 a7 00 	sts	0x00A7, r18
    16fa:	30 93 a8 00 	sts	0x00A8, r19
    16fe:	40 93 a9 00 	sts	0x00A9, r20
    1702:	50 93 aa 00 	sts	0x00AA, r21
    1706:	60 93 ab 00 	sts	0x00AB, r22
    170a:	70 93 ac 00 	sts	0x00AC, r23
    170e:	80 93 ad 00 	sts	0x00AD, r24
    1712:	90 93 ae 00 	sts	0x00AE, r25
				newADC1=1;
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	80 93 8c 00 	sts	0x008C, r24
				if(channelCounter==10){
    171c:	80 91 9e 00 	lds	r24, 0x009E
    1720:	8a 30       	cpi	r24, 0x0A	; 10
    1722:	61 f4       	brne	.+24     	; 0x173c <main+0xbce>
					control_register=0xA281FF;	//0xA28013
					select_ADC_Channel=2;
					writeToADC(control_register);
    1724:	6f ef       	ldi	r22, 0xFF	; 255
    1726:	71 e8       	ldi	r23, 0x81	; 129
    1728:	82 ea       	ldi	r24, 0xA2	; 162
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	0e 94 1b 02 	call	0x436	; 0x436 <writeToADC>
					channelCounter=0;
    1730:	10 92 9e 00 	sts	0x009E, r1
			else{							//ADC1 choosed
				ADC1_Voltage=((long long)currentVoltage-(long long)8388608)*(long long)2500000/(long long)8388608;
				newADC1=1;
				if(channelCounter==10){
					control_register=0xA281FF;	//0xA28013
					select_ADC_Channel=2;
    1734:	a2 e0       	ldi	r26, 0x02	; 2
    1736:	a5 96       	adiw	r28, 0x25	; 37
    1738:	af af       	sts	0x7f, r26
    173a:	a5 97       	sbiw	r28, 0x25	; 37
					writeToADC(control_register);
					channelCounter=0;
				}					
			}
			channelCounter++;
    173c:	80 91 9e 00 	lds	r24, 0x009E
    1740:	8f 5f       	subi	r24, 0xFF	; 255
    1742:	80 93 9e 00 	sts	0x009E, r24
			FFcounter=0;		
    1746:	10 92 b0 00 	sts	0x00B0, r1
    174a:	10 92 af 00 	sts	0x00AF, r1
    174e:	38 c0       	rjmp	.+112    	; 0x17c0 <main+0xc52>
		}
		else{
			FFcounter++;
    1750:	80 91 af 00 	lds	r24, 0x00AF
    1754:	90 91 b0 00 	lds	r25, 0x00B0
    1758:	01 96       	adiw	r24, 0x01	; 1
    175a:	90 93 b0 00 	sts	0x00B0, r25
    175e:	80 93 af 00 	sts	0x00AF, r24
			if(FFcounter>=5000 && mode==10){		//if we didnt get a valid result in 1000 tryies it can mean that the gain is set to high and the ADC is overrange
    1762:	b3 e1       	ldi	r27, 0x13	; 19
    1764:	88 38       	cpi	r24, 0x88	; 136
    1766:	9b 07       	cpc	r25, r27
    1768:	58 f1       	brcs	.+86     	; 0x17c0 <main+0xc52>
    176a:	64 96       	adiw	r28, 0x14	; 20
    176c:	ef ad       	sts	0x6f, r30
    176e:	64 97       	sbiw	r28, 0x14	; 20
    1770:	ea 30       	cpi	r30, 0x0A	; 10
    1772:	31 f5       	brne	.+76     	; 0x17c0 <main+0xc52>
				FFcounter=0;
    1774:	10 92 b0 00 	sts	0x00B0, r1
    1778:	10 92 af 00 	sts	0x00AF, r1
				if(ADC2_Gain!=0){		//decrease gain
    177c:	69 96       	adiw	r28, 0x19	; 25
    177e:	ff ad       	sts	0x6f, r31
    1780:	69 97       	sbiw	r28, 0x19	; 25
    1782:	ff 23       	and	r31, r31
    1784:	e9 f0       	breq	.+58     	; 0x17c0 <main+0xc52>
					ADC2_Gain--;
    1786:	f1 50       	subi	r31, 0x01	; 1
    1788:	69 96       	adiw	r28, 0x19	; 25
    178a:	ff af       	sts	0x7f, r31
    178c:	69 97       	sbiw	r28, 0x19	; 25
					control_register=0xA283EF+(uint32_t)ADC2_Gain*(uint32_t)0x40000;
    178e:	8f 2f       	mov	r24, r31
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	a0 e0       	ldi	r26, 0x00	; 0
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	12 e1       	ldi	r17, 0x12	; 18
    1798:	88 0f       	add	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	aa 1f       	adc	r26, r26
    179e:	bb 1f       	adc	r27, r27
    17a0:	1a 95       	dec	r17
    17a2:	d1 f7       	brne	.-12     	; 0x1798 <main+0xc2a>
    17a4:	81 51       	subi	r24, 0x11	; 17
    17a6:	9c 47       	sbci	r25, 0x7C	; 124
    17a8:	ad 45       	sbci	r26, 0x5D	; 93
    17aa:	bf 4f       	sbci	r27, 0xFF	; 255
					writeToADC(control_register);
    17ac:	bc 01       	movw	r22, r24
    17ae:	cd 01       	movw	r24, r26
    17b0:	0e 94 1b 02 	call	0x436	; 0x436 <writeToADC>
    17b4:	8f e3       	ldi	r24, 0x3F	; 63
    17b6:	9c e9       	ldi	r25, 0x9C	; 156
    17b8:	01 97       	sbiw	r24, 0x01	; 1
    17ba:	f1 f7       	brne	.-4      	; 0x17b8 <main+0xc4a>
    17bc:	00 c0       	rjmp	.+0      	; 0x17be <main+0xc50>
    17be:	00 00       	nop
				}
			}
		}			
		
		/*----------------------------------------------------------LCD--------------------------------------------------------------*/
		if(TimeCounter%SCREEN_TIME==0){
    17c0:	a4 96       	adiw	r28, 0x24	; 36
    17c2:	8e ad       	sts	0x6e, r24
    17c4:	9f ad       	sts	0x6f, r25
    17c6:	a4 97       	sbiw	r28, 0x24	; 36
    17c8:	64 ef       	ldi	r22, 0xF4	; 244
    17ca:	71 e0       	ldi	r23, 0x01	; 1
    17cc:	0e 94 3a 14 	call	0x2874	; 0x2874 <__udivmodhi4>
    17d0:	00 97       	sbiw	r24, 0x00	; 0
    17d2:	09 f0       	breq	.+2      	; 0x17d6 <main+0xc68>
    17d4:	d7 c5       	rjmp	.+2990   	; 0x2384 <main+0x1816>
				sprintf(buff,"%ld.%3ldmA\t",printValue/1000,printValue%1000);
			
			sprintf(buff,"%s A1:%lduV\tA2:%lduV\tI:%lduA\t%ud\n",buff, (long int)ADC1_Voltage,(long int)ADC2_Voltage,device_current(ADC1_Voltage),(unsigned int)DAC_code);
			sendToUART(buff);*/
			
			clearLCD();
    17d6:	0e 94 c5 00 	call	0x18a	; 0x18a <clearLCD>
    17da:	af e3       	ldi	r26, 0x3F	; 63
    17dc:	bf e1       	ldi	r27, 0x1F	; 31
    17de:	11 97       	sbiw	r26, 0x01	; 1
    17e0:	f1 f7       	brne	.-4      	; 0x17de <main+0xc70>
    17e2:	00 c0       	rjmp	.+0      	; 0x17e4 <main+0xc76>
    17e4:	00 00       	nop
			_delay_ms(2);
			uint8_t digitCounter=0;
			uint8_t dotPosition=7;
			if(newMode == 10 && changeMode==1){
    17e6:	ba e0       	ldi	r27, 0x0A	; 10
    17e8:	7b 16       	cp	r7, r27
    17ea:	d1 f4       	brne	.+52     	; 0x1820 <main+0xcb2>
    17ec:	e1 e0       	ldi	r30, 0x01	; 1
    17ee:	6e 16       	cp	r6, r30
    17f0:	09 f0       	breq	.+2      	; 0x17f4 <main+0xc86>
    17f2:	98 c1       	rjmp	.+816    	; 0x1b24 <main+0xfb6>
				sprintf(buff,"Voltage mode\n");
    17f4:	ce 01       	movw	r24, r28
    17f6:	01 96       	adiw	r24, 0x01	; 1
    17f8:	60 e6       	ldi	r22, 0x60	; 96
    17fa:	70 e0       	ldi	r23, 0x00	; 0
    17fc:	0e 94 c2 14 	call	0x2984	; 0x2984 <strcpy>
    1800:	8e 01       	movw	r16, r28
    1802:	0f 5f       	subi	r16, 0xFF	; 255
    1804:	1f 4f       	sbci	r17, 0xFF	; 255
    1806:	f1 e1       	ldi	r31, 0x11	; 17
    1808:	ff 2e       	mov	r15, r31
				for (uint8_t i=0;i<=16;i++){	//prints the number on LCD
					if(buff[i]=='\n') break;
    180a:	d8 01       	movw	r26, r16
    180c:	8d 91       	ld	r24, X+
    180e:	8d 01       	movw	r16, r26
    1810:	8a 30       	cpi	r24, 0x0A	; 10
    1812:	09 f4       	brne	.+2      	; 0x1816 <main+0xca8>
    1814:	b7 c5       	rjmp	.+2926   	; 0x2384 <main+0x1816>
					writeToLCD_Letter(buff[i]);
    1816:	0e 94 a9 00 	call	0x152	; 0x152 <writeToLCD_Letter>
    181a:	fa 94       	dec	r15
			_delay_ms(2);
			uint8_t digitCounter=0;
			uint8_t dotPosition=7;
			if(newMode == 10 && changeMode==1){
				sprintf(buff,"Voltage mode\n");
				for (uint8_t i=0;i<=16;i++){	//prints the number on LCD
    181c:	b1 f7       	brne	.-20     	; 0x180a <main+0xc9c>
    181e:	b2 c5       	rjmp	.+2916   	; 0x2384 <main+0x1816>
					if(buff[i]=='\n') break;
					writeToLCD_Letter(buff[i]);
				}
			}
			else if(newMode==11 && changeMode==1){
    1820:	bb e0       	ldi	r27, 0x0B	; 11
    1822:	7b 16       	cp	r7, r27
    1824:	d1 f4       	brne	.+52     	; 0x185a <main+0xcec>
    1826:	e1 e0       	ldi	r30, 0x01	; 1
    1828:	6e 16       	cp	r6, r30
    182a:	09 f0       	breq	.+2      	; 0x182e <main+0xcc0>
    182c:	7b c1       	rjmp	.+758    	; 0x1b24 <main+0xfb6>
				sprintf(buff,"Current mode\n");
    182e:	ce 01       	movw	r24, r28
    1830:	01 96       	adiw	r24, 0x01	; 1
    1832:	6e e6       	ldi	r22, 0x6E	; 110
    1834:	70 e0       	ldi	r23, 0x00	; 0
    1836:	0e 94 c2 14 	call	0x2984	; 0x2984 <strcpy>
    183a:	8e 01       	movw	r16, r28
    183c:	0f 5f       	subi	r16, 0xFF	; 255
    183e:	1f 4f       	sbci	r17, 0xFF	; 255
    1840:	e1 e1       	ldi	r30, 0x11	; 17
    1842:	fe 2e       	mov	r15, r30
				for (uint8_t i=0;i<=16;i++){	//prints the number on LCD
					if(buff[i]=='\n') break;
    1844:	d8 01       	movw	r26, r16
    1846:	8d 91       	ld	r24, X+
    1848:	8d 01       	movw	r16, r26
    184a:	8a 30       	cpi	r24, 0x0A	; 10
    184c:	09 f4       	brne	.+2      	; 0x1850 <main+0xce2>
    184e:	9a c5       	rjmp	.+2868   	; 0x2384 <main+0x1816>
					writeToLCD_Letter(buff[i]);
    1850:	0e 94 a9 00 	call	0x152	; 0x152 <writeToLCD_Letter>
    1854:	fa 94       	dec	r15
					writeToLCD_Letter(buff[i]);
				}
			}
			else if(newMode==11 && changeMode==1){
				sprintf(buff,"Current mode\n");
				for (uint8_t i=0;i<=16;i++){	//prints the number on LCD
    1856:	b1 f7       	brne	.-20     	; 0x1844 <main+0xcd6>
    1858:	95 c5       	rjmp	.+2858   	; 0x2384 <main+0x1816>
					if(buff[i]=='\n') break;
					writeToLCD_Letter(buff[i]);
				}	
			}
			else {
				if(newMode < 10){		//constant value modes
    185a:	b9 e0       	ldi	r27, 0x09	; 9
    185c:	b7 15       	cp	r27, r7
    185e:	08 f4       	brcc	.+2      	; 0x1862 <main+0xcf4>
    1860:	61 c1       	rjmp	.+706    	; 0x1b24 <main+0xfb6>
					switch (newMode){
    1862:	e1 e0       	ldi	r30, 0x01	; 1
    1864:	7e 16       	cp	r7, r30
    1866:	59 f0       	breq	.+22     	; 0x187e <main+0xd10>
    1868:	7e 16       	cp	r7, r30
    186a:	38 f0       	brcs	.+14     	; 0x187a <main+0xd0c>
    186c:	f2 e0       	ldi	r31, 0x02	; 2
    186e:	7f 16       	cp	r7, r31
    1870:	41 f0       	breq	.+16     	; 0x1882 <main+0xd14>
    1872:	23 e0       	ldi	r18, 0x03	; 3
    1874:	72 16       	cp	r7, r18
    1876:	51 f4       	brne	.+20     	; 0x188c <main+0xd1e>
    1878:	06 c0       	rjmp	.+12     	; 0x1886 <main+0xd18>
						case 0:
							writeToLCD_Letter('P'); break;
    187a:	80 e5       	ldi	r24, 0x50	; 80
    187c:	05 c0       	rjmp	.+10     	; 0x1888 <main+0xd1a>
						case 1:
							writeToLCD_Letter('R'); break;
    187e:	82 e5       	ldi	r24, 0x52	; 82
    1880:	03 c0       	rjmp	.+6      	; 0x1888 <main+0xd1a>
						case 2:
							writeToLCD_Letter('U'); break;
    1882:	85 e5       	ldi	r24, 0x55	; 85
    1884:	01 c0       	rjmp	.+2      	; 0x1888 <main+0xd1a>
						case 3:
							writeToLCD_Letter('I'); break;
    1886:	89 e4       	ldi	r24, 0x49	; 73
    1888:	0e 94 a9 00 	call	0x152	; 0x152 <writeToLCD_Letter>
					}
					writeToLCD_Letter('s');
    188c:	83 e7       	ldi	r24, 0x73	; 115
    188e:	0e 94 a9 00 	call	0x152	; 0x152 <writeToLCD_Letter>
					writeToLCD_Letter('e');
    1892:	85 e6       	ldi	r24, 0x65	; 101
    1894:	0e 94 a9 00 	call	0x152	; 0x152 <writeToLCD_Letter>
					writeToLCD_Letter('t');
    1898:	84 e7       	ldi	r24, 0x74	; 116
    189a:	0e 94 a9 00 	call	0x152	; 0x152 <writeToLCD_Letter>
					writeToLCD_Letter(':');
    189e:	8a e3       	ldi	r24, 0x3A	; 58
    18a0:	0e 94 a9 00 	call	0x152	; 0x152 <writeToLCD_Letter>
					writeToLCD_Letter(' ');
    18a4:	80 e2       	ldi	r24, 0x20	; 32
    18a6:	0e 94 a9 00 	call	0x152	; 0x152 <writeToLCD_Letter>
					sprintf(buff,"%ld\n",printValue);
    18aa:	4d b7       	in	r20, 0x3d	; 61
    18ac:	5e b7       	in	r21, 0x3e	; 62
    18ae:	48 50       	subi	r20, 0x08	; 8
    18b0:	50 40       	sbci	r21, 0x00	; 0
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	f8 94       	cli
    18b6:	5e bf       	out	0x3e, r21	; 62
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	4d bf       	out	0x3d, r20	; 61
    18bc:	ed b7       	in	r30, 0x3d	; 61
    18be:	fe b7       	in	r31, 0x3e	; 62
    18c0:	31 96       	adiw	r30, 0x01	; 1
    18c2:	21 e0       	ldi	r18, 0x01	; 1
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	2c 0f       	add	r18, r28
    18c8:	3d 1f       	adc	r19, r29
    18ca:	ad b7       	in	r26, 0x3d	; 61
    18cc:	be b7       	in	r27, 0x3e	; 62
    18ce:	12 96       	adiw	r26, 0x02	; 2
    18d0:	3c 93       	st	X, r19
    18d2:	2e 93       	st	-X, r18
    18d4:	11 97       	sbiw	r26, 0x01	; 1
    18d6:	4c e7       	ldi	r20, 0x7C	; 124
    18d8:	50 e0       	ldi	r21, 0x00	; 0
    18da:	53 83       	std	Z+3, r21	; 0x03
    18dc:	42 83       	std	Z+2, r20	; 0x02
    18de:	24 82       	std	Z+4, r2	; 0x04
    18e0:	35 82       	std	Z+5, r3	; 0x05
    18e2:	46 82       	std	Z+6, r4	; 0x06
    18e4:	57 82       	std	Z+7, r5	; 0x07
    18e6:	0e 94 c9 14 	call	0x2992	; 0x2992 <sprintf>
					if(newMode==1)	dotPosition=4;		//for om range
    18ea:	8d b7       	in	r24, 0x3d	; 61
    18ec:	9e b7       	in	r25, 0x3e	; 62
    18ee:	08 96       	adiw	r24, 0x08	; 8
    18f0:	0f b6       	in	r0, 0x3f	; 63
    18f2:	f8 94       	cli
    18f4:	9e bf       	out	0x3e, r25	; 62
    18f6:	0f be       	out	0x3f, r0	; 63
    18f8:	8d bf       	out	0x3d, r24	; 61
    18fa:	91 e0       	ldi	r25, 0x01	; 1
    18fc:	79 16       	cp	r7, r25
    18fe:	29 f0       	breq	.+10     	; 0x190a <main+0xd9c>
			sendToUART(buff);*/
			
			clearLCD();
			_delay_ms(2);
			uint8_t digitCounter=0;
			uint8_t dotPosition=7;
    1900:	a7 e0       	ldi	r26, 0x07	; 7
    1902:	a2 96       	adiw	r28, 0x22	; 34
    1904:	af af       	sts	0x7f, r26
    1906:	a2 97       	sbiw	r28, 0x22	; 34
    1908:	04 c0       	rjmp	.+8      	; 0x1912 <main+0xda4>
					writeToLCD_Letter('e');
					writeToLCD_Letter('t');
					writeToLCD_Letter(':');
					writeToLCD_Letter(' ');
					sprintf(buff,"%ld\n",printValue);
					if(newMode==1)	dotPosition=4;		//for om range
    190a:	b4 e0       	ldi	r27, 0x04	; 4
    190c:	a2 96       	adiw	r28, 0x22	; 34
    190e:	bf af       	sts	0x7f, r27
    1910:	a2 97       	sbiw	r28, 0x22	; 34
    1912:	fe 01       	movw	r30, r28
    1914:	31 96       	adiw	r30, 0x01	; 1
			sprintf(buff,"%s A1:%lduV\tA2:%lduV\tI:%lduA\t%ud\n",buff, (long int)ADC1_Voltage,(long int)ADC2_Voltage,device_current(ADC1_Voltage),(unsigned int)DAC_code);
			sendToUART(buff);*/
			
			clearLCD();
			_delay_ms(2);
			uint8_t digitCounter=0;
    1916:	ee 24       	eor	r14, r14
					writeToLCD_Letter(':');
					writeToLCD_Letter(' ');
					sprintf(buff,"%ld\n",printValue);
					if(newMode==1)	dotPosition=4;		//for om range
					for (uint8_t i=0;i<15;i++){			//counts the number of digit in set number
						if(buff[i]=='\n') break;
    1918:	81 91       	ld	r24, Z+
    191a:	8a 30       	cpi	r24, 0x0A	; 10
    191c:	21 f0       	breq	.+8      	; 0x1926 <main+0xdb8>
						else digitCounter++;
    191e:	e3 94       	inc	r14
					writeToLCD_Letter('t');
					writeToLCD_Letter(':');
					writeToLCD_Letter(' ');
					sprintf(buff,"%ld\n",printValue);
					if(newMode==1)	dotPosition=4;		//for om range
					for (uint8_t i=0;i<15;i++){			//counts the number of digit in set number
    1920:	2f e0       	ldi	r18, 0x0F	; 15
    1922:	e2 16       	cp	r14, r18
    1924:	c9 f7       	brne	.-14     	; 0x1918 <main+0xdaa>
						if(buff[i]=='\n') break;
						else digitCounter++;
					}
					if(selectDigit>digitCounter-1 && newMode==1){		//Ads _ symbol indicating actualy changeable digit
    1926:	8e 2c       	mov	r8, r14
    1928:	99 24       	eor	r9, r9
    192a:	63 96       	adiw	r28, 0x13	; 19
    192c:	4e ad       	sts	0x6e, r20
    192e:	5f ad       	sts	0x6f, r21
    1930:	63 97       	sbiw	r28, 0x13	; 19
    1932:	48 15       	cp	r20, r8
    1934:	59 05       	cpc	r21, r9
    1936:	e4 f0       	brlt	.+56     	; 0x1970 <main+0xe02>
    1938:	51 e0       	ldi	r21, 0x01	; 1
    193a:	75 16       	cp	r7, r21
    193c:	c9 f4       	brne	.+50     	; 0x1970 <main+0xe02>
						int digBuff=digitCounter-3;
    193e:	c4 01       	movw	r24, r8
    1940:	03 97       	sbiw	r24, 0x03	; 3
						if(digBuff<0) digBuff=1;
    1942:	97 ff       	sbrs	r25, 7
    1944:	02 c0       	rjmp	.+4      	; 0x194a <main+0xddc>
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	90 e0       	ldi	r25, 0x00	; 0
						for (uint8_t i=0; i<selectDigit-2-digBuff;i++)
    194a:	ff 24       	eor	r15, r15
    194c:	63 96       	adiw	r28, 0x13	; 19
    194e:	0e ad       	sts	0x6e, r16
    1950:	1f ad       	sts	0x6f, r17
    1952:	63 97       	sbiw	r28, 0x13	; 19
    1954:	02 50       	subi	r16, 0x02	; 2
    1956:	10 40       	sbci	r17, 0x00	; 0
    1958:	08 1b       	sub	r16, r24
    195a:	19 0b       	sbc	r17, r25
    195c:	04 c0       	rjmp	.+8      	; 0x1966 <main+0xdf8>
							writeToLCD_Letter('_');
    195e:	8f e5       	ldi	r24, 0x5F	; 95
    1960:	0e 94 a9 00 	call	0x152	; 0x152 <writeToLCD_Letter>
						else digitCounter++;
					}
					if(selectDigit>digitCounter-1 && newMode==1){		//Ads _ symbol indicating actualy changeable digit
						int digBuff=digitCounter-3;
						if(digBuff<0) digBuff=1;
						for (uint8_t i=0; i<selectDigit-2-digBuff;i++)
    1964:	f3 94       	inc	r15
    1966:	8f 2d       	mov	r24, r15
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	80 17       	cp	r24, r16
    196c:	91 07       	cpc	r25, r17
    196e:	bc f3       	brlt	.-18     	; 0x195e <main+0xdf0>
							writeToLCD_Letter('_');
					}				
					if (digitCounter<dotPosition){		//Ads extra zeros to fill the number to 0.000000 format
    1970:	a2 96       	adiw	r28, 0x22	; 34
    1972:	8f ad       	sts	0x6f, r24
    1974:	a2 97       	sbiw	r28, 0x22	; 34
    1976:	e8 16       	cp	r14, r24
    1978:	a8 f0       	brcs	.+42     	; 0x19a4 <main+0xe36>
							else writeToLCD_Letter('0');
						}
					}
					for (uint8_t i=0;i<=digitCounter;i++){	//prints the number on LCD
						if(buff[i]=='\n') break;
						if(selectDigit==digitCounter-i-1 && (TimeCounter%(SCREEN_TIME*4))<SCREEN_TIME) writeToLCD_Letter(' ');
    197a:	a4 96       	adiw	r28, 0x24	; 36
    197c:	8e ad       	sts	0x6e, r24
    197e:	9f ad       	sts	0x6f, r25
    1980:	a4 97       	sbiw	r28, 0x24	; 36
    1982:	60 ed       	ldi	r22, 0xD0	; 208
    1984:	77 e0       	ldi	r23, 0x07	; 7
    1986:	0e 94 3a 14 	call	0x2874	; 0x2874 <__udivmodhi4>
    198a:	5c 01       	movw	r10, r24
    198c:	10 e0       	ldi	r17, 0x00	; 0
						else writeToLCD_Letter(buff[i]);
						if(i==digitCounter-dotPosition)
    198e:	94 01       	movw	r18, r8
    1990:	a2 96       	adiw	r28, 0x22	; 34
    1992:	4f ad       	sts	0x6f, r20
    1994:	a2 97       	sbiw	r28, 0x22	; 34
    1996:	24 1b       	sub	r18, r20
    1998:	31 09       	sbc	r19, r1
    199a:	66 96       	adiw	r28, 0x16	; 22
    199c:	3f af       	sts	0x7f, r19
    199e:	2e af       	sts	0x7e, r18
    19a0:	66 97       	sbiw	r28, 0x16	; 22
    19a2:	54 c0       	rjmp	.+168    	; 0x1a4c <main+0xede>
						if(digBuff<0) digBuff=1;
						for (uint8_t i=0; i<selectDigit-2-digBuff;i++)
							writeToLCD_Letter('_');
					}				
					if (digitCounter<dotPosition){		//Ads extra zeros to fill the number to 0.000000 format
						if(selectDigit==dotPosition-1 && (TimeCounter%(SCREEN_TIME*4))<SCREEN_TIME) writeToLCD_Letter(' ');
    19a4:	a2 96       	adiw	r28, 0x22	; 34
    19a6:	5f ad       	sts	0x6f, r21
    19a8:	a2 97       	sbiw	r28, 0x22	; 34
    19aa:	a5 2e       	mov	r10, r21
    19ac:	bb 24       	eor	r11, r11
    19ae:	c5 01       	movw	r24, r10
    19b0:	01 97       	sbiw	r24, 0x01	; 1
    19b2:	63 96       	adiw	r28, 0x13	; 19
    19b4:	ae ad       	sts	0x6e, r26
    19b6:	bf ad       	sts	0x6f, r27
    19b8:	63 97       	sbiw	r28, 0x13	; 19
    19ba:	a8 17       	cp	r26, r24
    19bc:	b9 07       	cpc	r27, r25
    19be:	71 f4       	brne	.+28     	; 0x19dc <main+0xe6e>
    19c0:	a4 96       	adiw	r28, 0x24	; 36
    19c2:	8e ad       	sts	0x6e, r24
    19c4:	9f ad       	sts	0x6f, r25
    19c6:	a4 97       	sbiw	r28, 0x24	; 36
    19c8:	60 ed       	ldi	r22, 0xD0	; 208
    19ca:	77 e0       	ldi	r23, 0x07	; 7
    19cc:	0e 94 3a 14 	call	0x2874	; 0x2874 <__udivmodhi4>
    19d0:	b1 e0       	ldi	r27, 0x01	; 1
    19d2:	84 3f       	cpi	r24, 0xF4	; 244
    19d4:	9b 07       	cpc	r25, r27
    19d6:	10 f4       	brcc	.+4      	; 0x19dc <main+0xe6e>
    19d8:	80 e2       	ldi	r24, 0x20	; 32
    19da:	01 c0       	rjmp	.+2      	; 0x19de <main+0xe70>
						else writeToLCD_Letter('0');
    19dc:	80 e3       	ldi	r24, 0x30	; 48
    19de:	0e 94 a9 00 	call	0x152	; 0x152 <writeToLCD_Letter>
						writeToLCD_Letter('.');
    19e2:	8e e2       	ldi	r24, 0x2E	; 46
    19e4:	0e 94 a9 00 	call	0x152	; 0x152 <writeToLCD_Letter>
						for(uint8_t i=0;i<dotPosition-digitCounter-1;i++){
							if(dotPosition-selectDigit==i+2 && (TimeCounter%(SCREEN_TIME*4))<SCREEN_TIME) writeToLCD_Letter(' ');
    19e8:	a4 96       	adiw	r28, 0x24	; 36
    19ea:	8e ad       	sts	0x6e, r24
    19ec:	9f ad       	sts	0x6f, r25
    19ee:	a4 97       	sbiw	r28, 0x24	; 36
    19f0:	60 ed       	ldi	r22, 0xD0	; 208
    19f2:	77 e0       	ldi	r23, 0x07	; 7
    19f4:	0e 94 3a 14 	call	0x2874	; 0x2874 <__udivmodhi4>
    19f8:	66 96       	adiw	r28, 0x16	; 22
    19fa:	9f af       	sts	0x7f, r25
    19fc:	8e af       	sts	0x7e, r24
    19fe:	66 97       	sbiw	r28, 0x16	; 22
					}				
					if (digitCounter<dotPosition){		//Ads extra zeros to fill the number to 0.000000 format
						if(selectDigit==dotPosition-1 && (TimeCounter%(SCREEN_TIME*4))<SCREEN_TIME) writeToLCD_Letter(' ');
						else writeToLCD_Letter('0');
						writeToLCD_Letter('.');
						for(uint8_t i=0;i<dotPosition-digitCounter-1;i++){
    1a00:	10 e0       	ldi	r17, 0x00	; 0
    1a02:	65 01       	movw	r12, r10
    1a04:	c8 18       	sub	r12, r8
    1a06:	d9 08       	sbc	r13, r9
    1a08:	08 94       	sec
    1a0a:	c1 08       	sbc	r12, r1
    1a0c:	d1 08       	sbc	r13, r1
							if(dotPosition-selectDigit==i+2 && (TimeCounter%(SCREEN_TIME*4))<SCREEN_TIME) writeToLCD_Letter(' ');
    1a0e:	63 96       	adiw	r28, 0x13	; 19
    1a10:	ee ad       	sts	0x6e, r30
    1a12:	ff ad       	sts	0x6f, r31
    1a14:	63 97       	sbiw	r28, 0x13	; 19
    1a16:	ae 1a       	sub	r10, r30
    1a18:	bf 0a       	sbc	r11, r31
					}				
					if (digitCounter<dotPosition){		//Ads extra zeros to fill the number to 0.000000 format
						if(selectDigit==dotPosition-1 && (TimeCounter%(SCREEN_TIME*4))<SCREEN_TIME) writeToLCD_Letter(' ');
						else writeToLCD_Letter('0');
						writeToLCD_Letter('.');
						for(uint8_t i=0;i<dotPosition-digitCounter-1;i++){
    1a1a:	12 c0       	rjmp	.+36     	; 0x1a40 <main+0xed2>
							if(dotPosition-selectDigit==i+2 && (TimeCounter%(SCREEN_TIME*4))<SCREEN_TIME) writeToLCD_Letter(' ');
    1a1c:	02 96       	adiw	r24, 0x02	; 2
    1a1e:	a8 16       	cp	r10, r24
    1a20:	b9 06       	cpc	r11, r25
    1a22:	51 f4       	brne	.+20     	; 0x1a38 <main+0xeca>
    1a24:	66 96       	adiw	r28, 0x16	; 22
    1a26:	2e ad       	sts	0x6e, r18
    1a28:	3f ad       	sts	0x6f, r19
    1a2a:	66 97       	sbiw	r28, 0x16	; 22
    1a2c:	41 e0       	ldi	r20, 0x01	; 1
    1a2e:	24 3f       	cpi	r18, 0xF4	; 244
    1a30:	34 07       	cpc	r19, r20
    1a32:	10 f4       	brcc	.+4      	; 0x1a38 <main+0xeca>
    1a34:	80 e2       	ldi	r24, 0x20	; 32
    1a36:	01 c0       	rjmp	.+2      	; 0x1a3a <main+0xecc>
							else writeToLCD_Letter('0');
    1a38:	80 e3       	ldi	r24, 0x30	; 48
    1a3a:	0e 94 a9 00 	call	0x152	; 0x152 <writeToLCD_Letter>
					}				
					if (digitCounter<dotPosition){		//Ads extra zeros to fill the number to 0.000000 format
						if(selectDigit==dotPosition-1 && (TimeCounter%(SCREEN_TIME*4))<SCREEN_TIME) writeToLCD_Letter(' ');
						else writeToLCD_Letter('0');
						writeToLCD_Letter('.');
						for(uint8_t i=0;i<dotPosition-digitCounter-1;i++){
    1a3e:	1f 5f       	subi	r17, 0xFF	; 255
    1a40:	81 2f       	mov	r24, r17
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	8c 15       	cp	r24, r12
    1a46:	9d 05       	cpc	r25, r13
    1a48:	4c f3       	brlt	.-46     	; 0x1a1c <main+0xeae>
    1a4a:	97 cf       	rjmp	.-210    	; 0x197a <main+0xe0c>
							if(dotPosition-selectDigit==i+2 && (TimeCounter%(SCREEN_TIME*4))<SCREEN_TIME) writeToLCD_Letter(' ');
							else writeToLCD_Letter('0');
						}
					}
					for (uint8_t i=0;i<=digitCounter;i++){	//prints the number on LCD
						if(buff[i]=='\n') break;
    1a4c:	c1 2e       	mov	r12, r17
    1a4e:	dd 24       	eor	r13, r13
    1a50:	e1 e0       	ldi	r30, 0x01	; 1
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	ec 0f       	add	r30, r28
    1a56:	fd 1f       	adc	r31, r29
    1a58:	ec 0d       	add	r30, r12
    1a5a:	fd 1d       	adc	r31, r13
    1a5c:	80 81       	ld	r24, Z
    1a5e:	8a 30       	cpi	r24, 0x0A	; 10
    1a60:	09 f1       	breq	.+66     	; 0x1aa4 <main+0xf36>
						if(selectDigit==digitCounter-i-1 && (TimeCounter%(SCREEN_TIME*4))<SCREEN_TIME) writeToLCD_Letter(' ');
    1a62:	94 01       	movw	r18, r8
    1a64:	2c 19       	sub	r18, r12
    1a66:	3d 09       	sbc	r19, r13
    1a68:	21 50       	subi	r18, 0x01	; 1
    1a6a:	30 40       	sbci	r19, 0x00	; 0
    1a6c:	63 96       	adiw	r28, 0x13	; 19
    1a6e:	ae ad       	sts	0x6e, r26
    1a70:	bf ad       	sts	0x6f, r27
    1a72:	63 97       	sbiw	r28, 0x13	; 19
    1a74:	a2 17       	cp	r26, r18
    1a76:	b3 07       	cpc	r27, r19
    1a78:	31 f4       	brne	.+12     	; 0x1a86 <main+0xf18>
    1a7a:	b4 ef       	ldi	r27, 0xF4	; 244
    1a7c:	ab 16       	cp	r10, r27
    1a7e:	b1 e0       	ldi	r27, 0x01	; 1
    1a80:	bb 06       	cpc	r11, r27
    1a82:	08 f4       	brcc	.+2      	; 0x1a86 <main+0xf18>
    1a84:	80 e2       	ldi	r24, 0x20	; 32
						else writeToLCD_Letter(buff[i]);
    1a86:	0e 94 a9 00 	call	0x152	; 0x152 <writeToLCD_Letter>
						if(i==digitCounter-dotPosition)
    1a8a:	66 96       	adiw	r28, 0x16	; 22
    1a8c:	2e ad       	sts	0x6e, r18
    1a8e:	3f ad       	sts	0x6f, r19
    1a90:	66 97       	sbiw	r28, 0x16	; 22
    1a92:	c2 16       	cp	r12, r18
    1a94:	d3 06       	cpc	r13, r19
    1a96:	19 f4       	brne	.+6      	; 0x1a9e <main+0xf30>
							writeToLCD_Letter('.');
    1a98:	8e e2       	ldi	r24, 0x2E	; 46
    1a9a:	0e 94 a9 00 	call	0x152	; 0x152 <writeToLCD_Letter>
						for(uint8_t i=0;i<dotPosition-digitCounter-1;i++){
							if(dotPosition-selectDigit==i+2 && (TimeCounter%(SCREEN_TIME*4))<SCREEN_TIME) writeToLCD_Letter(' ');
							else writeToLCD_Letter('0');
						}
					}
					for (uint8_t i=0;i<=digitCounter;i++){	//prints the number on LCD
    1a9e:	1f 5f       	subi	r17, 0xFF	; 255
    1aa0:	e1 16       	cp	r14, r17
    1aa2:	a0 f6       	brcc	.-88     	; 0x1a4c <main+0xede>
						if(selectDigit==digitCounter-i-1 && (TimeCounter%(SCREEN_TIME*4))<SCREEN_TIME) writeToLCD_Letter(' ');
						else writeToLCD_Letter(buff[i]);
						if(i==digitCounter-dotPosition)
							writeToLCD_Letter('.');
					}
					switch (newMode){
    1aa4:	31 e0       	ldi	r19, 0x01	; 1
    1aa6:	73 16       	cp	r7, r19
    1aa8:	59 f0       	breq	.+22     	; 0x1ac0 <main+0xf52>
    1aaa:	73 16       	cp	r7, r19
    1aac:	38 f0       	brcs	.+14     	; 0x1abc <main+0xf4e>
    1aae:	42 e0       	ldi	r20, 0x02	; 2
    1ab0:	74 16       	cp	r7, r20
    1ab2:	41 f0       	breq	.+16     	; 0x1ac4 <main+0xf56>
    1ab4:	53 e0       	ldi	r21, 0x03	; 3
    1ab6:	75 16       	cp	r7, r21
    1ab8:	51 f4       	brne	.+20     	; 0x1ace <main+0xf60>
    1aba:	06 c0       	rjmp	.+12     	; 0x1ac8 <main+0xf5a>
						case 0:
							writeToLCD_Letter('W'); break;
    1abc:	87 e5       	ldi	r24, 0x57	; 87
    1abe:	05 c0       	rjmp	.+10     	; 0x1aca <main+0xf5c>
						case 1:
							writeToLCD_Letter(0xF4); break;		//0xF4 code for Omega
    1ac0:	84 ef       	ldi	r24, 0xF4	; 244
    1ac2:	03 c0       	rjmp	.+6      	; 0x1aca <main+0xf5c>
						case 2:
							writeToLCD_Letter('V'); break;
    1ac4:	86 e5       	ldi	r24, 0x56	; 86
    1ac6:	01 c0       	rjmp	.+2      	; 0x1aca <main+0xf5c>
						case 3:
							writeToLCD_Letter('A'); break;
    1ac8:	81 e4       	ldi	r24, 0x41	; 65
    1aca:	0e 94 a9 00 	call	0x152	; 0x152 <writeToLCD_Letter>
					}
					secondLineLCD();
    1ace:	0e 94 d5 00 	call	0x1aa	; 0x1aa <secondLineLCD>
					switch(newMode){
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	78 16       	cp	r7, r24
    1ad6:	61 f0       	breq	.+24     	; 0x1af0 <main+0xf82>
    1ad8:	78 16       	cp	r7, r24
    1ada:	40 f0       	brcs	.+16     	; 0x1aec <main+0xf7e>
    1adc:	92 e0       	ldi	r25, 0x02	; 2
    1ade:	79 16       	cp	r7, r25
    1ae0:	49 f0       	breq	.+18     	; 0x1af4 <main+0xf86>
    1ae2:	a3 e0       	ldi	r26, 0x03	; 3
    1ae4:	7a 16       	cp	r7, r26
    1ae6:	09 f0       	breq	.+2      	; 0x1aea <main+0xf7c>
    1ae8:	4f c0       	rjmp	.+158    	; 0x1b88 <main+0x101a>
    1aea:	0f c0       	rjmp	.+30     	; 0x1b0a <main+0xf9c>
						case 0:
							writeToLCD_Letter('P');
    1aec:	80 e5       	ldi	r24, 0x50	; 80
    1aee:	0e c0       	rjmp	.+28     	; 0x1b0c <main+0xf9e>
							writeToLCD_Letter('a');
							writeToLCD_Letter('c');
							writeToLCD_Letter('t');
							break;
						case 1:
							writeToLCD_Letter('R');
    1af0:	82 e5       	ldi	r24, 0x52	; 82
    1af2:	0c c0       	rjmp	.+24     	; 0x1b0c <main+0xf9e>
							writeToLCD_Letter('a');
							writeToLCD_Letter('c');
							writeToLCD_Letter('t');
							break;
						case 2:
							writeToLCD_Letter('U');
    1af4:	85 e5       	ldi	r24, 0x55	; 85
    1af6:	0e 94 a9 00 	call	0x152	; 0x152 <writeToLCD_Letter>
							writeToLCD_Letter('i');
    1afa:	89 e6       	ldi	r24, 0x69	; 105
    1afc:	0e 94 a9 00 	call	0x152	; 0x152 <writeToLCD_Letter>
							writeToLCD_Letter('n');
    1b00:	8e e6       	ldi	r24, 0x6E	; 110
    1b02:	0e 94 a9 00 	call	0x152	; 0x152 <writeToLCD_Letter>
							writeToLCD_Letter('p');
    1b06:	80 e7       	ldi	r24, 0x70	; 112
    1b08:	0a c0       	rjmp	.+20     	; 0x1b1e <main+0xfb0>
							break;
						case 3:
							writeToLCD_Letter('I');
    1b0a:	89 e4       	ldi	r24, 0x49	; 73
    1b0c:	0e 94 a9 00 	call	0x152	; 0x152 <writeToLCD_Letter>
							writeToLCD_Letter('a');
    1b10:	81 e6       	ldi	r24, 0x61	; 97
    1b12:	0e 94 a9 00 	call	0x152	; 0x152 <writeToLCD_Letter>
							writeToLCD_Letter('c');
    1b16:	83 e6       	ldi	r24, 0x63	; 99
    1b18:	0e 94 a9 00 	call	0x152	; 0x152 <writeToLCD_Letter>
							writeToLCD_Letter('t');
    1b1c:	84 e7       	ldi	r24, 0x74	; 116
    1b1e:	0e 94 a9 00 	call	0x152	; 0x152 <writeToLCD_Letter>
							break;
    1b22:	32 c0       	rjmp	.+100    	; 0x1b88 <main+0x101a>
					}				
				}
				else if(mode==10 && changeMode==0){
    1b24:	64 96       	adiw	r28, 0x14	; 20
    1b26:	bf ad       	sts	0x6f, r27
    1b28:	64 97       	sbiw	r28, 0x14	; 20
    1b2a:	ba 30       	cpi	r27, 0x0A	; 10
    1b2c:	81 f4       	brne	.+32     	; 0x1b4e <main+0xfe0>
    1b2e:	66 20       	and	r6, r6
    1b30:	e9 f4       	brne	.+58     	; 0x1b6c <main+0xffe>
					writeToLCD_Letter('V');
    1b32:	86 e5       	ldi	r24, 0x56	; 86
    1b34:	0e 94 a9 00 	call	0x152	; 0x152 <writeToLCD_Letter>
					writeToLCD_Letter('i');
    1b38:	89 e6       	ldi	r24, 0x69	; 105
    1b3a:	0e 94 a9 00 	call	0x152	; 0x152 <writeToLCD_Letter>
					writeToLCD_Letter('n');
    1b3e:	8e e6       	ldi	r24, 0x6E	; 110
    1b40:	0e 94 a9 00 	call	0x152	; 0x152 <writeToLCD_Letter>
			sendToUART(buff);*/
			
			clearLCD();
			_delay_ms(2);
			uint8_t digitCounter=0;
			uint8_t dotPosition=7;
    1b44:	e7 e0       	ldi	r30, 0x07	; 7
    1b46:	a2 96       	adiw	r28, 0x22	; 34
    1b48:	ef af       	sts	0x7f, r30
    1b4a:	a2 97       	sbiw	r28, 0x22	; 34
					}				
				}
				else if(mode==10 && changeMode==0){
					writeToLCD_Letter('V');
					writeToLCD_Letter('i');
					writeToLCD_Letter('n');
    1b4c:	1d c0       	rjmp	.+58     	; 0x1b88 <main+0x101a>
				}
				else if(mode==11 && changeMode==0){
    1b4e:	64 96       	adiw	r28, 0x14	; 20
    1b50:	ff ad       	sts	0x6f, r31
    1b52:	64 97       	sbiw	r28, 0x14	; 20
    1b54:	fb 30       	cpi	r31, 0x0B	; 11
    1b56:	79 f4       	brne	.+30     	; 0x1b76 <main+0x1008>
    1b58:	66 20       	and	r6, r6
    1b5a:	91 f4       	brne	.+36     	; 0x1b80 <main+0x1012>
					writeToLCD_Letter('I');
    1b5c:	89 e4       	ldi	r24, 0x49	; 73
    1b5e:	0e 94 a9 00 	call	0x152	; 0x152 <writeToLCD_Letter>
			sendToUART(buff);*/
			
			clearLCD();
			_delay_ms(2);
			uint8_t digitCounter=0;
			uint8_t dotPosition=7;
    1b62:	27 e0       	ldi	r18, 0x07	; 7
    1b64:	a2 96       	adiw	r28, 0x22	; 34
    1b66:	2f af       	sts	0x7f, r18
    1b68:	a2 97       	sbiw	r28, 0x22	; 34
    1b6a:	0e c0       	rjmp	.+28     	; 0x1b88 <main+0x101a>
    1b6c:	37 e0       	ldi	r19, 0x07	; 7
    1b6e:	a2 96       	adiw	r28, 0x22	; 34
    1b70:	3f af       	sts	0x7f, r19
    1b72:	a2 97       	sbiw	r28, 0x22	; 34
    1b74:	09 c0       	rjmp	.+18     	; 0x1b88 <main+0x101a>
    1b76:	47 e0       	ldi	r20, 0x07	; 7
    1b78:	a2 96       	adiw	r28, 0x22	; 34
    1b7a:	4f af       	sts	0x7f, r20
    1b7c:	a2 97       	sbiw	r28, 0x22	; 34
    1b7e:	04 c0       	rjmp	.+8      	; 0x1b88 <main+0x101a>
    1b80:	57 e0       	ldi	r21, 0x07	; 7
    1b82:	a2 96       	adiw	r28, 0x22	; 34
    1b84:	5f af       	sts	0x7f, r21
    1b86:	a2 97       	sbiw	r28, 0x22	; 34
					writeToLCD_Letter('n');
				}
				else if(mode==11 && changeMode==0){
					writeToLCD_Letter('I');
				}
				writeToLCD_Letter(':');
    1b88:	8a e3       	ldi	r24, 0x3A	; 58
    1b8a:	0e 94 a9 00 	call	0x152	; 0x152 <writeToLCD_Letter>
				writeToLCD_Letter(' ');
    1b8e:	80 e2       	ldi	r24, 0x20	; 32
    1b90:	0e 94 a9 00 	call	0x152	; 0x152 <writeToLCD_Letter>
				if(ADC2_Voltage<0 && mode==10 && changeMode==0){
    1b94:	80 90 9f 00 	lds	r8, 0x009F
    1b98:	90 90 a0 00 	lds	r9, 0x00A0
    1b9c:	a0 90 a1 00 	lds	r10, 0x00A1
    1ba0:	b0 90 a2 00 	lds	r11, 0x00A2
    1ba4:	c0 90 a3 00 	lds	r12, 0x00A3
    1ba8:	d0 90 a4 00 	lds	r13, 0x00A4
    1bac:	e0 90 a5 00 	lds	r14, 0x00A5
    1bb0:	f0 90 a6 00 	lds	r15, 0x00A6
    1bb4:	f7 fc       	sbrc	r15, 7
    1bb6:	06 c0       	rjmp	.+12     	; 0x1bc4 <main+0x1056>
					writeToLCD_Letter('-');
					sprintf(buff,"%ld\n",(long int)((long int)(-1)*ADC2_Voltage));
				}
				else {
					if((mode==10 && changeMode==0) || (changeMode==1 && newMode==2 && mode==10)){
    1bb8:	64 96       	adiw	r28, 0x14	; 20
    1bba:	8f ad       	sts	0x6f, r24
    1bbc:	64 97       	sbiw	r28, 0x14	; 20
    1bbe:	8a 30       	cpi	r24, 0x0A	; 10
    1bc0:	69 f5       	brne	.+90     	; 0x1c1c <main+0x10ae>
    1bc2:	29 c0       	rjmp	.+82     	; 0x1c16 <main+0x10a8>
				else if(mode==11 && changeMode==0){
					writeToLCD_Letter('I');
				}
				writeToLCD_Letter(':');
				writeToLCD_Letter(' ');
				if(ADC2_Voltage<0 && mode==10 && changeMode==0){
    1bc4:	64 96       	adiw	r28, 0x14	; 20
    1bc6:	9f ad       	sts	0x6f, r25
    1bc8:	64 97       	sbiw	r28, 0x14	; 20
    1bca:	9a 30       	cpi	r25, 0x0A	; 10
    1bcc:	39 f5       	brne	.+78     	; 0x1c1c <main+0x10ae>
    1bce:	66 20       	and	r6, r6
    1bd0:	49 f5       	brne	.+82     	; 0x1c24 <main+0x10b6>
					writeToLCD_Letter('-');
    1bd2:	8d e2       	ldi	r24, 0x2D	; 45
    1bd4:	0e 94 a9 00 	call	0x152	; 0x152 <writeToLCD_Letter>
					sprintf(buff,"%ld\n",(long int)((long int)(-1)*ADC2_Voltage));
    1bd8:	ad b7       	in	r26, 0x3d	; 61
    1bda:	be b7       	in	r27, 0x3e	; 62
    1bdc:	18 97       	sbiw	r26, 0x08	; 8
    1bde:	0f b6       	in	r0, 0x3f	; 63
    1be0:	f8 94       	cli
    1be2:	be bf       	out	0x3e, r27	; 62
    1be4:	0f be       	out	0x3f, r0	; 63
    1be6:	ad bf       	out	0x3d, r26	; 61
    1be8:	ed b7       	in	r30, 0x3d	; 61
    1bea:	fe b7       	in	r31, 0x3e	; 62
    1bec:	31 96       	adiw	r30, 0x01	; 1
    1bee:	21 e0       	ldi	r18, 0x01	; 1
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	2c 0f       	add	r18, r28
    1bf4:	3d 1f       	adc	r19, r29
    1bf6:	12 96       	adiw	r26, 0x02	; 2
    1bf8:	3c 93       	st	X, r19
    1bfa:	2e 93       	st	-X, r18
    1bfc:	11 97       	sbiw	r26, 0x01	; 1
    1bfe:	4c e7       	ldi	r20, 0x7C	; 124
    1c00:	50 e0       	ldi	r21, 0x00	; 0
    1c02:	53 83       	std	Z+3, r21	; 0x03
    1c04:	42 83       	std	Z+2, r20	; 0x02
    1c06:	88 27       	eor	r24, r24
    1c08:	99 27       	eor	r25, r25
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	88 19       	sub	r24, r8
    1c0e:	99 09       	sbc	r25, r9
    1c10:	aa 09       	sbc	r26, r10
    1c12:	bb 09       	sbc	r27, r11
    1c14:	53 c0       	rjmp	.+166    	; 0x1cbc <main+0x114e>
				}
				else {
					if((mode==10 && changeMode==0) || (changeMode==1 && newMode==2 && mode==10)){
    1c16:	66 20       	and	r6, r6
    1c18:	79 f0       	breq	.+30     	; 0x1c38 <main+0x10ca>
    1c1a:	04 c0       	rjmp	.+8      	; 0x1c24 <main+0x10b6>
    1c1c:	91 e0       	ldi	r25, 0x01	; 1
    1c1e:	69 16       	cp	r6, r25
    1c20:	09 f0       	breq	.+2      	; 0x1c24 <main+0x10b6>
    1c22:	e1 c1       	rjmp	.+962    	; 0x1fe6 <main+0x1478>
    1c24:	a2 e0       	ldi	r26, 0x02	; 2
    1c26:	7a 16       	cp	r7, r26
    1c28:	09 f0       	breq	.+2      	; 0x1c2c <main+0x10be>
    1c2a:	dd c1       	rjmp	.+954    	; 0x1fe6 <main+0x1478>
    1c2c:	64 96       	adiw	r28, 0x14	; 20
    1c2e:	bf ad       	sts	0x6f, r27
    1c30:	64 97       	sbiw	r28, 0x14	; 20
    1c32:	ba 30       	cpi	r27, 0x0A	; 10
    1c34:	09 f0       	breq	.+2      	; 0x1c38 <main+0x10ca>
    1c36:	04 c2       	rjmp	.+1032   	; 0x2040 <main+0x14d2>
						switch(ADC2_Gain){			//im sorry
    1c38:	69 96       	adiw	r28, 0x19	; 25
    1c3a:	ef ad       	sts	0x6f, r30
    1c3c:	69 97       	sbiw	r28, 0x19	; 25
    1c3e:	e3 30       	cpi	r30, 0x03	; 3
    1c40:	09 f4       	brne	.+2      	; 0x1c44 <main+0x10d6>
    1c42:	88 c0       	rjmp	.+272    	; 0x1d54 <main+0x11e6>
    1c44:	e4 30       	cpi	r30, 0x04	; 4
    1c46:	38 f4       	brcc	.+14     	; 0x1c56 <main+0x10e8>
    1c48:	e1 30       	cpi	r30, 0x01	; 1
    1c4a:	09 f4       	brne	.+2      	; 0x1c4e <main+0x10e0>
    1c4c:	41 c0       	rjmp	.+130    	; 0x1cd0 <main+0x1162>
    1c4e:	e2 30       	cpi	r30, 0x02	; 2
    1c50:	08 f0       	brcs	.+2      	; 0x1c54 <main+0x10e6>
    1c52:	5f c0       	rjmp	.+190    	; 0x1d12 <main+0x11a4>
    1c54:	10 c0       	rjmp	.+32     	; 0x1c76 <main+0x1108>
    1c56:	69 96       	adiw	r28, 0x19	; 25
    1c58:	ff ad       	sts	0x6f, r31
    1c5a:	69 97       	sbiw	r28, 0x19	; 25
    1c5c:	f5 30       	cpi	r31, 0x05	; 5
    1c5e:	09 f4       	brne	.+2      	; 0x1c62 <main+0x10f4>
    1c60:	a7 c0       	rjmp	.+334    	; 0x1db0 <main+0x1242>
    1c62:	f5 30       	cpi	r31, 0x05	; 5
    1c64:	08 f4       	brcc	.+2      	; 0x1c68 <main+0x10fa>
    1c66:	94 c0       	rjmp	.+296    	; 0x1d90 <main+0x1222>
    1c68:	f6 30       	cpi	r31, 0x06	; 6
    1c6a:	09 f4       	brne	.+2      	; 0x1c6e <main+0x1100>
    1c6c:	f5 c0       	rjmp	.+490    	; 0x1e58 <main+0x12ea>
    1c6e:	f7 30       	cpi	r31, 0x07	; 7
    1c70:	09 f0       	breq	.+2      	; 0x1c74 <main+0x1106>
    1c72:	df c2       	rjmp	.+1470   	; 0x2232 <main+0x16c4>
    1c74:	47 c1       	rjmp	.+654    	; 0x1f04 <main+0x1396>
							case 0:
								sprintf(buff,"%ld\n",(long int)(ADC2_Voltage*16)); break;
    1c76:	2d b7       	in	r18, 0x3d	; 61
    1c78:	3e b7       	in	r19, 0x3e	; 62
    1c7a:	28 50       	subi	r18, 0x08	; 8
    1c7c:	30 40       	sbci	r19, 0x00	; 0
    1c7e:	0f b6       	in	r0, 0x3f	; 63
    1c80:	f8 94       	cli
    1c82:	3e bf       	out	0x3e, r19	; 62
    1c84:	0f be       	out	0x3f, r0	; 63
    1c86:	2d bf       	out	0x3d, r18	; 61
    1c88:	ed b7       	in	r30, 0x3d	; 61
    1c8a:	fe b7       	in	r31, 0x3e	; 62
    1c8c:	31 96       	adiw	r30, 0x01	; 1
    1c8e:	21 e0       	ldi	r18, 0x01	; 1
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	2c 0f       	add	r18, r28
    1c94:	3d 1f       	adc	r19, r29
    1c96:	ad b7       	in	r26, 0x3d	; 61
    1c98:	be b7       	in	r27, 0x3e	; 62
    1c9a:	12 96       	adiw	r26, 0x02	; 2
    1c9c:	3c 93       	st	X, r19
    1c9e:	2e 93       	st	-X, r18
    1ca0:	11 97       	sbiw	r26, 0x01	; 1
    1ca2:	4c e7       	ldi	r20, 0x7C	; 124
    1ca4:	50 e0       	ldi	r21, 0x00	; 0
    1ca6:	53 83       	std	Z+3, r21	; 0x03
    1ca8:	42 83       	std	Z+2, r20	; 0x02
    1caa:	d5 01       	movw	r26, r10
    1cac:	c4 01       	movw	r24, r8
    1cae:	74 e0       	ldi	r23, 0x04	; 4
    1cb0:	88 0f       	add	r24, r24
    1cb2:	99 1f       	adc	r25, r25
    1cb4:	aa 1f       	adc	r26, r26
    1cb6:	bb 1f       	adc	r27, r27
    1cb8:	7a 95       	dec	r23
    1cba:	d1 f7       	brne	.-12     	; 0x1cb0 <main+0x1142>
    1cbc:	84 83       	std	Z+4, r24	; 0x04
    1cbe:	95 83       	std	Z+5, r25	; 0x05
    1cc0:	a6 83       	std	Z+6, r26	; 0x06
    1cc2:	b7 83       	std	Z+7, r27	; 0x07
    1cc4:	0e 94 c9 14 	call	0x2992	; 0x2992 <sprintf>
    1cc8:	8d b7       	in	r24, 0x3d	; 61
    1cca:	9e b7       	in	r25, 0x3e	; 62
    1ccc:	08 96       	adiw	r24, 0x08	; 8
    1cce:	ac c2       	rjmp	.+1368   	; 0x2228 <main+0x16ba>
							case 1:
								sprintf(buff,"%ld\n",(long int)(ADC2_Voltage*8)); break;
    1cd0:	ad b7       	in	r26, 0x3d	; 61
    1cd2:	be b7       	in	r27, 0x3e	; 62
    1cd4:	18 97       	sbiw	r26, 0x08	; 8
    1cd6:	0f b6       	in	r0, 0x3f	; 63
    1cd8:	f8 94       	cli
    1cda:	be bf       	out	0x3e, r27	; 62
    1cdc:	0f be       	out	0x3f, r0	; 63
    1cde:	ad bf       	out	0x3d, r26	; 61
    1ce0:	ed b7       	in	r30, 0x3d	; 61
    1ce2:	fe b7       	in	r31, 0x3e	; 62
    1ce4:	31 96       	adiw	r30, 0x01	; 1
    1ce6:	21 e0       	ldi	r18, 0x01	; 1
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	2c 0f       	add	r18, r28
    1cec:	3d 1f       	adc	r19, r29
    1cee:	12 96       	adiw	r26, 0x02	; 2
    1cf0:	3c 93       	st	X, r19
    1cf2:	2e 93       	st	-X, r18
    1cf4:	11 97       	sbiw	r26, 0x01	; 1
    1cf6:	4c e7       	ldi	r20, 0x7C	; 124
    1cf8:	50 e0       	ldi	r21, 0x00	; 0
    1cfa:	53 83       	std	Z+3, r21	; 0x03
    1cfc:	42 83       	std	Z+2, r20	; 0x02
    1cfe:	d5 01       	movw	r26, r10
    1d00:	c4 01       	movw	r24, r8
    1d02:	63 e0       	ldi	r22, 0x03	; 3
    1d04:	88 0f       	add	r24, r24
    1d06:	99 1f       	adc	r25, r25
    1d08:	aa 1f       	adc	r26, r26
    1d0a:	bb 1f       	adc	r27, r27
    1d0c:	6a 95       	dec	r22
    1d0e:	d1 f7       	brne	.-12     	; 0x1d04 <main+0x1196>
    1d10:	d5 cf       	rjmp	.-86     	; 0x1cbc <main+0x114e>
							case 2:
								sprintf(buff,"%ld\n",(long int)(ADC2_Voltage*4)); break;
    1d12:	ad b7       	in	r26, 0x3d	; 61
    1d14:	be b7       	in	r27, 0x3e	; 62
    1d16:	18 97       	sbiw	r26, 0x08	; 8
    1d18:	0f b6       	in	r0, 0x3f	; 63
    1d1a:	f8 94       	cli
    1d1c:	be bf       	out	0x3e, r27	; 62
    1d1e:	0f be       	out	0x3f, r0	; 63
    1d20:	ad bf       	out	0x3d, r26	; 61
    1d22:	ed b7       	in	r30, 0x3d	; 61
    1d24:	fe b7       	in	r31, 0x3e	; 62
    1d26:	31 96       	adiw	r30, 0x01	; 1
    1d28:	21 e0       	ldi	r18, 0x01	; 1
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	2c 0f       	add	r18, r28
    1d2e:	3d 1f       	adc	r19, r29
    1d30:	12 96       	adiw	r26, 0x02	; 2
    1d32:	3c 93       	st	X, r19
    1d34:	2e 93       	st	-X, r18
    1d36:	11 97       	sbiw	r26, 0x01	; 1
    1d38:	4c e7       	ldi	r20, 0x7C	; 124
    1d3a:	50 e0       	ldi	r21, 0x00	; 0
    1d3c:	53 83       	std	Z+3, r21	; 0x03
    1d3e:	42 83       	std	Z+2, r20	; 0x02
    1d40:	d5 01       	movw	r26, r10
    1d42:	c4 01       	movw	r24, r8
    1d44:	02 e0       	ldi	r16, 0x02	; 2
    1d46:	88 0f       	add	r24, r24
    1d48:	99 1f       	adc	r25, r25
    1d4a:	aa 1f       	adc	r26, r26
    1d4c:	bb 1f       	adc	r27, r27
    1d4e:	0a 95       	dec	r16
    1d50:	d1 f7       	brne	.-12     	; 0x1d46 <main+0x11d8>
    1d52:	b4 cf       	rjmp	.-152    	; 0x1cbc <main+0x114e>
							case 3:
								sprintf(buff,"%ld\n",(long int)(ADC2_Voltage*2)); break;
    1d54:	ad b7       	in	r26, 0x3d	; 61
    1d56:	be b7       	in	r27, 0x3e	; 62
    1d58:	18 97       	sbiw	r26, 0x08	; 8
    1d5a:	0f b6       	in	r0, 0x3f	; 63
    1d5c:	f8 94       	cli
    1d5e:	be bf       	out	0x3e, r27	; 62
    1d60:	0f be       	out	0x3f, r0	; 63
    1d62:	ad bf       	out	0x3d, r26	; 61
    1d64:	ed b7       	in	r30, 0x3d	; 61
    1d66:	fe b7       	in	r31, 0x3e	; 62
    1d68:	31 96       	adiw	r30, 0x01	; 1
    1d6a:	21 e0       	ldi	r18, 0x01	; 1
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	2c 0f       	add	r18, r28
    1d70:	3d 1f       	adc	r19, r29
    1d72:	12 96       	adiw	r26, 0x02	; 2
    1d74:	3c 93       	st	X, r19
    1d76:	2e 93       	st	-X, r18
    1d78:	11 97       	sbiw	r26, 0x01	; 1
    1d7a:	4c e7       	ldi	r20, 0x7C	; 124
    1d7c:	50 e0       	ldi	r21, 0x00	; 0
    1d7e:	53 83       	std	Z+3, r21	; 0x03
    1d80:	42 83       	std	Z+2, r20	; 0x02
    1d82:	d5 01       	movw	r26, r10
    1d84:	c4 01       	movw	r24, r8
    1d86:	88 0f       	add	r24, r24
    1d88:	99 1f       	adc	r25, r25
    1d8a:	aa 1f       	adc	r26, r26
    1d8c:	bb 1f       	adc	r27, r27
    1d8e:	96 cf       	rjmp	.-212    	; 0x1cbc <main+0x114e>
							case 4:
								sprintf(buff,"%ld\n",(long int)(ADC2_Voltage)); break;
    1d90:	ad b7       	in	r26, 0x3d	; 61
    1d92:	be b7       	in	r27, 0x3e	; 62
    1d94:	18 97       	sbiw	r26, 0x08	; 8
    1d96:	0f b6       	in	r0, 0x3f	; 63
    1d98:	f8 94       	cli
    1d9a:	be bf       	out	0x3e, r27	; 62
    1d9c:	0f be       	out	0x3f, r0	; 63
    1d9e:	ad bf       	out	0x3d, r26	; 61
    1da0:	ed b7       	in	r30, 0x3d	; 61
    1da2:	fe b7       	in	r31, 0x3e	; 62
    1da4:	31 96       	adiw	r30, 0x01	; 1
    1da6:	21 e0       	ldi	r18, 0x01	; 1
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	2c 0f       	add	r18, r28
    1dac:	3d 1f       	adc	r19, r29
    1dae:	61 c1       	rjmp	.+706    	; 0x2072 <main+0x1504>
							case 5:
								sprintf(buff,"%ld\n",(long int)(ADC2_Voltage/2)); break;
    1db0:	ad b7       	in	r26, 0x3d	; 61
    1db2:	be b7       	in	r27, 0x3e	; 62
    1db4:	18 97       	sbiw	r26, 0x08	; 8
    1db6:	0f b6       	in	r0, 0x3f	; 63
    1db8:	f8 94       	cli
    1dba:	be bf       	out	0x3e, r27	; 62
    1dbc:	0f be       	out	0x3f, r0	; 63
    1dbe:	ad bf       	out	0x3d, r26	; 61
    1dc0:	ed b7       	in	r30, 0x3d	; 61
    1dc2:	fe b7       	in	r31, 0x3e	; 62
    1dc4:	31 96       	adiw	r30, 0x01	; 1
    1dc6:	66 96       	adiw	r28, 0x16	; 22
    1dc8:	ff af       	sts	0x7f, r31
    1dca:	ee af       	sts	0x7e, r30
    1dcc:	66 97       	sbiw	r28, 0x16	; 22
    1dce:	e1 e0       	ldi	r30, 0x01	; 1
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	ec 0f       	add	r30, r28
    1dd4:	fd 1f       	adc	r31, r29
    1dd6:	12 96       	adiw	r26, 0x02	; 2
    1dd8:	fc 93       	st	X, r31
    1dda:	ee 93       	st	-X, r30
    1ddc:	11 97       	sbiw	r26, 0x01	; 1
    1dde:	ec e7       	ldi	r30, 0x7C	; 124
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	66 96       	adiw	r28, 0x16	; 22
    1de4:	ae ad       	sts	0x6e, r26
    1de6:	bf ad       	sts	0x6f, r27
    1de8:	66 97       	sbiw	r28, 0x16	; 22
    1dea:	13 96       	adiw	r26, 0x03	; 3
    1dec:	fc 93       	st	X, r31
    1dee:	ee 93       	st	-X, r30
    1df0:	12 97       	sbiw	r26, 0x02	; 2
    1df2:	94 01       	movw	r18, r8
    1df4:	a5 01       	movw	r20, r10
    1df6:	b6 01       	movw	r22, r12
    1df8:	c7 01       	movw	r24, r14
    1dfa:	97 ff       	sbrs	r25, 7
    1dfc:	2b c0       	rjmp	.+86     	; 0x1e54 <main+0x12e6>
    1dfe:	e8 2c       	mov	r14, r8
    1e00:	e3 94       	inc	r14
    1e02:	e1 e0       	ldi	r30, 0x01	; 1
    1e04:	e8 14       	cp	r14, r8
    1e06:	08 f0       	brcs	.+2      	; 0x1e0a <main+0x129c>
    1e08:	e0 e0       	ldi	r30, 0x00	; 0
    1e0a:	fe 2e       	mov	r15, r30
    1e0c:	f3 0e       	add	r15, r19
    1e0e:	01 e0       	ldi	r16, 0x01	; 1
    1e10:	f3 16       	cp	r15, r19
    1e12:	08 f0       	brcs	.+2      	; 0x1e16 <main+0x12a8>
    1e14:	00 e0       	ldi	r16, 0x00	; 0
    1e16:	04 0f       	add	r16, r20
    1e18:	11 e0       	ldi	r17, 0x01	; 1
    1e1a:	04 17       	cp	r16, r20
    1e1c:	08 f0       	brcs	.+2      	; 0x1e20 <main+0x12b2>
    1e1e:	10 e0       	ldi	r17, 0x00	; 0
    1e20:	15 0f       	add	r17, r21
    1e22:	b1 e0       	ldi	r27, 0x01	; 1
    1e24:	15 17       	cp	r17, r21
    1e26:	08 f0       	brcs	.+2      	; 0x1e2a <main+0x12bc>
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	b6 0f       	add	r27, r22
    1e2c:	a1 e0       	ldi	r26, 0x01	; 1
    1e2e:	b6 17       	cp	r27, r22
    1e30:	08 f0       	brcs	.+2      	; 0x1e34 <main+0x12c6>
    1e32:	a0 e0       	ldi	r26, 0x00	; 0
    1e34:	a7 0f       	add	r26, r23
    1e36:	f1 e0       	ldi	r31, 0x01	; 1
    1e38:	a7 17       	cp	r26, r23
    1e3a:	08 f0       	brcs	.+2      	; 0x1e3e <main+0x12d0>
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	f8 0f       	add	r31, r24
    1e40:	e1 e0       	ldi	r30, 0x01	; 1
    1e42:	f8 17       	cp	r31, r24
    1e44:	08 f0       	brcs	.+2      	; 0x1e48 <main+0x12da>
    1e46:	e0 e0       	ldi	r30, 0x00	; 0
    1e48:	97 01       	movw	r18, r14
    1e4a:	a8 01       	movw	r20, r16
    1e4c:	6b 2f       	mov	r22, r27
    1e4e:	7a 2f       	mov	r23, r26
    1e50:	8f 2f       	mov	r24, r31
    1e52:	9e 0f       	add	r25, r30
    1e54:	01 e0       	ldi	r16, 0x01	; 1
    1e56:	ab c0       	rjmp	.+342    	; 0x1fae <main+0x1440>
							case 6:
								sprintf(buff,"%ld\n",(long int)(ADC2_Voltage/4)); break;
    1e58:	2d b7       	in	r18, 0x3d	; 61
    1e5a:	3e b7       	in	r19, 0x3e	; 62
    1e5c:	28 50       	subi	r18, 0x08	; 8
    1e5e:	30 40       	sbci	r19, 0x00	; 0
    1e60:	0f b6       	in	r0, 0x3f	; 63
    1e62:	f8 94       	cli
    1e64:	3e bf       	out	0x3e, r19	; 62
    1e66:	0f be       	out	0x3f, r0	; 63
    1e68:	2d bf       	out	0x3d, r18	; 61
    1e6a:	4d b7       	in	r20, 0x3d	; 61
    1e6c:	5e b7       	in	r21, 0x3e	; 62
    1e6e:	4f 5f       	subi	r20, 0xFF	; 255
    1e70:	5f 4f       	sbci	r21, 0xFF	; 255
    1e72:	66 96       	adiw	r28, 0x16	; 22
    1e74:	5f af       	sts	0x7f, r21
    1e76:	4e af       	sts	0x7e, r20
    1e78:	66 97       	sbiw	r28, 0x16	; 22
    1e7a:	e1 e0       	ldi	r30, 0x01	; 1
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	ec 0f       	add	r30, r28
    1e80:	fd 1f       	adc	r31, r29
    1e82:	ad b7       	in	r26, 0x3d	; 61
    1e84:	be b7       	in	r27, 0x3e	; 62
    1e86:	12 96       	adiw	r26, 0x02	; 2
    1e88:	fc 93       	st	X, r31
    1e8a:	ee 93       	st	-X, r30
    1e8c:	11 97       	sbiw	r26, 0x01	; 1
    1e8e:	ec e7       	ldi	r30, 0x7C	; 124
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	da 01       	movw	r26, r20
    1e94:	13 96       	adiw	r26, 0x03	; 3
    1e96:	fc 93       	st	X, r31
    1e98:	ee 93       	st	-X, r30
    1e9a:	12 97       	sbiw	r26, 0x02	; 2
    1e9c:	94 01       	movw	r18, r8
    1e9e:	a5 01       	movw	r20, r10
    1ea0:	b6 01       	movw	r22, r12
    1ea2:	c7 01       	movw	r24, r14
    1ea4:	97 ff       	sbrs	r25, 7
    1ea6:	2c c0       	rjmp	.+88     	; 0x1f00 <main+0x1392>
    1ea8:	a3 e0       	ldi	r26, 0x03	; 3
    1eaa:	ea 2e       	mov	r14, r26
    1eac:	e8 0c       	add	r14, r8
    1eae:	e1 e0       	ldi	r30, 0x01	; 1
    1eb0:	e8 14       	cp	r14, r8
    1eb2:	08 f0       	brcs	.+2      	; 0x1eb6 <main+0x1348>
    1eb4:	e0 e0       	ldi	r30, 0x00	; 0
    1eb6:	fe 2e       	mov	r15, r30
    1eb8:	f3 0e       	add	r15, r19
    1eba:	01 e0       	ldi	r16, 0x01	; 1
    1ebc:	f3 16       	cp	r15, r19
    1ebe:	08 f0       	brcs	.+2      	; 0x1ec2 <main+0x1354>
    1ec0:	00 e0       	ldi	r16, 0x00	; 0
    1ec2:	04 0f       	add	r16, r20
    1ec4:	11 e0       	ldi	r17, 0x01	; 1
    1ec6:	04 17       	cp	r16, r20
    1ec8:	08 f0       	brcs	.+2      	; 0x1ecc <main+0x135e>
    1eca:	10 e0       	ldi	r17, 0x00	; 0
    1ecc:	15 0f       	add	r17, r21
    1ece:	b1 e0       	ldi	r27, 0x01	; 1
    1ed0:	15 17       	cp	r17, r21
    1ed2:	08 f0       	brcs	.+2      	; 0x1ed6 <main+0x1368>
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	b6 0f       	add	r27, r22
    1ed8:	a1 e0       	ldi	r26, 0x01	; 1
    1eda:	b6 17       	cp	r27, r22
    1edc:	08 f0       	brcs	.+2      	; 0x1ee0 <main+0x1372>
    1ede:	a0 e0       	ldi	r26, 0x00	; 0
    1ee0:	a7 0f       	add	r26, r23
    1ee2:	f1 e0       	ldi	r31, 0x01	; 1
    1ee4:	a7 17       	cp	r26, r23
    1ee6:	08 f0       	brcs	.+2      	; 0x1eea <main+0x137c>
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	f8 0f       	add	r31, r24
    1eec:	e1 e0       	ldi	r30, 0x01	; 1
    1eee:	f8 17       	cp	r31, r24
    1ef0:	08 f0       	brcs	.+2      	; 0x1ef4 <main+0x1386>
    1ef2:	e0 e0       	ldi	r30, 0x00	; 0
    1ef4:	97 01       	movw	r18, r14
    1ef6:	a8 01       	movw	r20, r16
    1ef8:	6b 2f       	mov	r22, r27
    1efa:	7a 2f       	mov	r23, r26
    1efc:	8f 2f       	mov	r24, r31
    1efe:	9e 0f       	add	r25, r30
    1f00:	02 e0       	ldi	r16, 0x02	; 2
    1f02:	55 c0       	rjmp	.+170    	; 0x1fae <main+0x1440>
							case 7:
								sprintf(buff,"%ld\n",(long int)(ADC2_Voltage/8)); break;
    1f04:	2d b7       	in	r18, 0x3d	; 61
    1f06:	3e b7       	in	r19, 0x3e	; 62
    1f08:	28 50       	subi	r18, 0x08	; 8
    1f0a:	30 40       	sbci	r19, 0x00	; 0
    1f0c:	0f b6       	in	r0, 0x3f	; 63
    1f0e:	f8 94       	cli
    1f10:	3e bf       	out	0x3e, r19	; 62
    1f12:	0f be       	out	0x3f, r0	; 63
    1f14:	2d bf       	out	0x3d, r18	; 61
    1f16:	4d b7       	in	r20, 0x3d	; 61
    1f18:	5e b7       	in	r21, 0x3e	; 62
    1f1a:	4f 5f       	subi	r20, 0xFF	; 255
    1f1c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f1e:	66 96       	adiw	r28, 0x16	; 22
    1f20:	5f af       	sts	0x7f, r21
    1f22:	4e af       	sts	0x7e, r20
    1f24:	66 97       	sbiw	r28, 0x16	; 22
    1f26:	e1 e0       	ldi	r30, 0x01	; 1
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	ec 0f       	add	r30, r28
    1f2c:	fd 1f       	adc	r31, r29
    1f2e:	ad b7       	in	r26, 0x3d	; 61
    1f30:	be b7       	in	r27, 0x3e	; 62
    1f32:	12 96       	adiw	r26, 0x02	; 2
    1f34:	fc 93       	st	X, r31
    1f36:	ee 93       	st	-X, r30
    1f38:	11 97       	sbiw	r26, 0x01	; 1
    1f3a:	ec e7       	ldi	r30, 0x7C	; 124
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	da 01       	movw	r26, r20
    1f40:	13 96       	adiw	r26, 0x03	; 3
    1f42:	fc 93       	st	X, r31
    1f44:	ee 93       	st	-X, r30
    1f46:	12 97       	sbiw	r26, 0x02	; 2
    1f48:	94 01       	movw	r18, r8
    1f4a:	a5 01       	movw	r20, r10
    1f4c:	b6 01       	movw	r22, r12
    1f4e:	c7 01       	movw	r24, r14
    1f50:	97 ff       	sbrs	r25, 7
    1f52:	2c c0       	rjmp	.+88     	; 0x1fac <main+0x143e>
    1f54:	f7 e0       	ldi	r31, 0x07	; 7
    1f56:	ef 2e       	mov	r14, r31
    1f58:	e8 0c       	add	r14, r8
    1f5a:	e1 e0       	ldi	r30, 0x01	; 1
    1f5c:	e8 14       	cp	r14, r8
    1f5e:	08 f0       	brcs	.+2      	; 0x1f62 <main+0x13f4>
    1f60:	e0 e0       	ldi	r30, 0x00	; 0
    1f62:	fe 2e       	mov	r15, r30
    1f64:	f3 0e       	add	r15, r19
    1f66:	01 e0       	ldi	r16, 0x01	; 1
    1f68:	f3 16       	cp	r15, r19
    1f6a:	08 f0       	brcs	.+2      	; 0x1f6e <main+0x1400>
    1f6c:	00 e0       	ldi	r16, 0x00	; 0
    1f6e:	04 0f       	add	r16, r20
    1f70:	11 e0       	ldi	r17, 0x01	; 1
    1f72:	04 17       	cp	r16, r20
    1f74:	08 f0       	brcs	.+2      	; 0x1f78 <main+0x140a>
    1f76:	10 e0       	ldi	r17, 0x00	; 0
    1f78:	15 0f       	add	r17, r21
    1f7a:	b1 e0       	ldi	r27, 0x01	; 1
    1f7c:	15 17       	cp	r17, r21
    1f7e:	08 f0       	brcs	.+2      	; 0x1f82 <main+0x1414>
    1f80:	b0 e0       	ldi	r27, 0x00	; 0
    1f82:	b6 0f       	add	r27, r22
    1f84:	a1 e0       	ldi	r26, 0x01	; 1
    1f86:	b6 17       	cp	r27, r22
    1f88:	08 f0       	brcs	.+2      	; 0x1f8c <main+0x141e>
    1f8a:	a0 e0       	ldi	r26, 0x00	; 0
    1f8c:	a7 0f       	add	r26, r23
    1f8e:	f1 e0       	ldi	r31, 0x01	; 1
    1f90:	a7 17       	cp	r26, r23
    1f92:	08 f0       	brcs	.+2      	; 0x1f96 <main+0x1428>
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	f8 0f       	add	r31, r24
    1f98:	e1 e0       	ldi	r30, 0x01	; 1
    1f9a:	f8 17       	cp	r31, r24
    1f9c:	08 f0       	brcs	.+2      	; 0x1fa0 <main+0x1432>
    1f9e:	e0 e0       	ldi	r30, 0x00	; 0
    1fa0:	97 01       	movw	r18, r14
    1fa2:	a8 01       	movw	r20, r16
    1fa4:	6b 2f       	mov	r22, r27
    1fa6:	7a 2f       	mov	r23, r26
    1fa8:	8f 2f       	mov	r24, r31
    1faa:	9e 0f       	add	r25, r30
    1fac:	03 e0       	ldi	r16, 0x03	; 3
    1fae:	0e 94 49 05 	call	0xa92	; 0xa92 <__ashrdi3>
    1fb2:	66 96       	adiw	r28, 0x16	; 22
    1fb4:	ae ad       	sts	0x6e, r26
    1fb6:	bf ad       	sts	0x6f, r27
    1fb8:	66 97       	sbiw	r28, 0x16	; 22
    1fba:	14 96       	adiw	r26, 0x04	; 4
    1fbc:	2c 93       	st	X, r18
    1fbe:	14 97       	sbiw	r26, 0x04	; 4
    1fc0:	15 96       	adiw	r26, 0x05	; 5
    1fc2:	3c 93       	st	X, r19
    1fc4:	15 97       	sbiw	r26, 0x05	; 5
    1fc6:	16 96       	adiw	r26, 0x06	; 6
    1fc8:	4c 93       	st	X, r20
    1fca:	16 97       	sbiw	r26, 0x06	; 6
    1fcc:	17 96       	adiw	r26, 0x07	; 7
    1fce:	5c 93       	st	X, r21
    1fd0:	0e 94 c9 14 	call	0x2992	; 0x2992 <sprintf>
    1fd4:	ed b7       	in	r30, 0x3d	; 61
    1fd6:	fe b7       	in	r31, 0x3e	; 62
    1fd8:	38 96       	adiw	r30, 0x08	; 8
    1fda:	0f b6       	in	r0, 0x3f	; 63
    1fdc:	f8 94       	cli
    1fde:	fe bf       	out	0x3e, r31	; 62
    1fe0:	0f be       	out	0x3f, r0	; 63
    1fe2:	ed bf       	out	0x3d, r30	; 61
    1fe4:	26 c1       	rjmp	.+588    	; 0x2232 <main+0x16c4>
						}							
					}
					else if(newMode==3){	//show measured current
    1fe6:	f3 e0       	ldi	r31, 0x03	; 3
    1fe8:	7f 16       	cp	r7, r31
    1fea:	39 f5       	brne	.+78     	; 0x203a <main+0x14cc>
						sprintf(buff,"%ld\n",device_current(ADC1_Voltage));
    1fec:	60 91 a7 00 	lds	r22, 0x00A7
    1ff0:	70 91 a8 00 	lds	r23, 0x00A8
    1ff4:	80 91 a9 00 	lds	r24, 0x00A9
    1ff8:	90 91 aa 00 	lds	r25, 0x00AA
    1ffc:	0e 94 c0 02 	call	0x580	; 0x580 <device_current>
    2000:	dc 01       	movw	r26, r24
    2002:	cb 01       	movw	r24, r22
    2004:	2d b7       	in	r18, 0x3d	; 61
    2006:	3e b7       	in	r19, 0x3e	; 62
    2008:	28 50       	subi	r18, 0x08	; 8
    200a:	30 40       	sbci	r19, 0x00	; 0
    200c:	0f b6       	in	r0, 0x3f	; 63
    200e:	f8 94       	cli
    2010:	3e bf       	out	0x3e, r19	; 62
    2012:	0f be       	out	0x3f, r0	; 63
    2014:	2d bf       	out	0x3d, r18	; 61
    2016:	4d b7       	in	r20, 0x3d	; 61
    2018:	5e b7       	in	r21, 0x3e	; 62
    201a:	4f 5f       	subi	r20, 0xFF	; 255
    201c:	5f 4f       	sbci	r21, 0xFF	; 255
    201e:	21 e0       	ldi	r18, 0x01	; 1
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	2c 0f       	add	r18, r28
    2024:	3d 1f       	adc	r19, r29
    2026:	ed b7       	in	r30, 0x3d	; 61
    2028:	fe b7       	in	r31, 0x3e	; 62
    202a:	32 83       	std	Z+2, r19	; 0x02
    202c:	21 83       	std	Z+1, r18	; 0x01
    202e:	2c e7       	ldi	r18, 0x7C	; 124
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	fa 01       	movw	r30, r20
    2034:	33 83       	std	Z+3, r19	; 0x03
    2036:	22 83       	std	Z+2, r18	; 0x02
    2038:	c1 c0       	rjmp	.+386    	; 0x21bc <main+0x164e>
					}
					else if(newMode==2 && (changeMode==0 || mode!=10)){
    203a:	32 e0       	ldi	r19, 0x02	; 2
    203c:	73 16       	cp	r7, r19
    203e:	31 f5       	brne	.+76     	; 0x208c <main+0x151e>
    2040:	66 20       	and	r6, r6
    2042:	31 f0       	breq	.+12     	; 0x2050 <main+0x14e2>
    2044:	64 96       	adiw	r28, 0x14	; 20
    2046:	4f ad       	sts	0x6f, r20
    2048:	64 97       	sbiw	r28, 0x14	; 20
    204a:	4a 30       	cpi	r20, 0x0A	; 10
    204c:	09 f4       	brne	.+2      	; 0x2050 <main+0x14e2>
    204e:	f1 c0       	rjmp	.+482    	; 0x2232 <main+0x16c4>
						sprintf(buff,"%ld\n",(long int)ADC2_Voltage);
    2050:	8d b7       	in	r24, 0x3d	; 61
    2052:	9e b7       	in	r25, 0x3e	; 62
    2054:	08 97       	sbiw	r24, 0x08	; 8
    2056:	0f b6       	in	r0, 0x3f	; 63
    2058:	f8 94       	cli
    205a:	9e bf       	out	0x3e, r25	; 62
    205c:	0f be       	out	0x3f, r0	; 63
    205e:	8d bf       	out	0x3d, r24	; 61
    2060:	ed b7       	in	r30, 0x3d	; 61
    2062:	fe b7       	in	r31, 0x3e	; 62
    2064:	31 96       	adiw	r30, 0x01	; 1
    2066:	21 e0       	ldi	r18, 0x01	; 1
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	2c 0f       	add	r18, r28
    206c:	3d 1f       	adc	r19, r29
    206e:	ad b7       	in	r26, 0x3d	; 61
    2070:	be b7       	in	r27, 0x3e	; 62
    2072:	12 96       	adiw	r26, 0x02	; 2
    2074:	3c 93       	st	X, r19
    2076:	2e 93       	st	-X, r18
    2078:	11 97       	sbiw	r26, 0x01	; 1
    207a:	4c e7       	ldi	r20, 0x7C	; 124
    207c:	50 e0       	ldi	r21, 0x00	; 0
    207e:	53 83       	std	Z+3, r21	; 0x03
    2080:	42 83       	std	Z+2, r20	; 0x02
    2082:	84 82       	std	Z+4, r8	; 0x04
    2084:	95 82       	std	Z+5, r9	; 0x05
    2086:	a6 82       	std	Z+6, r10	; 0x06
    2088:	b7 82       	std	Z+7, r11	; 0x07
    208a:	1c ce       	rjmp	.-968    	; 0x1cc4 <main+0x1156>
					}
					else if(newMode==1){
    208c:	91 e0       	ldi	r25, 0x01	; 1
    208e:	79 16       	cp	r7, r25
    2090:	09 f0       	breq	.+2      	; 0x2094 <main+0x1526>
    2092:	46 c0       	rjmp	.+140    	; 0x2120 <main+0x15b2>
						sprintf(buff,"%ld\n",(long int)((double)ADC2_Voltage/(double)device_current(ADC1_Voltage)*1000));
    2094:	60 91 a7 00 	lds	r22, 0x00A7
    2098:	70 91 a8 00 	lds	r23, 0x00A8
    209c:	80 91 a9 00 	lds	r24, 0x00A9
    20a0:	90 91 aa 00 	lds	r25, 0x00AA
    20a4:	0e 94 c0 02 	call	0x580	; 0x580 <device_current>
    20a8:	68 96       	adiw	r28, 0x18	; 24
    20aa:	6c af       	sts	0x7c, r22
    20ac:	7d af       	sts	0x7d, r23
    20ae:	8e af       	sts	0x7e, r24
    20b0:	9f af       	sts	0x7f, r25
    20b2:	68 97       	sbiw	r28, 0x18	; 24
    20b4:	ad b7       	in	r26, 0x3d	; 61
    20b6:	be b7       	in	r27, 0x3e	; 62
    20b8:	18 97       	sbiw	r26, 0x08	; 8
    20ba:	0f b6       	in	r0, 0x3f	; 63
    20bc:	f8 94       	cli
    20be:	be bf       	out	0x3e, r27	; 62
    20c0:	0f be       	out	0x3f, r0	; 63
    20c2:	ad bf       	out	0x3d, r26	; 61
    20c4:	0d b7       	in	r16, 0x3d	; 61
    20c6:	1e b7       	in	r17, 0x3e	; 62
    20c8:	0f 5f       	subi	r16, 0xFF	; 255
    20ca:	1f 4f       	sbci	r17, 0xFF	; 255
    20cc:	e1 e0       	ldi	r30, 0x01	; 1
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	ec 0f       	add	r30, r28
    20d2:	fd 1f       	adc	r31, r29
    20d4:	12 96       	adiw	r26, 0x02	; 2
    20d6:	fc 93       	st	X, r31
    20d8:	ee 93       	st	-X, r30
    20da:	11 97       	sbiw	r26, 0x01	; 1
    20dc:	ec e7       	ldi	r30, 0x7C	; 124
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	d8 01       	movw	r26, r16
    20e2:	13 96       	adiw	r26, 0x03	; 3
    20e4:	fc 93       	st	X, r31
    20e6:	ee 93       	st	-X, r30
    20e8:	12 97       	sbiw	r26, 0x02	; 2
    20ea:	94 01       	movw	r18, r8
    20ec:	a5 01       	movw	r20, r10
    20ee:	b6 01       	movw	r22, r12
    20f0:	c7 01       	movw	r24, r14
    20f2:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <__floatdisf>
    20f6:	6b 01       	movw	r12, r22
    20f8:	7c 01       	movw	r14, r24
    20fa:	68 96       	adiw	r28, 0x18	; 24
    20fc:	6c ad       	sts	0x6c, r22
    20fe:	7d ad       	sts	0x6d, r23
    2100:	8e ad       	sts	0x6e, r24
    2102:	9f ad       	sts	0x6f, r25
    2104:	68 97       	sbiw	r28, 0x18	; 24
    2106:	0e 94 de 12 	call	0x25bc	; 0x25bc <__floatsisf>
    210a:	9b 01       	movw	r18, r22
    210c:	ac 01       	movw	r20, r24
    210e:	c7 01       	movw	r24, r14
    2110:	b6 01       	movw	r22, r12
    2112:	0e 94 3f 12 	call	0x247e	; 0x247e <__divsf3>
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	4a e7       	ldi	r20, 0x7A	; 122
    211c:	54 e4       	ldi	r21, 0x44	; 68
    211e:	47 c0       	rjmp	.+142    	; 0x21ae <main+0x1640>
					}
					else if(newMode==0){	//show actual power
    2120:	77 20       	and	r7, r7
    2122:	09 f0       	breq	.+2      	; 0x2126 <main+0x15b8>
    2124:	5b c0       	rjmp	.+182    	; 0x21dc <main+0x166e>
						sprintf(buff,"%ld\n",(long int)(device_current(ADC1_Voltage)/1000000.0*ADC2_Voltage));
    2126:	60 91 a7 00 	lds	r22, 0x00A7
    212a:	70 91 a8 00 	lds	r23, 0x00A8
    212e:	80 91 a9 00 	lds	r24, 0x00A9
    2132:	90 91 aa 00 	lds	r25, 0x00AA
    2136:	0e 94 c0 02 	call	0x580	; 0x580 <device_current>
    213a:	4d b7       	in	r20, 0x3d	; 61
    213c:	5e b7       	in	r21, 0x3e	; 62
    213e:	48 50       	subi	r20, 0x08	; 8
    2140:	50 40       	sbci	r21, 0x00	; 0
    2142:	0f b6       	in	r0, 0x3f	; 63
    2144:	f8 94       	cli
    2146:	5e bf       	out	0x3e, r21	; 62
    2148:	0f be       	out	0x3f, r0	; 63
    214a:	4d bf       	out	0x3d, r20	; 61
    214c:	0d b7       	in	r16, 0x3d	; 61
    214e:	1e b7       	in	r17, 0x3e	; 62
    2150:	0f 5f       	subi	r16, 0xFF	; 255
    2152:	1f 4f       	sbci	r17, 0xFF	; 255
    2154:	e1 e0       	ldi	r30, 0x01	; 1
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	ec 0f       	add	r30, r28
    215a:	fd 1f       	adc	r31, r29
    215c:	ad b7       	in	r26, 0x3d	; 61
    215e:	be b7       	in	r27, 0x3e	; 62
    2160:	12 96       	adiw	r26, 0x02	; 2
    2162:	fc 93       	st	X, r31
    2164:	ee 93       	st	-X, r30
    2166:	11 97       	sbiw	r26, 0x01	; 1
    2168:	ec e7       	ldi	r30, 0x7C	; 124
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	d8 01       	movw	r26, r16
    216e:	13 96       	adiw	r26, 0x03	; 3
    2170:	fc 93       	st	X, r31
    2172:	ee 93       	st	-X, r30
    2174:	12 97       	sbiw	r26, 0x02	; 2
    2176:	0e 94 de 12 	call	0x25bc	; 0x25bc <__floatsisf>
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	34 e2       	ldi	r19, 0x24	; 36
    217e:	44 e7       	ldi	r20, 0x74	; 116
    2180:	59 e4       	ldi	r21, 0x49	; 73
    2182:	0e 94 3f 12 	call	0x247e	; 0x247e <__divsf3>
    2186:	68 96       	adiw	r28, 0x18	; 24
    2188:	6c af       	sts	0x7c, r22
    218a:	7d af       	sts	0x7d, r23
    218c:	8e af       	sts	0x7e, r24
    218e:	9f af       	sts	0x7f, r25
    2190:	68 97       	sbiw	r28, 0x18	; 24
    2192:	94 01       	movw	r18, r8
    2194:	a5 01       	movw	r20, r10
    2196:	b6 01       	movw	r22, r12
    2198:	c7 01       	movw	r24, r14
    219a:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <__floatdisf>
    219e:	9b 01       	movw	r18, r22
    21a0:	ac 01       	movw	r20, r24
    21a2:	68 96       	adiw	r28, 0x18	; 24
    21a4:	6c ad       	sts	0x6c, r22
    21a6:	7d ad       	sts	0x6d, r23
    21a8:	8e ad       	sts	0x6e, r24
    21aa:	9f ad       	sts	0x6f, r25
    21ac:	68 97       	sbiw	r28, 0x18	; 24
    21ae:	0e 94 b8 13 	call	0x2770	; 0x2770 <__mulsf3>
    21b2:	0e 94 a7 12 	call	0x254e	; 0x254e <__fixsfsi>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	f8 01       	movw	r30, r16
    21bc:	84 83       	std	Z+4, r24	; 0x04
    21be:	95 83       	std	Z+5, r25	; 0x05
    21c0:	a6 83       	std	Z+6, r26	; 0x06
    21c2:	b7 83       	std	Z+7, r27	; 0x07
    21c4:	0e 94 c9 14 	call	0x2992	; 0x2992 <sprintf>
    21c8:	2d b7       	in	r18, 0x3d	; 61
    21ca:	3e b7       	in	r19, 0x3e	; 62
    21cc:	28 5f       	subi	r18, 0xF8	; 248
    21ce:	3f 4f       	sbci	r19, 0xFF	; 255
    21d0:	0f b6       	in	r0, 0x3f	; 63
    21d2:	f8 94       	cli
    21d4:	3e bf       	out	0x3e, r19	; 62
    21d6:	0f be       	out	0x3f, r0	; 63
    21d8:	2d bf       	out	0x3d, r18	; 61
    21da:	2b c0       	rjmp	.+86     	; 0x2232 <main+0x16c4>
					}
					else if(mode==11 && changeMode==0){
    21dc:	64 96       	adiw	r28, 0x14	; 20
    21de:	3f ad       	sts	0x6f, r19
    21e0:	64 97       	sbiw	r28, 0x14	; 20
    21e2:	3b 30       	cpi	r19, 0x0B	; 11
    21e4:	31 f5       	brne	.+76     	; 0x2232 <main+0x16c4>
    21e6:	66 20       	and	r6, r6
    21e8:	21 f5       	brne	.+72     	; 0x2232 <main+0x16c4>
						sprintf(buff,"%d\n",DAC_code);
    21ea:	00 d0       	rcall	.+0      	; 0x21ec <main+0x167e>
    21ec:	00 d0       	rcall	.+0      	; 0x21ee <main+0x1680>
    21ee:	00 d0       	rcall	.+0      	; 0x21f0 <main+0x1682>
    21f0:	ed b7       	in	r30, 0x3d	; 61
    21f2:	fe b7       	in	r31, 0x3e	; 62
    21f4:	31 96       	adiw	r30, 0x01	; 1
    21f6:	21 e0       	ldi	r18, 0x01	; 1
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	2c 0f       	add	r18, r28
    21fc:	3d 1f       	adc	r19, r29
    21fe:	ad b7       	in	r26, 0x3d	; 61
    2200:	be b7       	in	r27, 0x3e	; 62
    2202:	12 96       	adiw	r26, 0x02	; 2
    2204:	3c 93       	st	X, r19
    2206:	2e 93       	st	-X, r18
    2208:	11 97       	sbiw	r26, 0x01	; 1
    220a:	41 e8       	ldi	r20, 0x81	; 129
    220c:	50 e0       	ldi	r21, 0x00	; 0
    220e:	53 83       	std	Z+3, r21	; 0x03
    2210:	42 83       	std	Z+2, r20	; 0x02
    2212:	80 91 8d 00 	lds	r24, 0x008D
    2216:	90 91 8e 00 	lds	r25, 0x008E
    221a:	95 83       	std	Z+5, r25	; 0x05
    221c:	84 83       	std	Z+4, r24	; 0x04
    221e:	0e 94 c9 14 	call	0x2992	; 0x2992 <sprintf>
    2222:	8d b7       	in	r24, 0x3d	; 61
    2224:	9e b7       	in	r25, 0x3e	; 62
    2226:	06 96       	adiw	r24, 0x06	; 6
    2228:	0f b6       	in	r0, 0x3f	; 63
    222a:	f8 94       	cli
    222c:	9e bf       	out	0x3e, r25	; 62
    222e:	0f be       	out	0x3f, r0	; 63
    2230:	8d bf       	out	0x3d, r24	; 61
    2232:	4e 01       	movw	r8, r28
    2234:	08 94       	sec
    2236:	81 1c       	adc	r8, r1
    2238:	91 1c       	adc	r9, r1
			sendToUART(buff);*/
			
			clearLCD();
			_delay_ms(2);
			uint8_t digitCounter=0;
			uint8_t dotPosition=7;
    223a:	f4 01       	movw	r30, r8
					}
					else if(mode==11 && changeMode==0){
						sprintf(buff,"%d\n",DAC_code);
					}
				}
				digitCounter=0;
    223c:	ff 24       	eor	r15, r15
				for (uint8_t i=0;i<15;i++){
					if(buff[i]=='\n') break;
    223e:	81 91       	ld	r24, Z+
    2240:	8a 30       	cpi	r24, 0x0A	; 10
    2242:	31 f4       	brne	.+12     	; 0x2250 <main+0x16e2>
					else digitCounter++;
				}
				if (digitCounter<dotPosition){		//Ads extra zeros to fill the number to 0.000000 format
    2244:	a2 96       	adiw	r28, 0x22	; 34
    2246:	9f ad       	sts	0x6f, r25
    2248:	a2 97       	sbiw	r28, 0x22	; 34
    224a:	f9 16       	cp	r15, r25
    224c:	70 f0       	brcs	.+28     	; 0x226a <main+0x16fc>
    224e:	04 c0       	rjmp	.+8      	; 0x2258 <main+0x16ea>
					}
				}
				digitCounter=0;
				for (uint8_t i=0;i<15;i++){
					if(buff[i]=='\n') break;
					else digitCounter++;
    2250:	f3 94       	inc	r15
					else if(mode==11 && changeMode==0){
						sprintf(buff,"%d\n",DAC_code);
					}
				}
				digitCounter=0;
				for (uint8_t i=0;i<15;i++){
    2252:	af e0       	ldi	r26, 0x0F	; 15
    2254:	fa 16       	cp	r15, r26
    2256:	99 f7       	brne	.-26     	; 0x223e <main+0x16d0>
					else digitCounter++;
				}
				if (digitCounter<dotPosition){		//Ads extra zeros to fill the number to 0.000000 format
					writeToLCD_Letter('0');
					writeToLCD_Letter('.');
					for(uint8_t i=0;i<dotPosition-digitCounter-1;i++){
    2258:	10 e0       	ldi	r17, 0x00	; 0
					}
				}
				for (uint8_t i=0;i<=digitCounter;i++){
					if(buff[i]=='\n') break;
					 writeToLCD_Letter(buff[i]);
					if(i==digitCounter-dotPosition)
    225a:	cf 2c       	mov	r12, r15
    225c:	dd 24       	eor	r13, r13
    225e:	a2 96       	adiw	r28, 0x22	; 34
    2260:	bf ad       	sts	0x6f, r27
    2262:	a2 97       	sbiw	r28, 0x22	; 34
    2264:	cb 1a       	sub	r12, r27
    2266:	d1 08       	sbc	r13, r1
    2268:	1b c0       	rjmp	.+54     	; 0x22a0 <main+0x1732>
				for (uint8_t i=0;i<15;i++){
					if(buff[i]=='\n') break;
					else digitCounter++;
				}
				if (digitCounter<dotPosition){		//Ads extra zeros to fill the number to 0.000000 format
					writeToLCD_Letter('0');
    226a:	80 e3       	ldi	r24, 0x30	; 48
    226c:	0e 94 a9 00 	call	0x152	; 0x152 <writeToLCD_Letter>
					writeToLCD_Letter('.');
    2270:	8e e2       	ldi	r24, 0x2E	; 46
    2272:	0e 94 a9 00 	call	0x152	; 0x152 <writeToLCD_Letter>
					for(uint8_t i=0;i<dotPosition-digitCounter-1;i++){
    2276:	ee 24       	eor	r14, r14
    2278:	a2 96       	adiw	r28, 0x22	; 34
    227a:	ef ad       	sts	0x6f, r30
    227c:	a2 97       	sbiw	r28, 0x22	; 34
    227e:	0e 2f       	mov	r16, r30
    2280:	10 e0       	ldi	r17, 0x00	; 0
    2282:	0f 19       	sub	r16, r15
    2284:	11 09       	sbc	r17, r1
    2286:	01 50       	subi	r16, 0x01	; 1
    2288:	10 40       	sbci	r17, 0x00	; 0
    228a:	04 c0       	rjmp	.+8      	; 0x2294 <main+0x1726>
						writeToLCD_Letter('0');
    228c:	80 e3       	ldi	r24, 0x30	; 48
    228e:	0e 94 a9 00 	call	0x152	; 0x152 <writeToLCD_Letter>
					else digitCounter++;
				}
				if (digitCounter<dotPosition){		//Ads extra zeros to fill the number to 0.000000 format
					writeToLCD_Letter('0');
					writeToLCD_Letter('.');
					for(uint8_t i=0;i<dotPosition-digitCounter-1;i++){
    2292:	e3 94       	inc	r14
    2294:	8e 2d       	mov	r24, r14
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	80 17       	cp	r24, r16
    229a:	91 07       	cpc	r25, r17
    229c:	bc f3       	brlt	.-18     	; 0x228c <main+0x171e>
    229e:	dc cf       	rjmp	.-72     	; 0x2258 <main+0x16ea>
						writeToLCD_Letter('0');
					}
				}
				for (uint8_t i=0;i<=digitCounter;i++){
					if(buff[i]=='\n') break;
    22a0:	a1 2e       	mov	r10, r17
    22a2:	bb 24       	eor	r11, r11
    22a4:	e1 e0       	ldi	r30, 0x01	; 1
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	ec 0f       	add	r30, r28
    22aa:	fd 1f       	adc	r31, r29
    22ac:	ea 0d       	add	r30, r10
    22ae:	fb 1d       	adc	r31, r11
    22b0:	80 81       	ld	r24, Z
    22b2:	8a 30       	cpi	r24, 0x0A	; 10
    22b4:	59 f0       	breq	.+22     	; 0x22cc <main+0x175e>
					 writeToLCD_Letter(buff[i]);
    22b6:	0e 94 a9 00 	call	0x152	; 0x152 <writeToLCD_Letter>
					if(i==digitCounter-dotPosition)
    22ba:	ac 14       	cp	r10, r12
    22bc:	bd 04       	cpc	r11, r13
    22be:	19 f4       	brne	.+6      	; 0x22c6 <main+0x1758>
						writeToLCD_Letter('.');
    22c0:	8e e2       	ldi	r24, 0x2E	; 46
    22c2:	0e 94 a9 00 	call	0x152	; 0x152 <writeToLCD_Letter>
					writeToLCD_Letter('.');
					for(uint8_t i=0;i<dotPosition-digitCounter-1;i++){
						writeToLCD_Letter('0');
					}
				}
				for (uint8_t i=0;i<=digitCounter;i++){
    22c6:	1f 5f       	subi	r17, 0xFF	; 255
    22c8:	f1 16       	cp	r15, r17
    22ca:	50 f7       	brcc	.-44     	; 0x22a0 <main+0x1732>
					 writeToLCD_Letter(buff[i]);
					if(i==digitCounter-dotPosition)
						writeToLCD_Letter('.');
				}
			
				if(newMode==0)										writeToLCD_Letter('W');
    22cc:	77 20       	and	r7, r7
    22ce:	11 f4       	brne	.+4      	; 0x22d4 <main+0x1766>
    22d0:	87 e5       	ldi	r24, 0x57	; 87
    22d2:	04 c0       	rjmp	.+8      	; 0x22dc <main+0x176e>
				if(newMode==1)										writeToLCD_Letter(0xF4);
    22d4:	f1 e0       	ldi	r31, 0x01	; 1
    22d6:	7f 16       	cp	r7, r31
    22d8:	19 f4       	brne	.+6      	; 0x22e0 <main+0x1772>
    22da:	84 ef       	ldi	r24, 0xF4	; 244
    22dc:	0e 94 a9 00 	call	0x152	; 0x152 <writeToLCD_Letter>
				if((mode==10 && changeMode==0) || newMode==2)		writeToLCD_Letter('V');
    22e0:	64 96       	adiw	r28, 0x14	; 20
    22e2:	2f ad       	sts	0x6f, r18
    22e4:	64 97       	sbiw	r28, 0x14	; 20
    22e6:	2a 30       	cpi	r18, 0x0A	; 10
    22e8:	11 f4       	brne	.+4      	; 0x22ee <main+0x1780>
    22ea:	66 20       	and	r6, r6
    22ec:	19 f0       	breq	.+6      	; 0x22f4 <main+0x1786>
    22ee:	32 e0       	ldi	r19, 0x02	; 2
    22f0:	73 16       	cp	r7, r19
    22f2:	11 f4       	brne	.+4      	; 0x22f8 <main+0x178a>
    22f4:	86 e5       	ldi	r24, 0x56	; 86
    22f6:	0b c0       	rjmp	.+22     	; 0x230e <main+0x17a0>
				else if((mode==11 && changeMode==0) || newMode==3)	writeToLCD_Letter('A');
    22f8:	64 96       	adiw	r28, 0x14	; 20
    22fa:	4f ad       	sts	0x6f, r20
    22fc:	64 97       	sbiw	r28, 0x14	; 20
    22fe:	4b 30       	cpi	r20, 0x0B	; 11
    2300:	11 f4       	brne	.+4      	; 0x2306 <main+0x1798>
    2302:	66 20       	and	r6, r6
    2304:	19 f0       	breq	.+6      	; 0x230c <main+0x179e>
    2306:	53 e0       	ldi	r21, 0x03	; 3
    2308:	75 16       	cp	r7, r21
    230a:	19 f4       	brne	.+6      	; 0x2312 <main+0x17a4>
    230c:	81 e4       	ldi	r24, 0x41	; 65
    230e:	0e 94 a9 00 	call	0x152	; 0x152 <writeToLCD_Letter>
				
				//print select gain
				if(mode==10 && changeMode==0){
    2312:	64 96       	adiw	r28, 0x14	; 20
    2314:	8f ad       	sts	0x6f, r24
    2316:	64 97       	sbiw	r28, 0x14	; 20
    2318:	8a 30       	cpi	r24, 0x0A	; 10
    231a:	a1 f5       	brne	.+104    	; 0x2384 <main+0x1816>
    231c:	66 20       	and	r6, r6
    231e:	09 f0       	breq	.+2      	; 0x2322 <main+0x17b4>
    2320:	9b c0       	rjmp	.+310    	; 0x2458 <main+0x18ea>
					secondLineLCD();
    2322:	0e 94 d5 00 	call	0x1aa	; 0x1aa <secondLineLCD>
					sprintf(buff,"G: %d\n",ADC2_Gain);
    2326:	00 d0       	rcall	.+0      	; 0x2328 <main+0x17ba>
    2328:	00 d0       	rcall	.+0      	; 0x232a <main+0x17bc>
    232a:	00 d0       	rcall	.+0      	; 0x232c <main+0x17be>
    232c:	ed b7       	in	r30, 0x3d	; 61
    232e:	fe b7       	in	r31, 0x3e	; 62
    2330:	31 96       	adiw	r30, 0x01	; 1
    2332:	21 e0       	ldi	r18, 0x01	; 1
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	2c 0f       	add	r18, r28
    2338:	3d 1f       	adc	r19, r29
    233a:	ad b7       	in	r26, 0x3d	; 61
    233c:	be b7       	in	r27, 0x3e	; 62
    233e:	12 96       	adiw	r26, 0x02	; 2
    2340:	3c 93       	st	X, r19
    2342:	2e 93       	st	-X, r18
    2344:	11 97       	sbiw	r26, 0x01	; 1
    2346:	45 e8       	ldi	r20, 0x85	; 133
    2348:	50 e0       	ldi	r21, 0x00	; 0
    234a:	53 83       	std	Z+3, r21	; 0x03
    234c:	42 83       	std	Z+2, r20	; 0x02
    234e:	69 96       	adiw	r28, 0x19	; 25
    2350:	5f ad       	sts	0x6f, r21
    2352:	69 97       	sbiw	r28, 0x19	; 25
    2354:	54 83       	std	Z+4, r21	; 0x04
    2356:	15 82       	std	Z+5, r1	; 0x05
    2358:	0e 94 c9 14 	call	0x2992	; 0x2992 <sprintf>
    235c:	8d b7       	in	r24, 0x3d	; 61
    235e:	9e b7       	in	r25, 0x3e	; 62
    2360:	06 96       	adiw	r24, 0x06	; 6
    2362:	0f b6       	in	r0, 0x3f	; 63
    2364:	f8 94       	cli
    2366:	9e bf       	out	0x3e, r25	; 62
    2368:	0f be       	out	0x3f, r0	; 63
    236a:	8d bf       	out	0x3d, r24	; 61
    236c:	18 e0       	ldi	r17, 0x08	; 8
					for (uint8_t i=0;i<8;i++){
						if(buff[i]=='\n') break;
    236e:	d4 01       	movw	r26, r8
    2370:	8d 91       	ld	r24, X+
    2372:	4d 01       	movw	r8, r26
    2374:	8a 30       	cpi	r24, 0x0A	; 10
    2376:	09 f4       	brne	.+2      	; 0x237a <main+0x180c>
    2378:	6f c0       	rjmp	.+222    	; 0x2458 <main+0x18ea>
						writeToLCD_Letter(buff[i]);
    237a:	0e 94 a9 00 	call	0x152	; 0x152 <writeToLCD_Letter>
    237e:	11 50       	subi	r17, 0x01	; 1
				
				//print select gain
				if(mode==10 && changeMode==0){
					secondLineLCD();
					sprintf(buff,"G: %d\n",ADC2_Gain);
					for (uint8_t i=0;i<8;i++){
    2380:	b1 f7       	brne	.-20     	; 0x236e <main+0x1800>
    2382:	6a c0       	rjmp	.+212    	; 0x2458 <main+0x18ea>
				}
			}				
		}		
		
		/*-------------------------------------------------------------Mode--------------------------------------------------------------*/
		switch (mode){
    2384:	64 96       	adiw	r28, 0x14	; 20
    2386:	bf ad       	sts	0x6f, r27
    2388:	64 97       	sbiw	r28, 0x14	; 20
    238a:	b2 30       	cpi	r27, 0x02	; 2
    238c:	09 f4       	brne	.+2      	; 0x2390 <main+0x1822>
    238e:	48 c0       	rjmp	.+144    	; 0x2420 <main+0x18b2>
    2390:	b3 30       	cpi	r27, 0x03	; 3
    2392:	38 f4       	brcc	.+14     	; 0x23a2 <main+0x1834>
    2394:	bb 23       	and	r27, r27
    2396:	81 f0       	breq	.+32     	; 0x23b8 <main+0x184a>
    2398:	b1 30       	cpi	r27, 0x01	; 1
    239a:	11 f0       	breq	.+4      	; 0x23a0 <main+0x1832>
    239c:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <main+0x9e>
    23a0:	25 c0       	rjmp	.+74     	; 0x23ec <main+0x187e>
    23a2:	64 96       	adiw	r28, 0x14	; 20
    23a4:	ef ad       	sts	0x6f, r30
    23a6:	64 97       	sbiw	r28, 0x14	; 20
    23a8:	e3 30       	cpi	r30, 0x03	; 3
    23aa:	09 f4       	brne	.+2      	; 0x23ae <main+0x1840>
    23ac:	43 c0       	rjmp	.+134    	; 0x2434 <main+0x18c6>
    23ae:	ea 30       	cpi	r30, 0x0A	; 10
    23b0:	11 f0       	breq	.+4      	; 0x23b6 <main+0x1848>
    23b2:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <main+0x9e>
    23b6:	50 c0       	rjmp	.+160    	; 0x2458 <main+0x18ea>
			case 0:	//const P
				constantPowerMode(setValue,ADC1_Voltage,ADC2_Voltage);
    23b8:	20 91 a7 00 	lds	r18, 0x00A7
    23bc:	30 91 a8 00 	lds	r19, 0x00A8
    23c0:	40 91 a9 00 	lds	r20, 0x00A9
    23c4:	50 91 aa 00 	lds	r21, 0x00AA
    23c8:	e0 90 9f 00 	lds	r14, 0x009F
    23cc:	f0 90 a0 00 	lds	r15, 0x00A0
    23d0:	00 91 a1 00 	lds	r16, 0x00A1
    23d4:	10 91 a2 00 	lds	r17, 0x00A2
    23d8:	a1 96       	adiw	r28, 0x21	; 33
    23da:	6c ad       	sts	0x6c, r22
    23dc:	7d ad       	sts	0x6d, r23
    23de:	8e ad       	sts	0x6e, r24
    23e0:	9f ad       	sts	0x6f, r25
    23e2:	a1 97       	sbiw	r28, 0x21	; 33
    23e4:	0e 94 68 03 	call	0x6d0	; 0x6d0 <constantPowerMode>
				break;
    23e8:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <main+0x9e>
			case 1: //const R
				constantResistanceMode(setValue,ADC1_Voltage,ADC2_Voltage);
    23ec:	20 91 a7 00 	lds	r18, 0x00A7
    23f0:	30 91 a8 00 	lds	r19, 0x00A8
    23f4:	40 91 a9 00 	lds	r20, 0x00A9
    23f8:	50 91 aa 00 	lds	r21, 0x00AA
    23fc:	e0 90 9f 00 	lds	r14, 0x009F
    2400:	f0 90 a0 00 	lds	r15, 0x00A0
    2404:	00 91 a1 00 	lds	r16, 0x00A1
    2408:	10 91 a2 00 	lds	r17, 0x00A2
    240c:	a1 96       	adiw	r28, 0x21	; 33
    240e:	6c ad       	sts	0x6c, r22
    2410:	7d ad       	sts	0x6d, r23
    2412:	8e ad       	sts	0x6e, r24
    2414:	9f ad       	sts	0x6f, r25
    2416:	a1 97       	sbiw	r28, 0x21	; 33
    2418:	0e 94 9d 03 	call	0x73a	; 0x73a <constantResistanceMode>
				break;
    241c:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <main+0x9e>
			case 2: //const U
				constantVoltageMode(setValue);
    2420:	a1 96       	adiw	r28, 0x21	; 33
    2422:	6c ad       	sts	0x6c, r22
    2424:	7d ad       	sts	0x6d, r23
    2426:	8e ad       	sts	0x6e, r24
    2428:	9f ad       	sts	0x6f, r25
    242a:	a1 97       	sbiw	r28, 0x21	; 33
    242c:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <constantVoltageMode>
				break;
    2430:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <main+0x9e>
			case 3: //const I
				constantCurrentMode(setValue,ADC1_Voltage);
    2434:	20 91 a7 00 	lds	r18, 0x00A7
    2438:	30 91 a8 00 	lds	r19, 0x00A8
    243c:	40 91 a9 00 	lds	r20, 0x00A9
    2440:	50 91 aa 00 	lds	r21, 0x00AA
    2444:	a1 96       	adiw	r28, 0x21	; 33
    2446:	6c ad       	sts	0x6c, r22
    2448:	7d ad       	sts	0x6d, r23
    244a:	8e ad       	sts	0x6e, r24
    244c:	9f ad       	sts	0x6f, r25
    244e:	a1 97       	sbiw	r28, 0x21	; 33
    2450:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <constantCurrentMode>
				break;
    2454:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <main+0x9e>
			case 10:	//read V
				constantCurrentMode(0,ADC1_Voltage);		//mosfet turn off
    2458:	20 91 a7 00 	lds	r18, 0x00A7
    245c:	30 91 a8 00 	lds	r19, 0x00A8
    2460:	40 91 a9 00 	lds	r20, 0x00A9
    2464:	50 91 aa 00 	lds	r21, 0x00AA
    2468:	60 e0       	ldi	r22, 0x00	; 0
    246a:	70 e0       	ldi	r23, 0x00	; 0
    246c:	cb 01       	movw	r24, r22
    246e:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <constantCurrentMode>
				break;
    2472:	fa e0       	ldi	r31, 0x0A	; 10
    2474:	64 96       	adiw	r28, 0x14	; 20
    2476:	ff af       	sts	0x7f, r31
    2478:	64 97       	sbiw	r28, 0x14	; 20
    247a:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <main+0x9e>

0000247e <__divsf3>:
    247e:	0c d0       	rcall	.+24     	; 0x2498 <__divsf3x>
    2480:	3d c1       	rjmp	.+634    	; 0x26fc <__fp_round>
    2482:	35 d1       	rcall	.+618    	; 0x26ee <__fp_pscB>
    2484:	40 f0       	brcs	.+16     	; 0x2496 <__divsf3+0x18>
    2486:	2c d1       	rcall	.+600    	; 0x26e0 <__fp_pscA>
    2488:	30 f0       	brcs	.+12     	; 0x2496 <__divsf3+0x18>
    248a:	21 f4       	brne	.+8      	; 0x2494 <__divsf3+0x16>
    248c:	5f 3f       	cpi	r21, 0xFF	; 255
    248e:	19 f0       	breq	.+6      	; 0x2496 <__divsf3+0x18>
    2490:	0e c1       	rjmp	.+540    	; 0x26ae <__fp_inf>
    2492:	51 11       	cpse	r21, r1
    2494:	67 c1       	rjmp	.+718    	; 0x2764 <__fp_szero>
    2496:	11 c1       	rjmp	.+546    	; 0x26ba <__fp_nan>

00002498 <__divsf3x>:
    2498:	42 d1       	rcall	.+644    	; 0x271e <__fp_split3>
    249a:	98 f3       	brcs	.-26     	; 0x2482 <__divsf3+0x4>

0000249c <__divsf3_pse>:
    249c:	99 23       	and	r25, r25
    249e:	c9 f3       	breq	.-14     	; 0x2492 <__divsf3+0x14>
    24a0:	55 23       	and	r21, r21
    24a2:	b1 f3       	breq	.-20     	; 0x2490 <__divsf3+0x12>
    24a4:	95 1b       	sub	r25, r21
    24a6:	55 0b       	sbc	r21, r21
    24a8:	bb 27       	eor	r27, r27
    24aa:	aa 27       	eor	r26, r26
    24ac:	62 17       	cp	r22, r18
    24ae:	73 07       	cpc	r23, r19
    24b0:	84 07       	cpc	r24, r20
    24b2:	38 f0       	brcs	.+14     	; 0x24c2 <__divsf3_pse+0x26>
    24b4:	9f 5f       	subi	r25, 0xFF	; 255
    24b6:	5f 4f       	sbci	r21, 0xFF	; 255
    24b8:	22 0f       	add	r18, r18
    24ba:	33 1f       	adc	r19, r19
    24bc:	44 1f       	adc	r20, r20
    24be:	aa 1f       	adc	r26, r26
    24c0:	a9 f3       	breq	.-22     	; 0x24ac <__divsf3_pse+0x10>
    24c2:	33 d0       	rcall	.+102    	; 0x252a <__divsf3_pse+0x8e>
    24c4:	0e 2e       	mov	r0, r30
    24c6:	3a f0       	brmi	.+14     	; 0x24d6 <__divsf3_pse+0x3a>
    24c8:	e0 e8       	ldi	r30, 0x80	; 128
    24ca:	30 d0       	rcall	.+96     	; 0x252c <__divsf3_pse+0x90>
    24cc:	91 50       	subi	r25, 0x01	; 1
    24ce:	50 40       	sbci	r21, 0x00	; 0
    24d0:	e6 95       	lsr	r30
    24d2:	00 1c       	adc	r0, r0
    24d4:	ca f7       	brpl	.-14     	; 0x24c8 <__divsf3_pse+0x2c>
    24d6:	29 d0       	rcall	.+82     	; 0x252a <__divsf3_pse+0x8e>
    24d8:	fe 2f       	mov	r31, r30
    24da:	27 d0       	rcall	.+78     	; 0x252a <__divsf3_pse+0x8e>
    24dc:	66 0f       	add	r22, r22
    24de:	77 1f       	adc	r23, r23
    24e0:	88 1f       	adc	r24, r24
    24e2:	bb 1f       	adc	r27, r27
    24e4:	26 17       	cp	r18, r22
    24e6:	37 07       	cpc	r19, r23
    24e8:	48 07       	cpc	r20, r24
    24ea:	ab 07       	cpc	r26, r27
    24ec:	b0 e8       	ldi	r27, 0x80	; 128
    24ee:	09 f0       	breq	.+2      	; 0x24f2 <__divsf3_pse+0x56>
    24f0:	bb 0b       	sbc	r27, r27
    24f2:	80 2d       	mov	r24, r0
    24f4:	bf 01       	movw	r22, r30
    24f6:	ff 27       	eor	r31, r31
    24f8:	93 58       	subi	r25, 0x83	; 131
    24fa:	5f 4f       	sbci	r21, 0xFF	; 255
    24fc:	2a f0       	brmi	.+10     	; 0x2508 <__divsf3_pse+0x6c>
    24fe:	9e 3f       	cpi	r25, 0xFE	; 254
    2500:	51 05       	cpc	r21, r1
    2502:	68 f0       	brcs	.+26     	; 0x251e <__divsf3_pse+0x82>
    2504:	d4 c0       	rjmp	.+424    	; 0x26ae <__fp_inf>
    2506:	2e c1       	rjmp	.+604    	; 0x2764 <__fp_szero>
    2508:	5f 3f       	cpi	r21, 0xFF	; 255
    250a:	ec f3       	brlt	.-6      	; 0x2506 <__divsf3_pse+0x6a>
    250c:	98 3e       	cpi	r25, 0xE8	; 232
    250e:	dc f3       	brlt	.-10     	; 0x2506 <__divsf3_pse+0x6a>
    2510:	86 95       	lsr	r24
    2512:	77 95       	ror	r23
    2514:	67 95       	ror	r22
    2516:	b7 95       	ror	r27
    2518:	f7 95       	ror	r31
    251a:	9f 5f       	subi	r25, 0xFF	; 255
    251c:	c9 f7       	brne	.-14     	; 0x2510 <__divsf3_pse+0x74>
    251e:	88 0f       	add	r24, r24
    2520:	91 1d       	adc	r25, r1
    2522:	96 95       	lsr	r25
    2524:	87 95       	ror	r24
    2526:	97 f9       	bld	r25, 7
    2528:	08 95       	ret
    252a:	e1 e0       	ldi	r30, 0x01	; 1
    252c:	66 0f       	add	r22, r22
    252e:	77 1f       	adc	r23, r23
    2530:	88 1f       	adc	r24, r24
    2532:	bb 1f       	adc	r27, r27
    2534:	62 17       	cp	r22, r18
    2536:	73 07       	cpc	r23, r19
    2538:	84 07       	cpc	r24, r20
    253a:	ba 07       	cpc	r27, r26
    253c:	20 f0       	brcs	.+8      	; 0x2546 <__divsf3_pse+0xaa>
    253e:	62 1b       	sub	r22, r18
    2540:	73 0b       	sbc	r23, r19
    2542:	84 0b       	sbc	r24, r20
    2544:	ba 0b       	sbc	r27, r26
    2546:	ee 1f       	adc	r30, r30
    2548:	88 f7       	brcc	.-30     	; 0x252c <__divsf3_pse+0x90>
    254a:	e0 95       	com	r30
    254c:	08 95       	ret

0000254e <__fixsfsi>:
    254e:	04 d0       	rcall	.+8      	; 0x2558 <__fixunssfsi>
    2550:	68 94       	set
    2552:	b1 11       	cpse	r27, r1
    2554:	07 c1       	rjmp	.+526    	; 0x2764 <__fp_szero>
    2556:	08 95       	ret

00002558 <__fixunssfsi>:
    2558:	ea d0       	rcall	.+468    	; 0x272e <__fp_splitA>
    255a:	88 f0       	brcs	.+34     	; 0x257e <__fixunssfsi+0x26>
    255c:	9f 57       	subi	r25, 0x7F	; 127
    255e:	90 f0       	brcs	.+36     	; 0x2584 <__fixunssfsi+0x2c>
    2560:	b9 2f       	mov	r27, r25
    2562:	99 27       	eor	r25, r25
    2564:	b7 51       	subi	r27, 0x17	; 23
    2566:	a0 f0       	brcs	.+40     	; 0x2590 <__fixunssfsi+0x38>
    2568:	d1 f0       	breq	.+52     	; 0x259e <__fixunssfsi+0x46>
    256a:	66 0f       	add	r22, r22
    256c:	77 1f       	adc	r23, r23
    256e:	88 1f       	adc	r24, r24
    2570:	99 1f       	adc	r25, r25
    2572:	1a f0       	brmi	.+6      	; 0x257a <__fixunssfsi+0x22>
    2574:	ba 95       	dec	r27
    2576:	c9 f7       	brne	.-14     	; 0x256a <__fixunssfsi+0x12>
    2578:	12 c0       	rjmp	.+36     	; 0x259e <__fixunssfsi+0x46>
    257a:	b1 30       	cpi	r27, 0x01	; 1
    257c:	81 f0       	breq	.+32     	; 0x259e <__fixunssfsi+0x46>
    257e:	f1 d0       	rcall	.+482    	; 0x2762 <__fp_zero>
    2580:	b1 e0       	ldi	r27, 0x01	; 1
    2582:	08 95       	ret
    2584:	ee c0       	rjmp	.+476    	; 0x2762 <__fp_zero>
    2586:	67 2f       	mov	r22, r23
    2588:	78 2f       	mov	r23, r24
    258a:	88 27       	eor	r24, r24
    258c:	b8 5f       	subi	r27, 0xF8	; 248
    258e:	39 f0       	breq	.+14     	; 0x259e <__fixunssfsi+0x46>
    2590:	b9 3f       	cpi	r27, 0xF9	; 249
    2592:	cc f3       	brlt	.-14     	; 0x2586 <__fixunssfsi+0x2e>
    2594:	86 95       	lsr	r24
    2596:	77 95       	ror	r23
    2598:	67 95       	ror	r22
    259a:	b3 95       	inc	r27
    259c:	d9 f7       	brne	.-10     	; 0x2594 <__fixunssfsi+0x3c>
    259e:	3e f4       	brtc	.+14     	; 0x25ae <__fixunssfsi+0x56>
    25a0:	90 95       	com	r25
    25a2:	80 95       	com	r24
    25a4:	70 95       	com	r23
    25a6:	61 95       	neg	r22
    25a8:	7f 4f       	sbci	r23, 0xFF	; 255
    25aa:	8f 4f       	sbci	r24, 0xFF	; 255
    25ac:	9f 4f       	sbci	r25, 0xFF	; 255
    25ae:	08 95       	ret

000025b0 <__floatdisf>:
    25b0:	97 fb       	bst	r25, 7
    25b2:	0e f4       	brtc	.+2      	; 0x25b6 <__floatdisf+0x6>
    25b4:	85 d0       	rcall	.+266    	; 0x26c0 <__fp_negdi>
    25b6:	3e c0       	rjmp	.+124    	; 0x2634 <__fp_di2sf>

000025b8 <__floatunsisf>:
    25b8:	e8 94       	clt
    25ba:	09 c0       	rjmp	.+18     	; 0x25ce <__floatsisf+0x12>

000025bc <__floatsisf>:
    25bc:	97 fb       	bst	r25, 7
    25be:	3e f4       	brtc	.+14     	; 0x25ce <__floatsisf+0x12>
    25c0:	90 95       	com	r25
    25c2:	80 95       	com	r24
    25c4:	70 95       	com	r23
    25c6:	61 95       	neg	r22
    25c8:	7f 4f       	sbci	r23, 0xFF	; 255
    25ca:	8f 4f       	sbci	r24, 0xFF	; 255
    25cc:	9f 4f       	sbci	r25, 0xFF	; 255
    25ce:	99 23       	and	r25, r25
    25d0:	a9 f0       	breq	.+42     	; 0x25fc <__floatsisf+0x40>
    25d2:	f9 2f       	mov	r31, r25
    25d4:	96 e9       	ldi	r25, 0x96	; 150
    25d6:	bb 27       	eor	r27, r27
    25d8:	93 95       	inc	r25
    25da:	f6 95       	lsr	r31
    25dc:	87 95       	ror	r24
    25de:	77 95       	ror	r23
    25e0:	67 95       	ror	r22
    25e2:	b7 95       	ror	r27
    25e4:	f1 11       	cpse	r31, r1
    25e6:	f8 cf       	rjmp	.-16     	; 0x25d8 <__floatsisf+0x1c>
    25e8:	fa f4       	brpl	.+62     	; 0x2628 <__floatsisf+0x6c>
    25ea:	bb 0f       	add	r27, r27
    25ec:	11 f4       	brne	.+4      	; 0x25f2 <__floatsisf+0x36>
    25ee:	60 ff       	sbrs	r22, 0
    25f0:	1b c0       	rjmp	.+54     	; 0x2628 <__floatsisf+0x6c>
    25f2:	6f 5f       	subi	r22, 0xFF	; 255
    25f4:	7f 4f       	sbci	r23, 0xFF	; 255
    25f6:	8f 4f       	sbci	r24, 0xFF	; 255
    25f8:	9f 4f       	sbci	r25, 0xFF	; 255
    25fa:	16 c0       	rjmp	.+44     	; 0x2628 <__floatsisf+0x6c>
    25fc:	88 23       	and	r24, r24
    25fe:	11 f0       	breq	.+4      	; 0x2604 <__floatsisf+0x48>
    2600:	96 e9       	ldi	r25, 0x96	; 150
    2602:	11 c0       	rjmp	.+34     	; 0x2626 <__floatsisf+0x6a>
    2604:	77 23       	and	r23, r23
    2606:	21 f0       	breq	.+8      	; 0x2610 <__floatsisf+0x54>
    2608:	9e e8       	ldi	r25, 0x8E	; 142
    260a:	87 2f       	mov	r24, r23
    260c:	76 2f       	mov	r23, r22
    260e:	05 c0       	rjmp	.+10     	; 0x261a <__floatsisf+0x5e>
    2610:	66 23       	and	r22, r22
    2612:	71 f0       	breq	.+28     	; 0x2630 <__floatsisf+0x74>
    2614:	96 e8       	ldi	r25, 0x86	; 134
    2616:	86 2f       	mov	r24, r22
    2618:	70 e0       	ldi	r23, 0x00	; 0
    261a:	60 e0       	ldi	r22, 0x00	; 0
    261c:	2a f0       	brmi	.+10     	; 0x2628 <__floatsisf+0x6c>
    261e:	9a 95       	dec	r25
    2620:	66 0f       	add	r22, r22
    2622:	77 1f       	adc	r23, r23
    2624:	88 1f       	adc	r24, r24
    2626:	da f7       	brpl	.-10     	; 0x261e <__floatsisf+0x62>
    2628:	88 0f       	add	r24, r24
    262a:	96 95       	lsr	r25
    262c:	87 95       	ror	r24
    262e:	97 f9       	bld	r25, 7
    2630:	08 95       	ret

00002632 <__floatundisf>:
    2632:	e8 94       	clt

00002634 <__fp_di2sf>:
    2634:	f9 2f       	mov	r31, r25
    2636:	96 eb       	ldi	r25, 0xB6	; 182
    2638:	ff 23       	and	r31, r31
    263a:	81 f0       	breq	.+32     	; 0x265c <__fp_di2sf+0x28>
    263c:	12 16       	cp	r1, r18
    263e:	13 06       	cpc	r1, r19
    2640:	14 06       	cpc	r1, r20
    2642:	44 0b       	sbc	r20, r20
    2644:	93 95       	inc	r25
    2646:	f6 95       	lsr	r31
    2648:	87 95       	ror	r24
    264a:	77 95       	ror	r23
    264c:	67 95       	ror	r22
    264e:	57 95       	ror	r21
    2650:	40 40       	sbci	r20, 0x00	; 0
    2652:	ff 23       	and	r31, r31
    2654:	b9 f7       	brne	.-18     	; 0x2644 <__fp_di2sf+0x10>
    2656:	1b c0       	rjmp	.+54     	; 0x268e <__fp_di2sf+0x5a>
    2658:	99 27       	eor	r25, r25
    265a:	08 95       	ret
    265c:	88 23       	and	r24, r24
    265e:	51 f4       	brne	.+20     	; 0x2674 <__fp_di2sf+0x40>
    2660:	98 50       	subi	r25, 0x08	; 8
    2662:	d2 f7       	brpl	.-12     	; 0x2658 <__fp_di2sf+0x24>
    2664:	87 2b       	or	r24, r23
    2666:	76 2f       	mov	r23, r22
    2668:	65 2f       	mov	r22, r21
    266a:	54 2f       	mov	r21, r20
    266c:	43 2f       	mov	r20, r19
    266e:	32 2f       	mov	r19, r18
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	b1 f3       	breq	.-20     	; 0x2660 <__fp_di2sf+0x2c>
    2674:	12 16       	cp	r1, r18
    2676:	13 06       	cpc	r1, r19
    2678:	14 06       	cpc	r1, r20
    267a:	44 0b       	sbc	r20, r20
    267c:	88 23       	and	r24, r24
    267e:	3a f0       	brmi	.+14     	; 0x268e <__fp_di2sf+0x5a>
    2680:	9a 95       	dec	r25
    2682:	44 0f       	add	r20, r20
    2684:	55 1f       	adc	r21, r21
    2686:	66 1f       	adc	r22, r22
    2688:	77 1f       	adc	r23, r23
    268a:	88 1f       	adc	r24, r24
    268c:	ca f7       	brpl	.-14     	; 0x2680 <__fp_di2sf+0x4c>
    268e:	55 23       	and	r21, r21
    2690:	4a f4       	brpl	.+18     	; 0x26a4 <__fp_di2sf+0x70>
    2692:	44 0f       	add	r20, r20
    2694:	55 1f       	adc	r21, r21
    2696:	11 f4       	brne	.+4      	; 0x269c <__fp_di2sf+0x68>
    2698:	60 ff       	sbrs	r22, 0
    269a:	04 c0       	rjmp	.+8      	; 0x26a4 <__fp_di2sf+0x70>
    269c:	6f 5f       	subi	r22, 0xFF	; 255
    269e:	7f 4f       	sbci	r23, 0xFF	; 255
    26a0:	8f 4f       	sbci	r24, 0xFF	; 255
    26a2:	9f 4f       	sbci	r25, 0xFF	; 255
    26a4:	88 0f       	add	r24, r24
    26a6:	96 95       	lsr	r25
    26a8:	87 95       	ror	r24
    26aa:	97 f9       	bld	r25, 7
    26ac:	08 95       	ret

000026ae <__fp_inf>:
    26ae:	97 f9       	bld	r25, 7
    26b0:	9f 67       	ori	r25, 0x7F	; 127
    26b2:	80 e8       	ldi	r24, 0x80	; 128
    26b4:	70 e0       	ldi	r23, 0x00	; 0
    26b6:	60 e0       	ldi	r22, 0x00	; 0
    26b8:	08 95       	ret

000026ba <__fp_nan>:
    26ba:	9f ef       	ldi	r25, 0xFF	; 255
    26bc:	80 ec       	ldi	r24, 0xC0	; 192
    26be:	08 95       	ret

000026c0 <__fp_negdi>:
    26c0:	90 95       	com	r25
    26c2:	80 95       	com	r24
    26c4:	70 95       	com	r23
    26c6:	60 95       	com	r22
    26c8:	50 95       	com	r21
    26ca:	40 95       	com	r20
    26cc:	30 95       	com	r19
    26ce:	21 95       	neg	r18
    26d0:	3f 4f       	sbci	r19, 0xFF	; 255
    26d2:	4f 4f       	sbci	r20, 0xFF	; 255
    26d4:	5f 4f       	sbci	r21, 0xFF	; 255
    26d6:	6f 4f       	sbci	r22, 0xFF	; 255
    26d8:	7f 4f       	sbci	r23, 0xFF	; 255
    26da:	8f 4f       	sbci	r24, 0xFF	; 255
    26dc:	9f 4f       	sbci	r25, 0xFF	; 255
    26de:	08 95       	ret

000026e0 <__fp_pscA>:
    26e0:	00 24       	eor	r0, r0
    26e2:	0a 94       	dec	r0
    26e4:	16 16       	cp	r1, r22
    26e6:	17 06       	cpc	r1, r23
    26e8:	18 06       	cpc	r1, r24
    26ea:	09 06       	cpc	r0, r25
    26ec:	08 95       	ret

000026ee <__fp_pscB>:
    26ee:	00 24       	eor	r0, r0
    26f0:	0a 94       	dec	r0
    26f2:	12 16       	cp	r1, r18
    26f4:	13 06       	cpc	r1, r19
    26f6:	14 06       	cpc	r1, r20
    26f8:	05 06       	cpc	r0, r21
    26fa:	08 95       	ret

000026fc <__fp_round>:
    26fc:	09 2e       	mov	r0, r25
    26fe:	03 94       	inc	r0
    2700:	00 0c       	add	r0, r0
    2702:	11 f4       	brne	.+4      	; 0x2708 <__fp_round+0xc>
    2704:	88 23       	and	r24, r24
    2706:	52 f0       	brmi	.+20     	; 0x271c <__fp_round+0x20>
    2708:	bb 0f       	add	r27, r27
    270a:	40 f4       	brcc	.+16     	; 0x271c <__fp_round+0x20>
    270c:	bf 2b       	or	r27, r31
    270e:	11 f4       	brne	.+4      	; 0x2714 <__fp_round+0x18>
    2710:	60 ff       	sbrs	r22, 0
    2712:	04 c0       	rjmp	.+8      	; 0x271c <__fp_round+0x20>
    2714:	6f 5f       	subi	r22, 0xFF	; 255
    2716:	7f 4f       	sbci	r23, 0xFF	; 255
    2718:	8f 4f       	sbci	r24, 0xFF	; 255
    271a:	9f 4f       	sbci	r25, 0xFF	; 255
    271c:	08 95       	ret

0000271e <__fp_split3>:
    271e:	57 fd       	sbrc	r21, 7
    2720:	90 58       	subi	r25, 0x80	; 128
    2722:	44 0f       	add	r20, r20
    2724:	55 1f       	adc	r21, r21
    2726:	59 f0       	breq	.+22     	; 0x273e <__fp_splitA+0x10>
    2728:	5f 3f       	cpi	r21, 0xFF	; 255
    272a:	71 f0       	breq	.+28     	; 0x2748 <__fp_splitA+0x1a>
    272c:	47 95       	ror	r20

0000272e <__fp_splitA>:
    272e:	88 0f       	add	r24, r24
    2730:	97 fb       	bst	r25, 7
    2732:	99 1f       	adc	r25, r25
    2734:	61 f0       	breq	.+24     	; 0x274e <__fp_splitA+0x20>
    2736:	9f 3f       	cpi	r25, 0xFF	; 255
    2738:	79 f0       	breq	.+30     	; 0x2758 <__fp_splitA+0x2a>
    273a:	87 95       	ror	r24
    273c:	08 95       	ret
    273e:	12 16       	cp	r1, r18
    2740:	13 06       	cpc	r1, r19
    2742:	14 06       	cpc	r1, r20
    2744:	55 1f       	adc	r21, r21
    2746:	f2 cf       	rjmp	.-28     	; 0x272c <__fp_split3+0xe>
    2748:	46 95       	lsr	r20
    274a:	f1 df       	rcall	.-30     	; 0x272e <__fp_splitA>
    274c:	08 c0       	rjmp	.+16     	; 0x275e <__fp_splitA+0x30>
    274e:	16 16       	cp	r1, r22
    2750:	17 06       	cpc	r1, r23
    2752:	18 06       	cpc	r1, r24
    2754:	99 1f       	adc	r25, r25
    2756:	f1 cf       	rjmp	.-30     	; 0x273a <__fp_splitA+0xc>
    2758:	86 95       	lsr	r24
    275a:	71 05       	cpc	r23, r1
    275c:	61 05       	cpc	r22, r1
    275e:	08 94       	sec
    2760:	08 95       	ret

00002762 <__fp_zero>:
    2762:	e8 94       	clt

00002764 <__fp_szero>:
    2764:	bb 27       	eor	r27, r27
    2766:	66 27       	eor	r22, r22
    2768:	77 27       	eor	r23, r23
    276a:	cb 01       	movw	r24, r22
    276c:	97 f9       	bld	r25, 7
    276e:	08 95       	ret

00002770 <__mulsf3>:
    2770:	0b d0       	rcall	.+22     	; 0x2788 <__mulsf3x>
    2772:	c4 cf       	rjmp	.-120    	; 0x26fc <__fp_round>
    2774:	b5 df       	rcall	.-150    	; 0x26e0 <__fp_pscA>
    2776:	28 f0       	brcs	.+10     	; 0x2782 <__mulsf3+0x12>
    2778:	ba df       	rcall	.-140    	; 0x26ee <__fp_pscB>
    277a:	18 f0       	brcs	.+6      	; 0x2782 <__mulsf3+0x12>
    277c:	95 23       	and	r25, r21
    277e:	09 f0       	breq	.+2      	; 0x2782 <__mulsf3+0x12>
    2780:	96 cf       	rjmp	.-212    	; 0x26ae <__fp_inf>
    2782:	9b cf       	rjmp	.-202    	; 0x26ba <__fp_nan>
    2784:	11 24       	eor	r1, r1
    2786:	ee cf       	rjmp	.-36     	; 0x2764 <__fp_szero>

00002788 <__mulsf3x>:
    2788:	ca df       	rcall	.-108    	; 0x271e <__fp_split3>
    278a:	a0 f3       	brcs	.-24     	; 0x2774 <__mulsf3+0x4>

0000278c <__mulsf3_pse>:
    278c:	95 9f       	mul	r25, r21
    278e:	d1 f3       	breq	.-12     	; 0x2784 <__mulsf3+0x14>
    2790:	95 0f       	add	r25, r21
    2792:	50 e0       	ldi	r21, 0x00	; 0
    2794:	55 1f       	adc	r21, r21
    2796:	62 9f       	mul	r22, r18
    2798:	f0 01       	movw	r30, r0
    279a:	72 9f       	mul	r23, r18
    279c:	bb 27       	eor	r27, r27
    279e:	f0 0d       	add	r31, r0
    27a0:	b1 1d       	adc	r27, r1
    27a2:	63 9f       	mul	r22, r19
    27a4:	aa 27       	eor	r26, r26
    27a6:	f0 0d       	add	r31, r0
    27a8:	b1 1d       	adc	r27, r1
    27aa:	aa 1f       	adc	r26, r26
    27ac:	64 9f       	mul	r22, r20
    27ae:	66 27       	eor	r22, r22
    27b0:	b0 0d       	add	r27, r0
    27b2:	a1 1d       	adc	r26, r1
    27b4:	66 1f       	adc	r22, r22
    27b6:	82 9f       	mul	r24, r18
    27b8:	22 27       	eor	r18, r18
    27ba:	b0 0d       	add	r27, r0
    27bc:	a1 1d       	adc	r26, r1
    27be:	62 1f       	adc	r22, r18
    27c0:	73 9f       	mul	r23, r19
    27c2:	b0 0d       	add	r27, r0
    27c4:	a1 1d       	adc	r26, r1
    27c6:	62 1f       	adc	r22, r18
    27c8:	83 9f       	mul	r24, r19
    27ca:	a0 0d       	add	r26, r0
    27cc:	61 1d       	adc	r22, r1
    27ce:	22 1f       	adc	r18, r18
    27d0:	74 9f       	mul	r23, r20
    27d2:	33 27       	eor	r19, r19
    27d4:	a0 0d       	add	r26, r0
    27d6:	61 1d       	adc	r22, r1
    27d8:	23 1f       	adc	r18, r19
    27da:	84 9f       	mul	r24, r20
    27dc:	60 0d       	add	r22, r0
    27de:	21 1d       	adc	r18, r1
    27e0:	82 2f       	mov	r24, r18
    27e2:	76 2f       	mov	r23, r22
    27e4:	6a 2f       	mov	r22, r26
    27e6:	11 24       	eor	r1, r1
    27e8:	9f 57       	subi	r25, 0x7F	; 127
    27ea:	50 40       	sbci	r21, 0x00	; 0
    27ec:	8a f0       	brmi	.+34     	; 0x2810 <__mulsf3_pse+0x84>
    27ee:	e1 f0       	breq	.+56     	; 0x2828 <__mulsf3_pse+0x9c>
    27f0:	88 23       	and	r24, r24
    27f2:	4a f0       	brmi	.+18     	; 0x2806 <__mulsf3_pse+0x7a>
    27f4:	ee 0f       	add	r30, r30
    27f6:	ff 1f       	adc	r31, r31
    27f8:	bb 1f       	adc	r27, r27
    27fa:	66 1f       	adc	r22, r22
    27fc:	77 1f       	adc	r23, r23
    27fe:	88 1f       	adc	r24, r24
    2800:	91 50       	subi	r25, 0x01	; 1
    2802:	50 40       	sbci	r21, 0x00	; 0
    2804:	a9 f7       	brne	.-22     	; 0x27f0 <__mulsf3_pse+0x64>
    2806:	9e 3f       	cpi	r25, 0xFE	; 254
    2808:	51 05       	cpc	r21, r1
    280a:	70 f0       	brcs	.+28     	; 0x2828 <__mulsf3_pse+0x9c>
    280c:	50 cf       	rjmp	.-352    	; 0x26ae <__fp_inf>
    280e:	aa cf       	rjmp	.-172    	; 0x2764 <__fp_szero>
    2810:	5f 3f       	cpi	r21, 0xFF	; 255
    2812:	ec f3       	brlt	.-6      	; 0x280e <__mulsf3_pse+0x82>
    2814:	98 3e       	cpi	r25, 0xE8	; 232
    2816:	dc f3       	brlt	.-10     	; 0x280e <__mulsf3_pse+0x82>
    2818:	86 95       	lsr	r24
    281a:	77 95       	ror	r23
    281c:	67 95       	ror	r22
    281e:	b7 95       	ror	r27
    2820:	f7 95       	ror	r31
    2822:	e7 95       	ror	r30
    2824:	9f 5f       	subi	r25, 0xFF	; 255
    2826:	c1 f7       	brne	.-16     	; 0x2818 <__mulsf3_pse+0x8c>
    2828:	fe 2b       	or	r31, r30
    282a:	88 0f       	add	r24, r24
    282c:	91 1d       	adc	r25, r1
    282e:	96 95       	lsr	r25
    2830:	87 95       	ror	r24
    2832:	97 f9       	bld	r25, 7
    2834:	08 95       	ret

00002836 <__mulsi3>:
    2836:	62 9f       	mul	r22, r18
    2838:	d0 01       	movw	r26, r0
    283a:	73 9f       	mul	r23, r19
    283c:	f0 01       	movw	r30, r0
    283e:	82 9f       	mul	r24, r18
    2840:	e0 0d       	add	r30, r0
    2842:	f1 1d       	adc	r31, r1
    2844:	64 9f       	mul	r22, r20
    2846:	e0 0d       	add	r30, r0
    2848:	f1 1d       	adc	r31, r1
    284a:	92 9f       	mul	r25, r18
    284c:	f0 0d       	add	r31, r0
    284e:	83 9f       	mul	r24, r19
    2850:	f0 0d       	add	r31, r0
    2852:	74 9f       	mul	r23, r20
    2854:	f0 0d       	add	r31, r0
    2856:	65 9f       	mul	r22, r21
    2858:	f0 0d       	add	r31, r0
    285a:	99 27       	eor	r25, r25
    285c:	72 9f       	mul	r23, r18
    285e:	b0 0d       	add	r27, r0
    2860:	e1 1d       	adc	r30, r1
    2862:	f9 1f       	adc	r31, r25
    2864:	63 9f       	mul	r22, r19
    2866:	b0 0d       	add	r27, r0
    2868:	e1 1d       	adc	r30, r1
    286a:	f9 1f       	adc	r31, r25
    286c:	bd 01       	movw	r22, r26
    286e:	cf 01       	movw	r24, r30
    2870:	11 24       	eor	r1, r1
    2872:	08 95       	ret

00002874 <__udivmodhi4>:
    2874:	aa 1b       	sub	r26, r26
    2876:	bb 1b       	sub	r27, r27
    2878:	51 e1       	ldi	r21, 0x11	; 17
    287a:	07 c0       	rjmp	.+14     	; 0x288a <__udivmodhi4_ep>

0000287c <__udivmodhi4_loop>:
    287c:	aa 1f       	adc	r26, r26
    287e:	bb 1f       	adc	r27, r27
    2880:	a6 17       	cp	r26, r22
    2882:	b7 07       	cpc	r27, r23
    2884:	10 f0       	brcs	.+4      	; 0x288a <__udivmodhi4_ep>
    2886:	a6 1b       	sub	r26, r22
    2888:	b7 0b       	sbc	r27, r23

0000288a <__udivmodhi4_ep>:
    288a:	88 1f       	adc	r24, r24
    288c:	99 1f       	adc	r25, r25
    288e:	5a 95       	dec	r21
    2890:	a9 f7       	brne	.-22     	; 0x287c <__udivmodhi4_loop>
    2892:	80 95       	com	r24
    2894:	90 95       	com	r25
    2896:	bc 01       	movw	r22, r24
    2898:	cd 01       	movw	r24, r26
    289a:	08 95       	ret

0000289c <__divmodsi4>:
    289c:	97 fb       	bst	r25, 7
    289e:	09 2e       	mov	r0, r25
    28a0:	05 26       	eor	r0, r21
    28a2:	0e d0       	rcall	.+28     	; 0x28c0 <__divmodsi4_neg1>
    28a4:	57 fd       	sbrc	r21, 7
    28a6:	04 d0       	rcall	.+8      	; 0x28b0 <__divmodsi4_neg2>
    28a8:	14 d0       	rcall	.+40     	; 0x28d2 <__udivmodsi4>
    28aa:	0a d0       	rcall	.+20     	; 0x28c0 <__divmodsi4_neg1>
    28ac:	00 1c       	adc	r0, r0
    28ae:	38 f4       	brcc	.+14     	; 0x28be <__divmodsi4_exit>

000028b0 <__divmodsi4_neg2>:
    28b0:	50 95       	com	r21
    28b2:	40 95       	com	r20
    28b4:	30 95       	com	r19
    28b6:	21 95       	neg	r18
    28b8:	3f 4f       	sbci	r19, 0xFF	; 255
    28ba:	4f 4f       	sbci	r20, 0xFF	; 255
    28bc:	5f 4f       	sbci	r21, 0xFF	; 255

000028be <__divmodsi4_exit>:
    28be:	08 95       	ret

000028c0 <__divmodsi4_neg1>:
    28c0:	f6 f7       	brtc	.-4      	; 0x28be <__divmodsi4_exit>
    28c2:	90 95       	com	r25
    28c4:	80 95       	com	r24
    28c6:	70 95       	com	r23
    28c8:	61 95       	neg	r22
    28ca:	7f 4f       	sbci	r23, 0xFF	; 255
    28cc:	8f 4f       	sbci	r24, 0xFF	; 255
    28ce:	9f 4f       	sbci	r25, 0xFF	; 255
    28d0:	08 95       	ret

000028d2 <__udivmodsi4>:
    28d2:	a1 e2       	ldi	r26, 0x21	; 33
    28d4:	1a 2e       	mov	r1, r26
    28d6:	aa 1b       	sub	r26, r26
    28d8:	bb 1b       	sub	r27, r27
    28da:	fd 01       	movw	r30, r26
    28dc:	0d c0       	rjmp	.+26     	; 0x28f8 <__udivmodsi4_ep>

000028de <__udivmodsi4_loop>:
    28de:	aa 1f       	adc	r26, r26
    28e0:	bb 1f       	adc	r27, r27
    28e2:	ee 1f       	adc	r30, r30
    28e4:	ff 1f       	adc	r31, r31
    28e6:	a2 17       	cp	r26, r18
    28e8:	b3 07       	cpc	r27, r19
    28ea:	e4 07       	cpc	r30, r20
    28ec:	f5 07       	cpc	r31, r21
    28ee:	20 f0       	brcs	.+8      	; 0x28f8 <__udivmodsi4_ep>
    28f0:	a2 1b       	sub	r26, r18
    28f2:	b3 0b       	sbc	r27, r19
    28f4:	e4 0b       	sbc	r30, r20
    28f6:	f5 0b       	sbc	r31, r21

000028f8 <__udivmodsi4_ep>:
    28f8:	66 1f       	adc	r22, r22
    28fa:	77 1f       	adc	r23, r23
    28fc:	88 1f       	adc	r24, r24
    28fe:	99 1f       	adc	r25, r25
    2900:	1a 94       	dec	r1
    2902:	69 f7       	brne	.-38     	; 0x28de <__udivmodsi4_loop>
    2904:	60 95       	com	r22
    2906:	70 95       	com	r23
    2908:	80 95       	com	r24
    290a:	90 95       	com	r25
    290c:	9b 01       	movw	r18, r22
    290e:	ac 01       	movw	r20, r24
    2910:	bd 01       	movw	r22, r26
    2912:	cf 01       	movw	r24, r30
    2914:	08 95       	ret

00002916 <__prologue_saves__>:
    2916:	2f 92       	push	r2
    2918:	3f 92       	push	r3
    291a:	4f 92       	push	r4
    291c:	5f 92       	push	r5
    291e:	6f 92       	push	r6
    2920:	7f 92       	push	r7
    2922:	8f 92       	push	r8
    2924:	9f 92       	push	r9
    2926:	af 92       	push	r10
    2928:	bf 92       	push	r11
    292a:	cf 92       	push	r12
    292c:	df 92       	push	r13
    292e:	ef 92       	push	r14
    2930:	ff 92       	push	r15
    2932:	0f 93       	push	r16
    2934:	1f 93       	push	r17
    2936:	cf 93       	push	r28
    2938:	df 93       	push	r29
    293a:	cd b7       	in	r28, 0x3d	; 61
    293c:	de b7       	in	r29, 0x3e	; 62
    293e:	ca 1b       	sub	r28, r26
    2940:	db 0b       	sbc	r29, r27
    2942:	0f b6       	in	r0, 0x3f	; 63
    2944:	f8 94       	cli
    2946:	de bf       	out	0x3e, r29	; 62
    2948:	0f be       	out	0x3f, r0	; 63
    294a:	cd bf       	out	0x3d, r28	; 61
    294c:	09 94       	ijmp

0000294e <__epilogue_restores__>:
    294e:	2a 88       	ldd	r2, Y+18	; 0x12
    2950:	39 88       	ldd	r3, Y+17	; 0x11
    2952:	48 88       	ldd	r4, Y+16	; 0x10
    2954:	5f 84       	ldd	r5, Y+15	; 0x0f
    2956:	6e 84       	ldd	r6, Y+14	; 0x0e
    2958:	7d 84       	ldd	r7, Y+13	; 0x0d
    295a:	8c 84       	ldd	r8, Y+12	; 0x0c
    295c:	9b 84       	ldd	r9, Y+11	; 0x0b
    295e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2960:	b9 84       	ldd	r11, Y+9	; 0x09
    2962:	c8 84       	ldd	r12, Y+8	; 0x08
    2964:	df 80       	ldd	r13, Y+7	; 0x07
    2966:	ee 80       	ldd	r14, Y+6	; 0x06
    2968:	fd 80       	ldd	r15, Y+5	; 0x05
    296a:	0c 81       	ldd	r16, Y+4	; 0x04
    296c:	1b 81       	ldd	r17, Y+3	; 0x03
    296e:	aa 81       	ldd	r26, Y+2	; 0x02
    2970:	b9 81       	ldd	r27, Y+1	; 0x01
    2972:	ce 0f       	add	r28, r30
    2974:	d1 1d       	adc	r29, r1
    2976:	0f b6       	in	r0, 0x3f	; 63
    2978:	f8 94       	cli
    297a:	de bf       	out	0x3e, r29	; 62
    297c:	0f be       	out	0x3f, r0	; 63
    297e:	cd bf       	out	0x3d, r28	; 61
    2980:	ed 01       	movw	r28, r26
    2982:	08 95       	ret

00002984 <strcpy>:
    2984:	fb 01       	movw	r30, r22
    2986:	dc 01       	movw	r26, r24
    2988:	01 90       	ld	r0, Z+
    298a:	0d 92       	st	X+, r0
    298c:	00 20       	and	r0, r0
    298e:	e1 f7       	brne	.-8      	; 0x2988 <strcpy+0x4>
    2990:	08 95       	ret

00002992 <sprintf>:
    2992:	ae e0       	ldi	r26, 0x0E	; 14
    2994:	b0 e0       	ldi	r27, 0x00	; 0
    2996:	ef ec       	ldi	r30, 0xCF	; 207
    2998:	f4 e1       	ldi	r31, 0x14	; 20
    299a:	0c 94 99 14 	jmp	0x2932	; 0x2932 <__prologue_saves__+0x1c>
    299e:	0d 89       	ldd	r16, Y+21	; 0x15
    29a0:	1e 89       	ldd	r17, Y+22	; 0x16
    29a2:	86 e0       	ldi	r24, 0x06	; 6
    29a4:	8c 83       	std	Y+4, r24	; 0x04
    29a6:	1a 83       	std	Y+2, r17	; 0x02
    29a8:	09 83       	std	Y+1, r16	; 0x01
    29aa:	8f ef       	ldi	r24, 0xFF	; 255
    29ac:	9f e7       	ldi	r25, 0x7F	; 127
    29ae:	9e 83       	std	Y+6, r25	; 0x06
    29b0:	8d 83       	std	Y+5, r24	; 0x05
    29b2:	ae 01       	movw	r20, r28
    29b4:	47 5e       	subi	r20, 0xE7	; 231
    29b6:	5f 4f       	sbci	r21, 0xFF	; 255
    29b8:	ce 01       	movw	r24, r28
    29ba:	01 96       	adiw	r24, 0x01	; 1
    29bc:	6f 89       	ldd	r22, Y+23	; 0x17
    29be:	78 8d       	ldd	r23, Y+24	; 0x18
    29c0:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <vfprintf>
    29c4:	ef 81       	ldd	r30, Y+7	; 0x07
    29c6:	f8 85       	ldd	r31, Y+8	; 0x08
    29c8:	e0 0f       	add	r30, r16
    29ca:	f1 1f       	adc	r31, r17
    29cc:	10 82       	st	Z, r1
    29ce:	2e 96       	adiw	r28, 0x0e	; 14
    29d0:	e4 e0       	ldi	r30, 0x04	; 4
    29d2:	0c 94 b5 14 	jmp	0x296a	; 0x296a <__epilogue_restores__+0x1c>

000029d6 <vfprintf>:
    29d6:	ad e0       	ldi	r26, 0x0D	; 13
    29d8:	b0 e0       	ldi	r27, 0x00	; 0
    29da:	e1 ef       	ldi	r30, 0xF1	; 241
    29dc:	f4 e1       	ldi	r31, 0x14	; 20
    29de:	0c 94 8b 14 	jmp	0x2916	; 0x2916 <__prologue_saves__>
    29e2:	3c 01       	movw	r6, r24
    29e4:	7d 87       	std	Y+13, r23	; 0x0d
    29e6:	6c 87       	std	Y+12, r22	; 0x0c
    29e8:	5a 01       	movw	r10, r20
    29ea:	fc 01       	movw	r30, r24
    29ec:	17 82       	std	Z+7, r1	; 0x07
    29ee:	16 82       	std	Z+6, r1	; 0x06
    29f0:	83 81       	ldd	r24, Z+3	; 0x03
    29f2:	81 ff       	sbrs	r24, 1
    29f4:	c8 c1       	rjmp	.+912    	; 0x2d86 <vfprintf+0x3b0>
    29f6:	2e 01       	movw	r4, r28
    29f8:	08 94       	sec
    29fa:	41 1c       	adc	r4, r1
    29fc:	51 1c       	adc	r5, r1
    29fe:	f3 01       	movw	r30, r6
    2a00:	93 81       	ldd	r25, Z+3	; 0x03
    2a02:	ec 85       	ldd	r30, Y+12	; 0x0c
    2a04:	fd 85       	ldd	r31, Y+13	; 0x0d
    2a06:	93 fd       	sbrc	r25, 3
    2a08:	85 91       	lpm	r24, Z+
    2a0a:	93 ff       	sbrs	r25, 3
    2a0c:	81 91       	ld	r24, Z+
    2a0e:	fd 87       	std	Y+13, r31	; 0x0d
    2a10:	ec 87       	std	Y+12, r30	; 0x0c
    2a12:	88 23       	and	r24, r24
    2a14:	09 f4       	brne	.+2      	; 0x2a18 <vfprintf+0x42>
    2a16:	b3 c1       	rjmp	.+870    	; 0x2d7e <vfprintf+0x3a8>
    2a18:	85 32       	cpi	r24, 0x25	; 37
    2a1a:	41 f4       	brne	.+16     	; 0x2a2c <vfprintf+0x56>
    2a1c:	93 fd       	sbrc	r25, 3
    2a1e:	85 91       	lpm	r24, Z+
    2a20:	93 ff       	sbrs	r25, 3
    2a22:	81 91       	ld	r24, Z+
    2a24:	fd 87       	std	Y+13, r31	; 0x0d
    2a26:	ec 87       	std	Y+12, r30	; 0x0c
    2a28:	85 32       	cpi	r24, 0x25	; 37
    2a2a:	29 f4       	brne	.+10     	; 0x2a36 <vfprintf+0x60>
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	b3 01       	movw	r22, r6
    2a30:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <fputc>
    2a34:	e4 cf       	rjmp	.-56     	; 0x29fe <vfprintf+0x28>
    2a36:	ff 24       	eor	r15, r15
    2a38:	ee 24       	eor	r14, r14
    2a3a:	10 e0       	ldi	r17, 0x00	; 0
    2a3c:	10 32       	cpi	r17, 0x20	; 32
    2a3e:	b0 f4       	brcc	.+44     	; 0x2a6c <vfprintf+0x96>
    2a40:	8b 32       	cpi	r24, 0x2B	; 43
    2a42:	69 f0       	breq	.+26     	; 0x2a5e <vfprintf+0x88>
    2a44:	8c 32       	cpi	r24, 0x2C	; 44
    2a46:	28 f4       	brcc	.+10     	; 0x2a52 <vfprintf+0x7c>
    2a48:	80 32       	cpi	r24, 0x20	; 32
    2a4a:	51 f0       	breq	.+20     	; 0x2a60 <vfprintf+0x8a>
    2a4c:	83 32       	cpi	r24, 0x23	; 35
    2a4e:	71 f4       	brne	.+28     	; 0x2a6c <vfprintf+0x96>
    2a50:	0b c0       	rjmp	.+22     	; 0x2a68 <vfprintf+0x92>
    2a52:	8d 32       	cpi	r24, 0x2D	; 45
    2a54:	39 f0       	breq	.+14     	; 0x2a64 <vfprintf+0x8e>
    2a56:	80 33       	cpi	r24, 0x30	; 48
    2a58:	49 f4       	brne	.+18     	; 0x2a6c <vfprintf+0x96>
    2a5a:	11 60       	ori	r17, 0x01	; 1
    2a5c:	2c c0       	rjmp	.+88     	; 0x2ab6 <vfprintf+0xe0>
    2a5e:	12 60       	ori	r17, 0x02	; 2
    2a60:	14 60       	ori	r17, 0x04	; 4
    2a62:	29 c0       	rjmp	.+82     	; 0x2ab6 <vfprintf+0xe0>
    2a64:	18 60       	ori	r17, 0x08	; 8
    2a66:	27 c0       	rjmp	.+78     	; 0x2ab6 <vfprintf+0xe0>
    2a68:	10 61       	ori	r17, 0x10	; 16
    2a6a:	25 c0       	rjmp	.+74     	; 0x2ab6 <vfprintf+0xe0>
    2a6c:	17 fd       	sbrc	r17, 7
    2a6e:	2e c0       	rjmp	.+92     	; 0x2acc <vfprintf+0xf6>
    2a70:	28 2f       	mov	r18, r24
    2a72:	20 53       	subi	r18, 0x30	; 48
    2a74:	2a 30       	cpi	r18, 0x0A	; 10
    2a76:	98 f4       	brcc	.+38     	; 0x2a9e <vfprintf+0xc8>
    2a78:	16 ff       	sbrs	r17, 6
    2a7a:	08 c0       	rjmp	.+16     	; 0x2a8c <vfprintf+0xb6>
    2a7c:	8f 2d       	mov	r24, r15
    2a7e:	88 0f       	add	r24, r24
    2a80:	f8 2e       	mov	r15, r24
    2a82:	ff 0c       	add	r15, r15
    2a84:	ff 0c       	add	r15, r15
    2a86:	f8 0e       	add	r15, r24
    2a88:	f2 0e       	add	r15, r18
    2a8a:	15 c0       	rjmp	.+42     	; 0x2ab6 <vfprintf+0xe0>
    2a8c:	8e 2d       	mov	r24, r14
    2a8e:	88 0f       	add	r24, r24
    2a90:	e8 2e       	mov	r14, r24
    2a92:	ee 0c       	add	r14, r14
    2a94:	ee 0c       	add	r14, r14
    2a96:	e8 0e       	add	r14, r24
    2a98:	e2 0e       	add	r14, r18
    2a9a:	10 62       	ori	r17, 0x20	; 32
    2a9c:	0c c0       	rjmp	.+24     	; 0x2ab6 <vfprintf+0xe0>
    2a9e:	8e 32       	cpi	r24, 0x2E	; 46
    2aa0:	21 f4       	brne	.+8      	; 0x2aaa <vfprintf+0xd4>
    2aa2:	16 fd       	sbrc	r17, 6
    2aa4:	6c c1       	rjmp	.+728    	; 0x2d7e <vfprintf+0x3a8>
    2aa6:	10 64       	ori	r17, 0x40	; 64
    2aa8:	06 c0       	rjmp	.+12     	; 0x2ab6 <vfprintf+0xe0>
    2aaa:	8c 36       	cpi	r24, 0x6C	; 108
    2aac:	11 f4       	brne	.+4      	; 0x2ab2 <vfprintf+0xdc>
    2aae:	10 68       	ori	r17, 0x80	; 128
    2ab0:	02 c0       	rjmp	.+4      	; 0x2ab6 <vfprintf+0xe0>
    2ab2:	88 36       	cpi	r24, 0x68	; 104
    2ab4:	59 f4       	brne	.+22     	; 0x2acc <vfprintf+0xf6>
    2ab6:	ec 85       	ldd	r30, Y+12	; 0x0c
    2ab8:	fd 85       	ldd	r31, Y+13	; 0x0d
    2aba:	93 fd       	sbrc	r25, 3
    2abc:	85 91       	lpm	r24, Z+
    2abe:	93 ff       	sbrs	r25, 3
    2ac0:	81 91       	ld	r24, Z+
    2ac2:	fd 87       	std	Y+13, r31	; 0x0d
    2ac4:	ec 87       	std	Y+12, r30	; 0x0c
    2ac6:	88 23       	and	r24, r24
    2ac8:	09 f0       	breq	.+2      	; 0x2acc <vfprintf+0xf6>
    2aca:	b8 cf       	rjmp	.-144    	; 0x2a3c <vfprintf+0x66>
    2acc:	98 2f       	mov	r25, r24
    2ace:	95 54       	subi	r25, 0x45	; 69
    2ad0:	93 30       	cpi	r25, 0x03	; 3
    2ad2:	18 f0       	brcs	.+6      	; 0x2ada <vfprintf+0x104>
    2ad4:	90 52       	subi	r25, 0x20	; 32
    2ad6:	93 30       	cpi	r25, 0x03	; 3
    2ad8:	38 f4       	brcc	.+14     	; 0x2ae8 <vfprintf+0x112>
    2ada:	24 e0       	ldi	r18, 0x04	; 4
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	a2 0e       	add	r10, r18
    2ae0:	b3 1e       	adc	r11, r19
    2ae2:	3f e3       	ldi	r19, 0x3F	; 63
    2ae4:	39 83       	std	Y+1, r19	; 0x01
    2ae6:	0f c0       	rjmp	.+30     	; 0x2b06 <vfprintf+0x130>
    2ae8:	83 36       	cpi	r24, 0x63	; 99
    2aea:	31 f0       	breq	.+12     	; 0x2af8 <vfprintf+0x122>
    2aec:	83 37       	cpi	r24, 0x73	; 115
    2aee:	81 f0       	breq	.+32     	; 0x2b10 <vfprintf+0x13a>
    2af0:	83 35       	cpi	r24, 0x53	; 83
    2af2:	09 f0       	breq	.+2      	; 0x2af6 <vfprintf+0x120>
    2af4:	5a c0       	rjmp	.+180    	; 0x2baa <vfprintf+0x1d4>
    2af6:	22 c0       	rjmp	.+68     	; 0x2b3c <vfprintf+0x166>
    2af8:	f5 01       	movw	r30, r10
    2afa:	80 81       	ld	r24, Z
    2afc:	89 83       	std	Y+1, r24	; 0x01
    2afe:	22 e0       	ldi	r18, 0x02	; 2
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	a2 0e       	add	r10, r18
    2b04:	b3 1e       	adc	r11, r19
    2b06:	21 e0       	ldi	r18, 0x01	; 1
    2b08:	c2 2e       	mov	r12, r18
    2b0a:	d1 2c       	mov	r13, r1
    2b0c:	42 01       	movw	r8, r4
    2b0e:	14 c0       	rjmp	.+40     	; 0x2b38 <vfprintf+0x162>
    2b10:	92 e0       	ldi	r25, 0x02	; 2
    2b12:	29 2e       	mov	r2, r25
    2b14:	31 2c       	mov	r3, r1
    2b16:	2a 0c       	add	r2, r10
    2b18:	3b 1c       	adc	r3, r11
    2b1a:	f5 01       	movw	r30, r10
    2b1c:	80 80       	ld	r8, Z
    2b1e:	91 80       	ldd	r9, Z+1	; 0x01
    2b20:	16 ff       	sbrs	r17, 6
    2b22:	03 c0       	rjmp	.+6      	; 0x2b2a <vfprintf+0x154>
    2b24:	6f 2d       	mov	r22, r15
    2b26:	70 e0       	ldi	r23, 0x00	; 0
    2b28:	02 c0       	rjmp	.+4      	; 0x2b2e <vfprintf+0x158>
    2b2a:	6f ef       	ldi	r22, 0xFF	; 255
    2b2c:	7f ef       	ldi	r23, 0xFF	; 255
    2b2e:	c4 01       	movw	r24, r8
    2b30:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <strnlen>
    2b34:	6c 01       	movw	r12, r24
    2b36:	51 01       	movw	r10, r2
    2b38:	1f 77       	andi	r17, 0x7F	; 127
    2b3a:	15 c0       	rjmp	.+42     	; 0x2b66 <vfprintf+0x190>
    2b3c:	82 e0       	ldi	r24, 0x02	; 2
    2b3e:	28 2e       	mov	r2, r24
    2b40:	31 2c       	mov	r3, r1
    2b42:	2a 0c       	add	r2, r10
    2b44:	3b 1c       	adc	r3, r11
    2b46:	f5 01       	movw	r30, r10
    2b48:	80 80       	ld	r8, Z
    2b4a:	91 80       	ldd	r9, Z+1	; 0x01
    2b4c:	16 ff       	sbrs	r17, 6
    2b4e:	03 c0       	rjmp	.+6      	; 0x2b56 <vfprintf+0x180>
    2b50:	6f 2d       	mov	r22, r15
    2b52:	70 e0       	ldi	r23, 0x00	; 0
    2b54:	02 c0       	rjmp	.+4      	; 0x2b5a <vfprintf+0x184>
    2b56:	6f ef       	ldi	r22, 0xFF	; 255
    2b58:	7f ef       	ldi	r23, 0xFF	; 255
    2b5a:	c4 01       	movw	r24, r8
    2b5c:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <strnlen_P>
    2b60:	6c 01       	movw	r12, r24
    2b62:	10 68       	ori	r17, 0x80	; 128
    2b64:	51 01       	movw	r10, r2
    2b66:	13 fd       	sbrc	r17, 3
    2b68:	1c c0       	rjmp	.+56     	; 0x2ba2 <vfprintf+0x1cc>
    2b6a:	06 c0       	rjmp	.+12     	; 0x2b78 <vfprintf+0x1a2>
    2b6c:	80 e2       	ldi	r24, 0x20	; 32
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	b3 01       	movw	r22, r6
    2b72:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <fputc>
    2b76:	ea 94       	dec	r14
    2b78:	8e 2d       	mov	r24, r14
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	c8 16       	cp	r12, r24
    2b7e:	d9 06       	cpc	r13, r25
    2b80:	a8 f3       	brcs	.-22     	; 0x2b6c <vfprintf+0x196>
    2b82:	0f c0       	rjmp	.+30     	; 0x2ba2 <vfprintf+0x1cc>
    2b84:	f4 01       	movw	r30, r8
    2b86:	17 fd       	sbrc	r17, 7
    2b88:	85 91       	lpm	r24, Z+
    2b8a:	17 ff       	sbrs	r17, 7
    2b8c:	81 91       	ld	r24, Z+
    2b8e:	4f 01       	movw	r8, r30
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	b3 01       	movw	r22, r6
    2b94:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <fputc>
    2b98:	e1 10       	cpse	r14, r1
    2b9a:	ea 94       	dec	r14
    2b9c:	08 94       	sec
    2b9e:	c1 08       	sbc	r12, r1
    2ba0:	d1 08       	sbc	r13, r1
    2ba2:	c1 14       	cp	r12, r1
    2ba4:	d1 04       	cpc	r13, r1
    2ba6:	71 f7       	brne	.-36     	; 0x2b84 <vfprintf+0x1ae>
    2ba8:	e7 c0       	rjmp	.+462    	; 0x2d78 <vfprintf+0x3a2>
    2baa:	84 36       	cpi	r24, 0x64	; 100
    2bac:	11 f0       	breq	.+4      	; 0x2bb2 <vfprintf+0x1dc>
    2bae:	89 36       	cpi	r24, 0x69	; 105
    2bb0:	51 f5       	brne	.+84     	; 0x2c06 <vfprintf+0x230>
    2bb2:	f5 01       	movw	r30, r10
    2bb4:	17 ff       	sbrs	r17, 7
    2bb6:	07 c0       	rjmp	.+14     	; 0x2bc6 <vfprintf+0x1f0>
    2bb8:	80 81       	ld	r24, Z
    2bba:	91 81       	ldd	r25, Z+1	; 0x01
    2bbc:	a2 81       	ldd	r26, Z+2	; 0x02
    2bbe:	b3 81       	ldd	r27, Z+3	; 0x03
    2bc0:	24 e0       	ldi	r18, 0x04	; 4
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	08 c0       	rjmp	.+16     	; 0x2bd6 <vfprintf+0x200>
    2bc6:	80 81       	ld	r24, Z
    2bc8:	91 81       	ldd	r25, Z+1	; 0x01
    2bca:	aa 27       	eor	r26, r26
    2bcc:	97 fd       	sbrc	r25, 7
    2bce:	a0 95       	com	r26
    2bd0:	ba 2f       	mov	r27, r26
    2bd2:	22 e0       	ldi	r18, 0x02	; 2
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	a2 0e       	add	r10, r18
    2bd8:	b3 1e       	adc	r11, r19
    2bda:	01 2f       	mov	r16, r17
    2bdc:	0f 76       	andi	r16, 0x6F	; 111
    2bde:	b7 ff       	sbrs	r27, 7
    2be0:	08 c0       	rjmp	.+16     	; 0x2bf2 <vfprintf+0x21c>
    2be2:	b0 95       	com	r27
    2be4:	a0 95       	com	r26
    2be6:	90 95       	com	r25
    2be8:	81 95       	neg	r24
    2bea:	9f 4f       	sbci	r25, 0xFF	; 255
    2bec:	af 4f       	sbci	r26, 0xFF	; 255
    2bee:	bf 4f       	sbci	r27, 0xFF	; 255
    2bf0:	00 68       	ori	r16, 0x80	; 128
    2bf2:	bc 01       	movw	r22, r24
    2bf4:	cd 01       	movw	r24, r26
    2bf6:	a2 01       	movw	r20, r4
    2bf8:	2a e0       	ldi	r18, 0x0A	; 10
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <__ultoa_invert>
    2c00:	d8 2e       	mov	r13, r24
    2c02:	d4 18       	sub	r13, r4
    2c04:	3f c0       	rjmp	.+126    	; 0x2c84 <vfprintf+0x2ae>
    2c06:	85 37       	cpi	r24, 0x75	; 117
    2c08:	21 f4       	brne	.+8      	; 0x2c12 <vfprintf+0x23c>
    2c0a:	1f 7e       	andi	r17, 0xEF	; 239
    2c0c:	2a e0       	ldi	r18, 0x0A	; 10
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	20 c0       	rjmp	.+64     	; 0x2c52 <vfprintf+0x27c>
    2c12:	19 7f       	andi	r17, 0xF9	; 249
    2c14:	8f 36       	cpi	r24, 0x6F	; 111
    2c16:	a9 f0       	breq	.+42     	; 0x2c42 <vfprintf+0x26c>
    2c18:	80 37       	cpi	r24, 0x70	; 112
    2c1a:	20 f4       	brcc	.+8      	; 0x2c24 <vfprintf+0x24e>
    2c1c:	88 35       	cpi	r24, 0x58	; 88
    2c1e:	09 f0       	breq	.+2      	; 0x2c22 <vfprintf+0x24c>
    2c20:	ae c0       	rjmp	.+348    	; 0x2d7e <vfprintf+0x3a8>
    2c22:	0b c0       	rjmp	.+22     	; 0x2c3a <vfprintf+0x264>
    2c24:	80 37       	cpi	r24, 0x70	; 112
    2c26:	21 f0       	breq	.+8      	; 0x2c30 <vfprintf+0x25a>
    2c28:	88 37       	cpi	r24, 0x78	; 120
    2c2a:	09 f0       	breq	.+2      	; 0x2c2e <vfprintf+0x258>
    2c2c:	a8 c0       	rjmp	.+336    	; 0x2d7e <vfprintf+0x3a8>
    2c2e:	01 c0       	rjmp	.+2      	; 0x2c32 <vfprintf+0x25c>
    2c30:	10 61       	ori	r17, 0x10	; 16
    2c32:	14 ff       	sbrs	r17, 4
    2c34:	09 c0       	rjmp	.+18     	; 0x2c48 <vfprintf+0x272>
    2c36:	14 60       	ori	r17, 0x04	; 4
    2c38:	07 c0       	rjmp	.+14     	; 0x2c48 <vfprintf+0x272>
    2c3a:	14 ff       	sbrs	r17, 4
    2c3c:	08 c0       	rjmp	.+16     	; 0x2c4e <vfprintf+0x278>
    2c3e:	16 60       	ori	r17, 0x06	; 6
    2c40:	06 c0       	rjmp	.+12     	; 0x2c4e <vfprintf+0x278>
    2c42:	28 e0       	ldi	r18, 0x08	; 8
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	05 c0       	rjmp	.+10     	; 0x2c52 <vfprintf+0x27c>
    2c48:	20 e1       	ldi	r18, 0x10	; 16
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	02 c0       	rjmp	.+4      	; 0x2c52 <vfprintf+0x27c>
    2c4e:	20 e1       	ldi	r18, 0x10	; 16
    2c50:	32 e0       	ldi	r19, 0x02	; 2
    2c52:	f5 01       	movw	r30, r10
    2c54:	17 ff       	sbrs	r17, 7
    2c56:	07 c0       	rjmp	.+14     	; 0x2c66 <vfprintf+0x290>
    2c58:	60 81       	ld	r22, Z
    2c5a:	71 81       	ldd	r23, Z+1	; 0x01
    2c5c:	82 81       	ldd	r24, Z+2	; 0x02
    2c5e:	93 81       	ldd	r25, Z+3	; 0x03
    2c60:	44 e0       	ldi	r20, 0x04	; 4
    2c62:	50 e0       	ldi	r21, 0x00	; 0
    2c64:	06 c0       	rjmp	.+12     	; 0x2c72 <vfprintf+0x29c>
    2c66:	60 81       	ld	r22, Z
    2c68:	71 81       	ldd	r23, Z+1	; 0x01
    2c6a:	80 e0       	ldi	r24, 0x00	; 0
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	42 e0       	ldi	r20, 0x02	; 2
    2c70:	50 e0       	ldi	r21, 0x00	; 0
    2c72:	a4 0e       	add	r10, r20
    2c74:	b5 1e       	adc	r11, r21
    2c76:	a2 01       	movw	r20, r4
    2c78:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <__ultoa_invert>
    2c7c:	d8 2e       	mov	r13, r24
    2c7e:	d4 18       	sub	r13, r4
    2c80:	01 2f       	mov	r16, r17
    2c82:	0f 77       	andi	r16, 0x7F	; 127
    2c84:	06 ff       	sbrs	r16, 6
    2c86:	09 c0       	rjmp	.+18     	; 0x2c9a <vfprintf+0x2c4>
    2c88:	0e 7f       	andi	r16, 0xFE	; 254
    2c8a:	df 14       	cp	r13, r15
    2c8c:	30 f4       	brcc	.+12     	; 0x2c9a <vfprintf+0x2c4>
    2c8e:	04 ff       	sbrs	r16, 4
    2c90:	06 c0       	rjmp	.+12     	; 0x2c9e <vfprintf+0x2c8>
    2c92:	02 fd       	sbrc	r16, 2
    2c94:	04 c0       	rjmp	.+8      	; 0x2c9e <vfprintf+0x2c8>
    2c96:	0f 7e       	andi	r16, 0xEF	; 239
    2c98:	02 c0       	rjmp	.+4      	; 0x2c9e <vfprintf+0x2c8>
    2c9a:	1d 2d       	mov	r17, r13
    2c9c:	01 c0       	rjmp	.+2      	; 0x2ca0 <vfprintf+0x2ca>
    2c9e:	1f 2d       	mov	r17, r15
    2ca0:	80 2f       	mov	r24, r16
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	04 ff       	sbrs	r16, 4
    2ca6:	0c c0       	rjmp	.+24     	; 0x2cc0 <vfprintf+0x2ea>
    2ca8:	fe 01       	movw	r30, r28
    2caa:	ed 0d       	add	r30, r13
    2cac:	f1 1d       	adc	r31, r1
    2cae:	20 81       	ld	r18, Z
    2cb0:	20 33       	cpi	r18, 0x30	; 48
    2cb2:	11 f4       	brne	.+4      	; 0x2cb8 <vfprintf+0x2e2>
    2cb4:	09 7e       	andi	r16, 0xE9	; 233
    2cb6:	09 c0       	rjmp	.+18     	; 0x2cca <vfprintf+0x2f4>
    2cb8:	02 ff       	sbrs	r16, 2
    2cba:	06 c0       	rjmp	.+12     	; 0x2cc8 <vfprintf+0x2f2>
    2cbc:	1e 5f       	subi	r17, 0xFE	; 254
    2cbe:	05 c0       	rjmp	.+10     	; 0x2cca <vfprintf+0x2f4>
    2cc0:	86 78       	andi	r24, 0x86	; 134
    2cc2:	90 70       	andi	r25, 0x00	; 0
    2cc4:	00 97       	sbiw	r24, 0x00	; 0
    2cc6:	09 f0       	breq	.+2      	; 0x2cca <vfprintf+0x2f4>
    2cc8:	1f 5f       	subi	r17, 0xFF	; 255
    2cca:	80 2e       	mov	r8, r16
    2ccc:	99 24       	eor	r9, r9
    2cce:	03 fd       	sbrc	r16, 3
    2cd0:	12 c0       	rjmp	.+36     	; 0x2cf6 <vfprintf+0x320>
    2cd2:	00 ff       	sbrs	r16, 0
    2cd4:	0d c0       	rjmp	.+26     	; 0x2cf0 <vfprintf+0x31a>
    2cd6:	fd 2c       	mov	r15, r13
    2cd8:	1e 15       	cp	r17, r14
    2cda:	50 f4       	brcc	.+20     	; 0x2cf0 <vfprintf+0x31a>
    2cdc:	fe 0c       	add	r15, r14
    2cde:	f1 1a       	sub	r15, r17
    2ce0:	1e 2d       	mov	r17, r14
    2ce2:	06 c0       	rjmp	.+12     	; 0x2cf0 <vfprintf+0x31a>
    2ce4:	80 e2       	ldi	r24, 0x20	; 32
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	b3 01       	movw	r22, r6
    2cea:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <fputc>
    2cee:	1f 5f       	subi	r17, 0xFF	; 255
    2cf0:	1e 15       	cp	r17, r14
    2cf2:	c0 f3       	brcs	.-16     	; 0x2ce4 <vfprintf+0x30e>
    2cf4:	04 c0       	rjmp	.+8      	; 0x2cfe <vfprintf+0x328>
    2cf6:	1e 15       	cp	r17, r14
    2cf8:	10 f4       	brcc	.+4      	; 0x2cfe <vfprintf+0x328>
    2cfa:	e1 1a       	sub	r14, r17
    2cfc:	01 c0       	rjmp	.+2      	; 0x2d00 <vfprintf+0x32a>
    2cfe:	ee 24       	eor	r14, r14
    2d00:	84 fe       	sbrs	r8, 4
    2d02:	0f c0       	rjmp	.+30     	; 0x2d22 <vfprintf+0x34c>
    2d04:	80 e3       	ldi	r24, 0x30	; 48
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	b3 01       	movw	r22, r6
    2d0a:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <fputc>
    2d0e:	82 fe       	sbrs	r8, 2
    2d10:	1f c0       	rjmp	.+62     	; 0x2d50 <vfprintf+0x37a>
    2d12:	81 fe       	sbrs	r8, 1
    2d14:	03 c0       	rjmp	.+6      	; 0x2d1c <vfprintf+0x346>
    2d16:	88 e5       	ldi	r24, 0x58	; 88
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	10 c0       	rjmp	.+32     	; 0x2d3c <vfprintf+0x366>
    2d1c:	88 e7       	ldi	r24, 0x78	; 120
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	0d c0       	rjmp	.+26     	; 0x2d3c <vfprintf+0x366>
    2d22:	c4 01       	movw	r24, r8
    2d24:	86 78       	andi	r24, 0x86	; 134
    2d26:	90 70       	andi	r25, 0x00	; 0
    2d28:	00 97       	sbiw	r24, 0x00	; 0
    2d2a:	91 f0       	breq	.+36     	; 0x2d50 <vfprintf+0x37a>
    2d2c:	81 fc       	sbrc	r8, 1
    2d2e:	02 c0       	rjmp	.+4      	; 0x2d34 <vfprintf+0x35e>
    2d30:	80 e2       	ldi	r24, 0x20	; 32
    2d32:	01 c0       	rjmp	.+2      	; 0x2d36 <vfprintf+0x360>
    2d34:	8b e2       	ldi	r24, 0x2B	; 43
    2d36:	07 fd       	sbrc	r16, 7
    2d38:	8d e2       	ldi	r24, 0x2D	; 45
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	b3 01       	movw	r22, r6
    2d3e:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <fputc>
    2d42:	06 c0       	rjmp	.+12     	; 0x2d50 <vfprintf+0x37a>
    2d44:	80 e3       	ldi	r24, 0x30	; 48
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	b3 01       	movw	r22, r6
    2d4a:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <fputc>
    2d4e:	fa 94       	dec	r15
    2d50:	df 14       	cp	r13, r15
    2d52:	c0 f3       	brcs	.-16     	; 0x2d44 <vfprintf+0x36e>
    2d54:	da 94       	dec	r13
    2d56:	f2 01       	movw	r30, r4
    2d58:	ed 0d       	add	r30, r13
    2d5a:	f1 1d       	adc	r31, r1
    2d5c:	80 81       	ld	r24, Z
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	b3 01       	movw	r22, r6
    2d62:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <fputc>
    2d66:	dd 20       	and	r13, r13
    2d68:	a9 f7       	brne	.-22     	; 0x2d54 <vfprintf+0x37e>
    2d6a:	06 c0       	rjmp	.+12     	; 0x2d78 <vfprintf+0x3a2>
    2d6c:	80 e2       	ldi	r24, 0x20	; 32
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	b3 01       	movw	r22, r6
    2d72:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <fputc>
    2d76:	ea 94       	dec	r14
    2d78:	ee 20       	and	r14, r14
    2d7a:	c1 f7       	brne	.-16     	; 0x2d6c <vfprintf+0x396>
    2d7c:	40 ce       	rjmp	.-896    	; 0x29fe <vfprintf+0x28>
    2d7e:	f3 01       	movw	r30, r6
    2d80:	86 81       	ldd	r24, Z+6	; 0x06
    2d82:	97 81       	ldd	r25, Z+7	; 0x07
    2d84:	02 c0       	rjmp	.+4      	; 0x2d8a <vfprintf+0x3b4>
    2d86:	8f ef       	ldi	r24, 0xFF	; 255
    2d88:	9f ef       	ldi	r25, 0xFF	; 255
    2d8a:	2d 96       	adiw	r28, 0x0d	; 13
    2d8c:	e2 e1       	ldi	r30, 0x12	; 18
    2d8e:	0c 94 a7 14 	jmp	0x294e	; 0x294e <__epilogue_restores__>

00002d92 <strnlen_P>:
    2d92:	fc 01       	movw	r30, r24
    2d94:	05 90       	lpm	r0, Z+
    2d96:	61 50       	subi	r22, 0x01	; 1
    2d98:	70 40       	sbci	r23, 0x00	; 0
    2d9a:	01 10       	cpse	r0, r1
    2d9c:	d8 f7       	brcc	.-10     	; 0x2d94 <strnlen_P+0x2>
    2d9e:	80 95       	com	r24
    2da0:	90 95       	com	r25
    2da2:	8e 0f       	add	r24, r30
    2da4:	9f 1f       	adc	r25, r31
    2da6:	08 95       	ret

00002da8 <strnlen>:
    2da8:	fc 01       	movw	r30, r24
    2daa:	61 50       	subi	r22, 0x01	; 1
    2dac:	70 40       	sbci	r23, 0x00	; 0
    2dae:	01 90       	ld	r0, Z+
    2db0:	01 10       	cpse	r0, r1
    2db2:	d8 f7       	brcc	.-10     	; 0x2daa <strnlen+0x2>
    2db4:	80 95       	com	r24
    2db6:	90 95       	com	r25
    2db8:	8e 0f       	add	r24, r30
    2dba:	9f 1f       	adc	r25, r31
    2dbc:	08 95       	ret

00002dbe <fputc>:
    2dbe:	0f 93       	push	r16
    2dc0:	1f 93       	push	r17
    2dc2:	cf 93       	push	r28
    2dc4:	df 93       	push	r29
    2dc6:	8c 01       	movw	r16, r24
    2dc8:	eb 01       	movw	r28, r22
    2dca:	8b 81       	ldd	r24, Y+3	; 0x03
    2dcc:	81 ff       	sbrs	r24, 1
    2dce:	1b c0       	rjmp	.+54     	; 0x2e06 <fputc+0x48>
    2dd0:	82 ff       	sbrs	r24, 2
    2dd2:	0d c0       	rjmp	.+26     	; 0x2dee <fputc+0x30>
    2dd4:	2e 81       	ldd	r18, Y+6	; 0x06
    2dd6:	3f 81       	ldd	r19, Y+7	; 0x07
    2dd8:	8c 81       	ldd	r24, Y+4	; 0x04
    2dda:	9d 81       	ldd	r25, Y+5	; 0x05
    2ddc:	28 17       	cp	r18, r24
    2dde:	39 07       	cpc	r19, r25
    2de0:	64 f4       	brge	.+24     	; 0x2dfa <fputc+0x3c>
    2de2:	e8 81       	ld	r30, Y
    2de4:	f9 81       	ldd	r31, Y+1	; 0x01
    2de6:	01 93       	st	Z+, r16
    2de8:	f9 83       	std	Y+1, r31	; 0x01
    2dea:	e8 83       	st	Y, r30
    2dec:	06 c0       	rjmp	.+12     	; 0x2dfa <fputc+0x3c>
    2dee:	e8 85       	ldd	r30, Y+8	; 0x08
    2df0:	f9 85       	ldd	r31, Y+9	; 0x09
    2df2:	80 2f       	mov	r24, r16
    2df4:	09 95       	icall
    2df6:	00 97       	sbiw	r24, 0x00	; 0
    2df8:	31 f4       	brne	.+12     	; 0x2e06 <fputc+0x48>
    2dfa:	8e 81       	ldd	r24, Y+6	; 0x06
    2dfc:	9f 81       	ldd	r25, Y+7	; 0x07
    2dfe:	01 96       	adiw	r24, 0x01	; 1
    2e00:	9f 83       	std	Y+7, r25	; 0x07
    2e02:	8e 83       	std	Y+6, r24	; 0x06
    2e04:	02 c0       	rjmp	.+4      	; 0x2e0a <fputc+0x4c>
    2e06:	0f ef       	ldi	r16, 0xFF	; 255
    2e08:	1f ef       	ldi	r17, 0xFF	; 255
    2e0a:	c8 01       	movw	r24, r16
    2e0c:	df 91       	pop	r29
    2e0e:	cf 91       	pop	r28
    2e10:	1f 91       	pop	r17
    2e12:	0f 91       	pop	r16
    2e14:	08 95       	ret

00002e16 <__ultoa_invert>:
    2e16:	fa 01       	movw	r30, r20
    2e18:	aa 27       	eor	r26, r26
    2e1a:	28 30       	cpi	r18, 0x08	; 8
    2e1c:	51 f1       	breq	.+84     	; 0x2e72 <__ultoa_invert+0x5c>
    2e1e:	20 31       	cpi	r18, 0x10	; 16
    2e20:	81 f1       	breq	.+96     	; 0x2e82 <__ultoa_invert+0x6c>
    2e22:	e8 94       	clt
    2e24:	6f 93       	push	r22
    2e26:	6e 7f       	andi	r22, 0xFE	; 254
    2e28:	6e 5f       	subi	r22, 0xFE	; 254
    2e2a:	7f 4f       	sbci	r23, 0xFF	; 255
    2e2c:	8f 4f       	sbci	r24, 0xFF	; 255
    2e2e:	9f 4f       	sbci	r25, 0xFF	; 255
    2e30:	af 4f       	sbci	r26, 0xFF	; 255
    2e32:	b1 e0       	ldi	r27, 0x01	; 1
    2e34:	3e d0       	rcall	.+124    	; 0x2eb2 <__ultoa_invert+0x9c>
    2e36:	b4 e0       	ldi	r27, 0x04	; 4
    2e38:	3c d0       	rcall	.+120    	; 0x2eb2 <__ultoa_invert+0x9c>
    2e3a:	67 0f       	add	r22, r23
    2e3c:	78 1f       	adc	r23, r24
    2e3e:	89 1f       	adc	r24, r25
    2e40:	9a 1f       	adc	r25, r26
    2e42:	a1 1d       	adc	r26, r1
    2e44:	68 0f       	add	r22, r24
    2e46:	79 1f       	adc	r23, r25
    2e48:	8a 1f       	adc	r24, r26
    2e4a:	91 1d       	adc	r25, r1
    2e4c:	a1 1d       	adc	r26, r1
    2e4e:	6a 0f       	add	r22, r26
    2e50:	71 1d       	adc	r23, r1
    2e52:	81 1d       	adc	r24, r1
    2e54:	91 1d       	adc	r25, r1
    2e56:	a1 1d       	adc	r26, r1
    2e58:	20 d0       	rcall	.+64     	; 0x2e9a <__ultoa_invert+0x84>
    2e5a:	09 f4       	brne	.+2      	; 0x2e5e <__ultoa_invert+0x48>
    2e5c:	68 94       	set
    2e5e:	3f 91       	pop	r19
    2e60:	2a e0       	ldi	r18, 0x0A	; 10
    2e62:	26 9f       	mul	r18, r22
    2e64:	11 24       	eor	r1, r1
    2e66:	30 19       	sub	r19, r0
    2e68:	30 5d       	subi	r19, 0xD0	; 208
    2e6a:	31 93       	st	Z+, r19
    2e6c:	de f6       	brtc	.-74     	; 0x2e24 <__ultoa_invert+0xe>
    2e6e:	cf 01       	movw	r24, r30
    2e70:	08 95       	ret
    2e72:	46 2f       	mov	r20, r22
    2e74:	47 70       	andi	r20, 0x07	; 7
    2e76:	40 5d       	subi	r20, 0xD0	; 208
    2e78:	41 93       	st	Z+, r20
    2e7a:	b3 e0       	ldi	r27, 0x03	; 3
    2e7c:	0f d0       	rcall	.+30     	; 0x2e9c <__ultoa_invert+0x86>
    2e7e:	c9 f7       	brne	.-14     	; 0x2e72 <__ultoa_invert+0x5c>
    2e80:	f6 cf       	rjmp	.-20     	; 0x2e6e <__ultoa_invert+0x58>
    2e82:	46 2f       	mov	r20, r22
    2e84:	4f 70       	andi	r20, 0x0F	; 15
    2e86:	40 5d       	subi	r20, 0xD0	; 208
    2e88:	4a 33       	cpi	r20, 0x3A	; 58
    2e8a:	18 f0       	brcs	.+6      	; 0x2e92 <__ultoa_invert+0x7c>
    2e8c:	49 5d       	subi	r20, 0xD9	; 217
    2e8e:	31 fd       	sbrc	r19, 1
    2e90:	40 52       	subi	r20, 0x20	; 32
    2e92:	41 93       	st	Z+, r20
    2e94:	02 d0       	rcall	.+4      	; 0x2e9a <__ultoa_invert+0x84>
    2e96:	a9 f7       	brne	.-22     	; 0x2e82 <__ultoa_invert+0x6c>
    2e98:	ea cf       	rjmp	.-44     	; 0x2e6e <__ultoa_invert+0x58>
    2e9a:	b4 e0       	ldi	r27, 0x04	; 4
    2e9c:	a6 95       	lsr	r26
    2e9e:	97 95       	ror	r25
    2ea0:	87 95       	ror	r24
    2ea2:	77 95       	ror	r23
    2ea4:	67 95       	ror	r22
    2ea6:	ba 95       	dec	r27
    2ea8:	c9 f7       	brne	.-14     	; 0x2e9c <__ultoa_invert+0x86>
    2eaa:	00 97       	sbiw	r24, 0x00	; 0
    2eac:	61 05       	cpc	r22, r1
    2eae:	71 05       	cpc	r23, r1
    2eb0:	08 95       	ret
    2eb2:	9b 01       	movw	r18, r22
    2eb4:	ac 01       	movw	r20, r24
    2eb6:	0a 2e       	mov	r0, r26
    2eb8:	06 94       	lsr	r0
    2eba:	57 95       	ror	r21
    2ebc:	47 95       	ror	r20
    2ebe:	37 95       	ror	r19
    2ec0:	27 95       	ror	r18
    2ec2:	ba 95       	dec	r27
    2ec4:	c9 f7       	brne	.-14     	; 0x2eb8 <__ultoa_invert+0xa2>
    2ec6:	62 0f       	add	r22, r18
    2ec8:	73 1f       	adc	r23, r19
    2eca:	84 1f       	adc	r24, r20
    2ecc:	95 1f       	adc	r25, r21
    2ece:	a0 1d       	adc	r26, r0
    2ed0:	08 95       	ret

00002ed2 <_exit>:
    2ed2:	f8 94       	cli

00002ed4 <__stop_program>:
    2ed4:	ff cf       	rjmp	.-2      	; 0x2ed4 <__stop_program>
